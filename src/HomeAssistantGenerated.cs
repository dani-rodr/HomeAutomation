//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v25.18.1.0
//   At: 2025-07-18T18:42:56.9392360+08:00
//
// *** Make sure the version of the codegen tool and your nugets NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/user/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<IEntityFactory, GeneratedEntityFactory>();
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<ConversationEntities>();
        serviceCollection.AddTransient<CounterEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<FanEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputNumberEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<NotifyEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TagEntities>();
        serviceCollection.AddTransient<TextEntities>();
        serviceCollection.AddTransient<TimerEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WakeWordEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<BermudaServices>();
        serviceCollection.AddTransient<BlueprintServices>();
        serviceCollection.AddTransient<BrowserModServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FluxLedServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GoogleAssistantServices>();
        serviceCollection.AddTransient<GoogleGenerativeAiConversationServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HomekitServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NoderedServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RepairsServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SonoffServices>();
        serviceCollection.AddTransient<SpookServices>();
        serviceCollection.AddTransient<SshServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimeServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TplinkServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UniversalServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<UtilityMeterServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WakeOnLanServices>();
        serviceCollection.AddTransient<WatchmanServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<WebostvServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

/// <summary>
/// Allows HassModel to instantiate the correct generated Entity types
/// </summary>
public class GeneratedEntityFactory : IEntityFactory
{
    public Entity CreateEntity(IHaContext haContext, string entityId)
    {
        var dot = entityId.IndexOf('.', StringComparison.Ordinal);
        var domain = dot < 0 ? entityId.AsSpan() : entityId[..dot];
        return domain switch
        {
            "automation" => new AutomationEntity(haContext, entityId),
            "binary_sensor" => new BinarySensorEntity(haContext, entityId),
            "button" => new ButtonEntity(haContext, entityId),
            "climate" => new ClimateEntity(haContext, entityId),
            "conversation" => new ConversationEntity(haContext, entityId),
            "counter" => new CounterEntity(haContext, entityId),
            "device_tracker" => new DeviceTrackerEntity(haContext, entityId),
            "event" => new EventEntity(haContext, entityId),
            "fan" => new FanEntity(haContext, entityId),
            "input_boolean" => new InputBooleanEntity(haContext, entityId),
            "input_button" => new InputButtonEntity(haContext, entityId),
            "input_number" => new InputNumberEntity(haContext, entityId),
            "input_text" => new InputTextEntity(haContext, entityId),
            "light" => new LightEntity(haContext, entityId),
            "lock" => new LockEntity(haContext, entityId),
            "media_player" => new MediaPlayerEntity(haContext, entityId),
            "notify" => new NotifyEntity(haContext, entityId),
            "number" => new NumberEntity(haContext, entityId),
            "person" => new PersonEntity(haContext, entityId),
            "remote" => new RemoteEntity(haContext, entityId),
            "scene" => new SceneEntity(haContext, entityId),
            "script" => new ScriptEntity(haContext, entityId),
            "select" => new SelectEntity(haContext, entityId),
            "sensor" when IsNumeric() => new NumericSensorEntity(haContext, entityId),
            "sensor" => new SensorEntity(haContext, entityId),
            "sun" => new SunEntity(haContext, entityId),
            "switch" => new SwitchEntity(haContext, entityId),
            "tag" => new TagEntity(haContext, entityId),
            "text" => new TextEntity(haContext, entityId),
            "timer" => new TimerEntity(haContext, entityId),
            "tts" => new TtsEntity(haContext, entityId),
            "update" => new UpdateEntity(haContext, entityId),
            "wake_word" => new WakeWordEntity(haContext, entityId),
            "weather" => new WeatherEntity(haContext, entityId),
            "zone" => new ZoneEntity(haContext, entityId),
            _ => new Entity(haContext, entityId)};
        bool IsNumeric() => haContext.GetState(entityId)?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    ClimateEntities Climate { get; }

    ConversationEntities Conversation { get; }

    CounterEntities Counter { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    EventEntities Event { get; }

    FanEntities Fan { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputNumberEntities InputNumber { get; }

    InputTextEntities InputText { get; }

    LockEntities Lock { get; }

    NotifyEntities Notify { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    SceneEntities Scene { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TagEntities Tag { get; }

    TextEntities Text { get; }

    TimerEntities Timer { get; }

    UpdateEntities Update { get; }

    WakeWordEntities WakeWord { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }

    TtsEntities Tts { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public ConversationEntities Conversation => new(_haContext);
    public CounterEntities Counter => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public EventEntities Event => new(_haContext);
    public FanEntities Fan => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputNumberEntities InputNumber => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public NotifyEntities Notify => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TagEntities Tag => new(_haContext);
    public TextEntities Text => new(_haContext);
    public TimerEntities Timer => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WakeWordEntities WakeWord => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
    public TtsEntities Tts => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all light entities currently registered (at runtime) in Home Assistant as LightEntity</summary>
    public IEnumerable<LightEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("light.")).Select(e => new LightEntity(e));
    ///<summary>Bathroom Lights</summary>
    public LightEntity BathroomLights => new(_haContext, "light.bathroom_lights");
    ///<summary>Bathroom Lights</summary>
    public LightEntity BathroomLights2 => new(_haContext, "light.bathroom_lights_2");
    ///<summary>Bed Lights</summary>
    public LightEntity BedLights => new(_haContext, "light.bed_lights");
    ///<summary>Bed Lights </summary>
    public LightEntity BedLights1 => new(_haContext, "light.bed_lights_1");
    ///<summary>Controller RGB DF1C0D</summary>
    public LightEntity ControllerRgbDf1c0d => new(_haContext, "light.controller_rgb_df1c0d");
    ///<summary>Kitchen Motion Sensor Blue Status Light</summary>
    public LightEntity KitchenMotionSensorBlueStatusLight => new(_haContext, "light.kitchen_motion_sensor_blue_status_light");
    ///<summary>LG Display</summary>
    public LightEntity LgDisplay => new(_haContext, "light.lg_display");
    ///<summary>MiPad Screen</summary>
    public LightEntity MipadScreen => new(_haContext, "light.mipad_screen");
    ///<summary>Pantry Lights</summary>
    public LightEntity PantryLights => new(_haContext, "light.pantry_lights");
    ///<summary>Pantry Lights</summary>
    public LightEntity PantryLights3 => new(_haContext, "light.pantry_lights_3");
    ///<summary>RGB Light Strip</summary>
    public LightEntity RgbLightStrip => new(_haContext, "light.rgb_light_strip");
    ///<summary>RGB Light Strip</summary>
    public LightEntity RgbLightStrip3 => new(_haContext, "light.rgb_light_strip_3");
    ///<summary>Sala Lights 2</summary>
    public LightEntity SalaLights22 => new(_haContext, "light.sala_lights_2_2");
    ///<summary>Sala Lights</summary>
    public LightEntity SalaLights3 => new(_haContext, "light.sala_lights_3");
    ///<summary>Sala Lights</summary>
    public LightEntity SalaLightsGroup => new(_haContext, "light.sala_lights_group");
    ///<summary>TV Backlight 3 Lite</summary>
    public LightEntity TvBacklight3Lite => new(_haContext, "light.tv_backlight_3_lite");
    ///<summary>TV Backlight 3 Lite Segment 001</summary>
    public LightEntity TvBacklight3LiteSegment001 => new(_haContext, "light.tv_backlight_3_lite_segment_001");
    ///<summary>TV Backlight 3 Lite Segment 002</summary>
    public LightEntity TvBacklight3LiteSegment002 => new(_haContext, "light.tv_backlight_3_lite_segment_002");
    ///<summary>TV Backlight 3 Lite Segment 003</summary>
    public LightEntity TvBacklight3LiteSegment003 => new(_haContext, "light.tv_backlight_3_lite_segment_003");
    ///<summary>TV Backlight 3 Lite Segment 004</summary>
    public LightEntity TvBacklight3LiteSegment004 => new(_haContext, "light.tv_backlight_3_lite_segment_004");
    ///<summary>TV Backlight 3 Lite Segment 005</summary>
    public LightEntity TvBacklight3LiteSegment005 => new(_haContext, "light.tv_backlight_3_lite_segment_005");
    ///<summary>TV Backlight 3 Lite Segment 006</summary>
    public LightEntity TvBacklight3LiteSegment006 => new(_haContext, "light.tv_backlight_3_lite_segment_006");
    ///<summary>TV Backlight 3 Lite Segment 007</summary>
    public LightEntity TvBacklight3LiteSegment007 => new(_haContext, "light.tv_backlight_3_lite_segment_007");
    ///<summary>TV Backlight 3 Lite Segment 008</summary>
    public LightEntity TvBacklight3LiteSegment008 => new(_haContext, "light.tv_backlight_3_lite_segment_008");
    ///<summary>TV Backlight 3 Lite Segment 009</summary>
    public LightEntity TvBacklight3LiteSegment009 => new(_haContext, "light.tv_backlight_3_lite_segment_009");
    ///<summary>TV Backlight 3 Lite Segment 010</summary>
    public LightEntity TvBacklight3LiteSegment010 => new(_haContext, "light.tv_backlight_3_lite_segment_010");
    ///<summary>TV Backlight 3 Lite Segment 011</summary>
    public LightEntity TvBacklight3LiteSegment011 => new(_haContext, "light.tv_backlight_3_lite_segment_011");
    ///<summary>TV Backlight 3 Lite Segment 012</summary>
    public LightEntity TvBacklight3LiteSegment012 => new(_haContext, "light.tv_backlight_3_lite_segment_012");
    ///<summary>TV Backlight 3 Lite Segment 013</summary>
    public LightEntity TvBacklight3LiteSegment013 => new(_haContext, "light.tv_backlight_3_lite_segment_013");
    ///<summary>TV Backlight 3 Lite Segment 014</summary>
    public LightEntity TvBacklight3LiteSegment014 => new(_haContext, "light.tv_backlight_3_lite_segment_014");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all media_player entities currently registered (at runtime) in Home Assistant as MediaPlayerEntity</summary>
    public IEnumerable<MediaPlayerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("media_player.")).Select(e => new MediaPlayerEntity(e));
    ///<summary>AirPlay</summary>
    public MediaPlayerEntity _65c755Television => new(_haContext, "media_player.65c755_television");
    ///<summary>LG TV</summary>
    public MediaPlayerEntity LgTv => new(_haContext, "media_player.lg_tv");
    ///<summary>LG webOS Smart TV</summary>
    public MediaPlayerEntity LgWebosSmartTv => new(_haContext, "media_player.lg_webos_smart_tv");
    ///<summary>LG webOS TV FE94</summary>
    public MediaPlayerEntity LgWebosTvFe94 => new(_haContext, "media_player.lg_webos_tv_fe94");
    ///<summary>[LG] webOS TV OLED42C4PSA</summary>
    public MediaPlayerEntity LgWebosTvOled42c4psa => new(_haContext, "media_player.lg_webos_tv_oled42c4psa");
    ///<summary>Living Room TV</summary>
    public MediaPlayerEntity LivingRoomTv => new(_haContext, "media_player.living_room_tv");
    ///<summary>Living Room TV</summary>
    public MediaPlayerEntity LivingRoomTv2 => new(_haContext, "media_player.living_room_tv_2");
    ///<summary>Living Room TV</summary>
    public MediaPlayerEntity LivingRoomTv3 => new(_haContext, "media_player.living_room_tv_3");
    ///<summary>MiPad</summary>
    public MediaPlayerEntity Mipad => new(_haContext, "media_player.mipad");
    ///<summary>Projector</summary>
    public MediaPlayerEntity Projector => new(_haContext, "media_player.projector");
    ///<summary>Projector</summary>
    public MediaPlayerEntity Projector2 => new(_haContext, "media_player.projector_2");
    ///<summary>TCL TV</summary>
    public MediaPlayerEntity Tcl65c755 => new(_haContext, "media_player.tcl65c755");
    ///<summary>VLC-TELNET</summary>
    public MediaPlayerEntity VlcTelnet => new(_haContext, "media_player.vlc_telnet");
    ///<summary>Xiaomi Air Fryer</summary>
    public MediaPlayerEntity XiaomiAirFryer => new(_haContext, "media_player.xiaomi_air_fryer");
    ///<summary>Xiaomi TV Box</summary>
    public MediaPlayerEntity XiaomiTvBox => new(_haContext, "media_player.xiaomi_tv_box");
    public MediaPlayerEntity XiaomiTvBox11 => new(_haContext, "media_player.xiaomi_tv_box_11");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all automation entities currently registered (at runtime) in Home Assistant as AutomationEntity</summary>
    public IEnumerable<AutomationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("automation.")).Select(e => new AutomationEntity(e));
    ///<summary>Home Assistant Started</summary>
    public AutomationEntity SetTheme => new(_haContext, "automation.set_theme");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all binary_sensor entities currently registered (at runtime) in Home Assistant as BinarySensorEntity</summary>
    public IEnumerable<BinarySensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("binary_sensor.")).Select(e => new BinarySensorEntity(e));
    ///<summary>Poco F4 GT Ping</summary>
    public BinarySensorEntity _1921680152 => new(_haContext, "binary_sensor.192_168_0_152");
    ///<summary>21051182C Bluetooth state</summary>
    public BinarySensorEntity _21051182cBluetoothState => new(_haContext, "binary_sensor.21051182c_bluetooth_state");
    ///<summary>21051182C Is charging</summary>
    public BinarySensorEntity _21051182cIsCharging => new(_haContext, "binary_sensor.21051182c_is_charging");
    ///<summary>8.8.8.8</summary>
    public BinarySensorEntity _8888 => new(_haContext, "binary_sensor.8_8_8_8");
    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Baseus Tag BLE</summary>
    public BinarySensorEntity BaseusTagBle => new(_haContext, "binary_sensor.baseus_tag_ble");
    ///<summary>Bathroom Lights Cloud connection</summary>
    public BinarySensorEntity BathroomLightsCloudConnection => new(_haContext, "binary_sensor.bathroom_lights_cloud_connection");
    ///<summary>Bathroom Lights Overheated</summary>
    public BinarySensorEntity BathroomLightsOverheated => new(_haContext, "binary_sensor.bathroom_lights_overheated");
    ///<summary>Bathroom Motion Sensor Moving Target</summary>
    public BinarySensorEntity BathroomMotionSensorMovingTarget => new(_haContext, "binary_sensor.bathroom_motion_sensor_moving_target");
    ///<summary>Bathroom Motion Sensor Presence</summary>
    public BinarySensorEntity BathroomMotionSensorPresence => new(_haContext, "binary_sensor.bathroom_motion_sensor_presence");
    ///<summary>Bathroom Motion Sensor Smart Presence</summary>
    public BinarySensorEntity BathroomMotionSensorSmartPresence => new(_haContext, "binary_sensor.bathroom_motion_sensor_smart_presence");
    ///<summary>Bathroom Motion Sensor Smart Presence Unfiltered</summary>
    public BinarySensorEntity BathroomMotionSensorSmartPresenceUnfiltered => new(_haContext, "binary_sensor.bathroom_motion_sensor_smart_presence_unfiltered");
    ///<summary>Bathroom Motion Sensor Still Target</summary>
    public BinarySensorEntity BathroomMotionSensorStillTarget => new(_haContext, "binary_sensor.bathroom_motion_sensor_still_target");
    ///<summary>Bathroom Presence Sensors</summary>
    public BinarySensorEntity BathroomPresenceSensors => new(_haContext, "binary_sensor.bathroom_presence_sensors");
    ///<summary>Bed Lights  Cloud connection</summary>
    public BinarySensorEntity BedLightsCloudConnection => new(_haContext, "binary_sensor.bed_lights_cloud_connection");
    ///<summary>Bed Lights  Overheated</summary>
    public BinarySensorEntity BedLightsOverheated => new(_haContext, "binary_sensor.bed_lights_overheated");
    ///<summary>Bedroom Motion Sensor Connectivity</summary>
    public BinarySensorEntity BedroomMotionSensorConnectivity => new(_haContext, "binary_sensor.bedroom_motion_sensor_connectivity");
    ///<summary>Bedroom Motion Sensor Mi Scale Presence</summary>
    public BinarySensorEntity BedroomMotionSensorMiScalePresence => new(_haContext, "binary_sensor.bedroom_motion_sensor_mi_scale_presence");
    ///<summary>Bedroom Motion Sensor Moving Target</summary>
    public BinarySensorEntity BedroomMotionSensorMovingTarget => new(_haContext, "binary_sensor.bedroom_motion_sensor_moving_target");
    ///<summary>Bedroom Motion Sensor Presence</summary>
    public BinarySensorEntity BedroomMotionSensorPresence => new(_haContext, "binary_sensor.bedroom_motion_sensor_presence");
    ///<summary>Bedroom Motion Sensor Smart Presence</summary>
    public BinarySensorEntity BedroomMotionSensorSmartPresence => new(_haContext, "binary_sensor.bedroom_motion_sensor_smart_presence");
    ///<summary>Bedroom Motion Sensor Smart Presence Unfiltered</summary>
    public BinarySensorEntity BedroomMotionSensorSmartPresenceUnfiltered => new(_haContext, "binary_sensor.bedroom_motion_sensor_smart_presence_unfiltered");
    ///<summary>Bedroom Motion Sensor Still Target</summary>
    public BinarySensorEntity BedroomMotionSensorStillTarget => new(_haContext, "binary_sensor.bedroom_motion_sensor_still_target");
    ///<summary>Bedroom Presence Sensors</summary>
    public BinarySensorEntity BedroomPresenceSensors => new(_haContext, "binary_sensor.bedroom_presence_sensors");
    ///<summary>Ceiling Fan Cloud connection</summary>
    public BinarySensorEntity CeilingFanCloudConnection => new(_haContext, "binary_sensor.ceiling_fan_cloud_connection");
    ///<summary>Ceiling Fan Overheated</summary>
    public BinarySensorEntity CeilingFanOverheated => new(_haContext, "binary_sensor.ceiling_fan_overheated");
    ///<summary>Contact Sensor Door</summary>
    public BinarySensorEntity ContactSensorDoor => new(_haContext, "binary_sensor.contact_sensor_door");
    ///<summary>daniel-pc Client</summary>
    public BinarySensorEntity DanielPcClient => new(_haContext, "binary_sensor.daniel_pc_client");
    ///<summary>daniel-pc Key expiry disabled</summary>
    public BinarySensorEntity DanielPcKeyExpiryDisabled => new(_haContext, "binary_sensor.daniel_pc_key_expiry_disabled");
    ///<summary>DANIEL-PC Network status</summary>
    public BinarySensorEntity DanielPcNetworkStatus => new(_haContext, "binary_sensor.daniel_pc_network_status");
    ///<summary>DANIEL-PC SSH status</summary>
    public BinarySensorEntity DanielPcSshStatus => new(_haContext, "binary_sensor.daniel_pc_ssh_status");
    ///<summary>daniel-pc Supports hairpinning</summary>
    public BinarySensorEntity DanielPcSupportsHairpinning => new(_haContext, "binary_sensor.daniel_pc_supports_hairpinning");
    ///<summary>daniel-pc Supports IPv6</summary>
    public BinarySensorEntity DanielPcSupportsIpv6 => new(_haContext, "binary_sensor.daniel_pc_supports_ipv6");
    ///<summary>daniel-pc Supports NAT-PMP</summary>
    public BinarySensorEntity DanielPcSupportsNatPmp => new(_haContext, "binary_sensor.daniel_pc_supports_nat_pmp");
    ///<summary>daniel-pc Supports PCP</summary>
    public BinarySensorEntity DanielPcSupportsPcp => new(_haContext, "binary_sensor.daniel_pc_supports_pcp");
    ///<summary>daniel-pc Supports UDP</summary>
    public BinarySensorEntity DanielPcSupportsUdp => new(_haContext, "binary_sensor.daniel_pc_supports_udp");
    ///<summary>daniel-pc Supports UPnP</summary>
    public BinarySensorEntity DanielPcSupportsUpnp => new(_haContext, "binary_sensor.daniel_pc_supports_upnp");
    ///<summary>Desk Motion Sensor Moving Target</summary>
    public BinarySensorEntity DeskMotionSensorMovingTarget => new(_haContext, "binary_sensor.desk_motion_sensor_moving_target");
    ///<summary>Desk Motion Sensor Presence</summary>
    public BinarySensorEntity DeskMotionSensorPresence => new(_haContext, "binary_sensor.desk_motion_sensor_presence");
    ///<summary>Desk Motion Sensor Smart Presence</summary>
    public BinarySensorEntity DeskMotionSensorSmartPresence => new(_haContext, "binary_sensor.desk_motion_sensor_smart_presence");
    ///<summary>Desk Motion Sensor Smart Presence Unfiltered</summary>
    public BinarySensorEntity DeskMotionSensorSmartPresenceUnfiltered => new(_haContext, "binary_sensor.desk_motion_sensor_smart_presence_unfiltered");
    ///<summary>Desk Motion Sensor Still Target</summary>
    public BinarySensorEntity DeskMotionSensorStillTarget => new(_haContext, "binary_sensor.desk_motion_sensor_still_target");
    ///<summary>Door Wrapper</summary>
    public BinarySensorEntity DoorWrapper => new(_haContext, "binary_sensor.door_wrapper");
    ///<summary>ESPHome Device Builder Running</summary>
    public BinarySensorEntity EsphomeRunning => new(_haContext, "binary_sensor.esphome_running");
    ///<summary>Flytrap Cloud connection</summary>
    public BinarySensorEntity FlytrapCloudConnection => new(_haContext, "binary_sensor.flytrap_cloud_connection");
    ///<summary>Flytrap Overheated</summary>
    public BinarySensorEntity FlytrapOverheated => new(_haContext, "binary_sensor.flytrap_overheated");
    ///<summary>Front Door</summary>
    public BinarySensorEntity FrontDoor => new(_haContext, "binary_sensor.front_door");
    ///<summary>Front Door Door</summary>
    public BinarySensorEntity FrontDoorDoor => new(_haContext, "binary_sensor.front_door_door");
    ///<summary>homeassistant Client</summary>
    public BinarySensorEntity HomeassistantClient => new(_haContext, "binary_sensor.homeassistant_client");
    ///<summary>homeassistant Key expiry disabled</summary>
    public BinarySensorEntity HomeassistantKeyExpiryDisabled => new(_haContext, "binary_sensor.homeassistant_key_expiry_disabled");
    ///<summary>homeassistant Supports hairpinning</summary>
    public BinarySensorEntity HomeassistantSupportsHairpinning => new(_haContext, "binary_sensor.homeassistant_supports_hairpinning");
    ///<summary>homeassistant Supports IPv6</summary>
    public BinarySensorEntity HomeassistantSupportsIpv6 => new(_haContext, "binary_sensor.homeassistant_supports_ipv6");
    ///<summary>homeassistant Supports NAT-PMP</summary>
    public BinarySensorEntity HomeassistantSupportsNatPmp => new(_haContext, "binary_sensor.homeassistant_supports_nat_pmp");
    ///<summary>homeassistant Supports PCP</summary>
    public BinarySensorEntity HomeassistantSupportsPcp => new(_haContext, "binary_sensor.homeassistant_supports_pcp");
    ///<summary>homeassistant Supports UDP</summary>
    public BinarySensorEntity HomeassistantSupportsUdp => new(_haContext, "binary_sensor.homeassistant_supports_udp");
    ///<summary>homeassistant Supports UPnP</summary>
    public BinarySensorEntity HomeassistantSupportsUpnp => new(_haContext, "binary_sensor.homeassistant_supports_upnp");
    ///<summary>House</summary>
    public BinarySensorEntity House => new(_haContext, "binary_sensor.house");
    ///<summary>House Occupancy</summary>
    public BinarySensorEntity HouseOccupancy => new(_haContext, "binary_sensor.house_occupancy");
    ///<summary>Internet</summary>
    public BinarySensorEntity Internet => new(_haContext, "binary_sensor.internet");
    ///<summary>iPad Focus</summary>
    public BinarySensorEntity IpadFocus => new(_haContext, "binary_sensor.ipad_focus");
    ///<summary>iPhone Focus</summary>
    public BinarySensorEntity IphoneFocus => new(_haContext, "binary_sensor.iphone_focus");
    ///<summary>Kitchen Motion Sensor Moving Target</summary>
    public BinarySensorEntity KitchenMotionSensorMovingTarget => new(_haContext, "binary_sensor.kitchen_motion_sensor_moving_target");
    ///<summary>Kitchen Motion Sensor Presence</summary>
    public BinarySensorEntity KitchenMotionSensorPresence => new(_haContext, "binary_sensor.kitchen_motion_sensor_presence");
    ///<summary>Kitchen Motion Sensor Smart Presence</summary>
    public BinarySensorEntity KitchenMotionSensorSmartPresence => new(_haContext, "binary_sensor.kitchen_motion_sensor_smart_presence");
    ///<summary>Kitchen Motion Sensor Smart Presence Unfiltered</summary>
    public BinarySensorEntity KitchenMotionSensorSmartPresenceUnfiltered => new(_haContext, "binary_sensor.kitchen_motion_sensor_smart_presence_unfiltered");
    ///<summary>Kitchen Motion Sensor Still Target</summary>
    public BinarySensorEntity KitchenMotionSensorStillTarget => new(_haContext, "binary_sensor.kitchen_motion_sensor_still_target");
    ///<summary>Kitchen Motion Sensors</summary>
    public BinarySensorEntity KitchenMotionSensors => new(_haContext, "binary_sensor.kitchen_motion_sensors");
    ///<summary>Living Room Presence Sensors</summary>
    public BinarySensorEntity LivingRoomPresenceSensors => new(_haContext, "binary_sensor.living_room_presence_sensors");
    ///<summary>Mi Watch BLE</summary>
    public BinarySensorEntity MiWatchBle => new(_haContext, "binary_sensor.mi_watch_ble");
    ///<summary>MiPad</summary>
    public BinarySensorEntity Mipad => new(_haContext, "binary_sensor.mipad");
    ///<summary>MiPad Browser dark mode</summary>
    public BinarySensorEntity MipadBrowserDarkMode => new(_haContext, "binary_sensor.mipad_browser_dark_mode");
    ///<summary>MiPad Browser FullyKiosk</summary>
    public BinarySensorEntity MipadBrowserFullykiosk => new(_haContext, "binary_sensor.mipad_browser_fullykiosk");
    ///<summary>Pantry Lights Cloud connection</summary>
    public BinarySensorEntity PantryLightsCloudConnection => new(_haContext, "binary_sensor.pantry_lights_cloud_connection");
    ///<summary>Pantry Lights Overheated</summary>
    public BinarySensorEntity PantryLightsOverheated => new(_haContext, "binary_sensor.pantry_lights_overheated");
    ///<summary>Pantry Motion Sensor Moving Target</summary>
    public BinarySensorEntity PantryMotionSensorMovingTarget => new(_haContext, "binary_sensor.pantry_motion_sensor_moving_target");
    ///<summary>Pantry Motion Sensor Presence</summary>
    public BinarySensorEntity PantryMotionSensorPresence => new(_haContext, "binary_sensor.pantry_motion_sensor_presence");
    ///<summary>Pantry Motion Sensor Smart Presence</summary>
    public BinarySensorEntity PantryMotionSensorSmartPresence => new(_haContext, "binary_sensor.pantry_motion_sensor_smart_presence");
    ///<summary>Pantry Motion Sensor Smart Presence Unfiltered</summary>
    public BinarySensorEntity PantryMotionSensorSmartPresenceUnfiltered => new(_haContext, "binary_sensor.pantry_motion_sensor_smart_presence_unfiltered");
    ///<summary>Pantry Motion Sensor Still Target</summary>
    public BinarySensorEntity PantryMotionSensorStillTarget => new(_haContext, "binary_sensor.pantry_motion_sensor_still_target");
    ///<summary>Pantry Presence Sensors</summary>
    public BinarySensorEntity PantryMotionSensors => new(_haContext, "binary_sensor.pantry_motion_sensors");
    ///<summary>Poco F4 GT BLE</summary>
    public BinarySensorEntity PocoF4GtBle => new(_haContext, "binary_sensor.poco_f4_gt_ble");
    ///<summary>POCO F4 GT Bluetooth state</summary>
    public BinarySensorEntity PocoF4GtBluetoothState => new(_haContext, "binary_sensor.poco_f4_gt_bluetooth_state");
    ///<summary>Redmi Watch 5 BLE</summary>
    public BinarySensorEntity RedmiWatch5Ble => new(_haContext, "binary_sensor.redmi_watch_5_ble");
    ///<summary>RGB Light Strip Cloud connection</summary>
    public BinarySensorEntity RgbLightStripCloudConnection => new(_haContext, "binary_sensor.rgb_light_strip_cloud_connection");
    ///<summary>RGB Light Strip Overheated</summary>
    public BinarySensorEntity RgbLightStripOverheated => new(_haContext, "binary_sensor.rgb_light_strip_overheated");
    ///<summary>RPi Power status</summary>
    public BinarySensorEntity RpiPowerStatus => new(_haContext, "binary_sensor.rpi_power_status");
    ///<summary>Sala Lights 2 Cloud connection</summary>
    public BinarySensorEntity SalaLights2CloudConnection => new(_haContext, "binary_sensor.sala_lights_2_cloud_connection");
    ///<summary>Sala Lights 2 Overheated</summary>
    public BinarySensorEntity SalaLights2Overheated => new(_haContext, "binary_sensor.sala_lights_2_overheated");
    ///<summary>Sala Lights Cloud connection</summary>
    public BinarySensorEntity SalaLightsCloudConnection => new(_haContext, "binary_sensor.sala_lights_cloud_connection");
    ///<summary>Sala Lights Overheated</summary>
    public BinarySensorEntity SalaLightsOverheated => new(_haContext, "binary_sensor.sala_lights_overheated");
    ///<summary>Sala Motion Sensor Smart Presence</summary>
    public BinarySensorEntity SalaMotionSensorSmartPresence => new(_haContext, "binary_sensor.sala_motion_sensor_smart_presence");
    ///<summary>Sala Motion Sensor Smart Presence Unfiltered</summary>
    public BinarySensorEntity SalaMotionSensorSmartPresenceUnfiltered => new(_haContext, "binary_sensor.sala_motion_sensor_smart_presence_unfiltered");
    ///<summary>Sala Moving Presence</summary>
    public BinarySensorEntity SalaMovingPresence => new(_haContext, "binary_sensor.sala_moving_presence");
    ///<summary>Sala Presence - 1</summary>
    public BinarySensorEntity SalaPresence1 => new(_haContext, "binary_sensor.sala_presence_1");
    ///<summary>Sala Static Presence</summary>
    public BinarySensorEntity SalaStaticPresence => new(_haContext, "binary_sensor.sala_static_presence");
    ///<summary>Smart Plug 1 Power Exceeds Threshold</summary>
    public BinarySensorEntity SmartPlug1PowerExceedsThreshold => new(_haContext, "binary_sensor.smart_plug_1_power_exceeds_threshold");
    ///<summary>Smart Plug 1 Sonoff S31 Button</summary>
    public BinarySensorEntity SmartPlug1SonoffS31Button => new(_haContext, "binary_sensor.smart_plug_1_sonoff_s31_button");
    ///<summary>Smart Plug 1 Sonoff S31 Status</summary>
    public BinarySensorEntity SmartPlug1SonoffS31Status => new(_haContext, "binary_sensor.smart_plug_1_sonoff_s31_status");
    ///<summary>Smart Plug 2 Power Exceeds Threshold</summary>
    public BinarySensorEntity SmartPlug2PowerExceedsThreshold => new(_haContext, "binary_sensor.smart_plug_2_power_exceeds_threshold");
    ///<summary>Smart Plug 2 Sonoff S31 Button</summary>
    public BinarySensorEntity SmartPlug2SonoffS31Button => new(_haContext, "binary_sensor.smart_plug_2_sonoff_s31_button");
    ///<summary>Smart Plug 2 Sonoff S31 Status</summary>
    public BinarySensorEntity SmartPlug2SonoffS31Status => new(_haContext, "binary_sensor.smart_plug_2_sonoff_s31_status");
    ///<summary>Smart Plug 3 Power Exceeds Threshold</summary>
    public BinarySensorEntity SmartPlug3PowerExceedsThreshold => new(_haContext, "binary_sensor.smart_plug_3_power_exceeds_threshold");
    ///<summary>Smart Plug 3 Sonoff S31 Button</summary>
    public BinarySensorEntity SmartPlug3SonoffS31Button => new(_haContext, "binary_sensor.smart_plug_3_sonoff_s31_button");
    ///<summary>Smart Plug 3 Sonoff S31 Status</summary>
    public BinarySensorEntity SmartPlug3SonoffS31Status => new(_haContext, "binary_sensor.smart_plug_3_sonoff_s31_status");
    ///<summary>Smart Plug 4 Power Exceeds Threshold</summary>
    public BinarySensorEntity SmartPlug4PowerExceedsThreshold => new(_haContext, "binary_sensor.smart_plug_4_power_exceeds_threshold");
    ///<summary>Smart Plug 4 Sonoff S31 Button</summary>
    public BinarySensorEntity SmartPlug4SonoffS31Button => new(_haContext, "binary_sensor.smart_plug_4_sonoff_s31_button");
    ///<summary>Smart Plug 4 Sonoff S31 Status</summary>
    public BinarySensorEntity SmartPlug4SonoffS31Status => new(_haContext, "binary_sensor.smart_plug_4_sonoff_s31_status");
    ///<summary>Sun Solar rising</summary>
    public BinarySensorEntity SunSolarRising => new(_haContext, "binary_sensor.sun_solar_rising");
    ///<summary>WiFi Temperature &amp; Humidity Tamper</summary>
    public BinarySensorEntity WifiTemperatureHumidityTamper => new(_haContext, "binary_sensor.wifi_temperature_humidity_tamper");
    ///<summary>xiaomi-21121210g Client</summary>
    public BinarySensorEntity Xiaomi21121210gClient => new(_haContext, "binary_sensor.xiaomi_21121210g_client");
    ///<summary>xiaomi-21121210g Key expiry disabled</summary>
    public BinarySensorEntity Xiaomi21121210gKeyExpiryDisabled => new(_haContext, "binary_sensor.xiaomi_21121210g_key_expiry_disabled");
    ///<summary>xiaomi-21121210g Supports hairpinning</summary>
    public BinarySensorEntity Xiaomi21121210gSupportsHairpinning => new(_haContext, "binary_sensor.xiaomi_21121210g_supports_hairpinning");
    ///<summary>xiaomi-21121210g Supports IPv6</summary>
    public BinarySensorEntity Xiaomi21121210gSupportsIpv6 => new(_haContext, "binary_sensor.xiaomi_21121210g_supports_ipv6");
    ///<summary>xiaomi-21121210g Supports NAT-PMP</summary>
    public BinarySensorEntity Xiaomi21121210gSupportsNatPmp => new(_haContext, "binary_sensor.xiaomi_21121210g_supports_nat_pmp");
    ///<summary>xiaomi-21121210g Supports PCP</summary>
    public BinarySensorEntity Xiaomi21121210gSupportsPcp => new(_haContext, "binary_sensor.xiaomi_21121210g_supports_pcp");
    ///<summary>xiaomi-21121210g Supports UDP</summary>
    public BinarySensorEntity Xiaomi21121210gSupportsUdp => new(_haContext, "binary_sensor.xiaomi_21121210g_supports_udp");
    ///<summary>xiaomi-21121210g Supports UPnP</summary>
    public BinarySensorEntity Xiaomi21121210gSupportsUpnp => new(_haContext, "binary_sensor.xiaomi_21121210g_supports_upnp");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all button entities currently registered (at runtime) in Home Assistant as ButtonEntity</summary>
    public IEnumerable<ButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("button.")).Select(e => new ButtonEntity(e));
    ///<summary>65C755 Identify</summary>
    public ButtonEntity _65c755Identify => new(_haContext, "button.65c755_identify");
    ///<summary>AC Fan Mode Toggle</summary>
    public ButtonEntity AcFanModeToggle => new(_haContext, "button.ac_fan_mode_toggle");
    ///<summary>Air Fryer Pause/Resume</summary>
    public ButtonEntity AirFryerPauseResume => new(_haContext, "button.air_fryer_pause_resume");
    ///<summary>Air Fryer Time Decrease</summary>
    public ButtonEntity AirFryerTimeDecrease => new(_haContext, "button.air_fryer_time_decrease");
    ///<summary>Air Fryer Time Increase</summary>
    public ButtonEntity AirFryerTimeIncrease => new(_haContext, "button.air_fryer_time_increase");
    ///<summary>Bathroom Lights Restart</summary>
    public ButtonEntity BathroomLightsRestart => new(_haContext, "button.bathroom_lights_restart");
    ///<summary>Bathroom Motion Sensor factory reset</summary>
    public ButtonEntity BathroomMotionSensorFactoryReset => new(_haContext, "button.bathroom_motion_sensor_factory_reset");
    ///<summary>Bathroom Motion Sensor Manual Clear</summary>
    public ButtonEntity BathroomMotionSensorManualClear => new(_haContext, "button.bathroom_motion_sensor_manual_clear");
    ///<summary>Bathroom Motion Sensor query params</summary>
    public ButtonEntity BathroomMotionSensorQueryParams => new(_haContext, "button.bathroom_motion_sensor_query_params");
    ///<summary>Bathroom Motion Sensor restart</summary>
    public ButtonEntity BathroomMotionSensorRestart => new(_haContext, "button.bathroom_motion_sensor_restart");
    ///<summary>Bathroom Motion Sensor Restart ESP32</summary>
    public ButtonEntity BathroomMotionSensorRestartEsp32 => new(_haContext, "button.bathroom_motion_sensor_restart_esp32");
    ///<summary>Bedroom Motion Sensor Enroll</summary>
    public ButtonEntity BedroomMotionSensorEnroll => new(_haContext, "button.bedroom_motion_sensor_enroll");
    ///<summary>Bedroom Motion Sensor factory reset</summary>
    public ButtonEntity BedroomMotionSensorFactoryReset => new(_haContext, "button.bedroom_motion_sensor_factory_reset");
    ///<summary>Bedroom Motion Sensor Manual Clear</summary>
    public ButtonEntity BedroomMotionSensorManualClear => new(_haContext, "button.bedroom_motion_sensor_manual_clear");
    ///<summary>Bedroom Motion Sensor query params</summary>
    public ButtonEntity BedroomMotionSensorQueryParams => new(_haContext, "button.bedroom_motion_sensor_query_params");
    ///<summary>Bedroom Motion Sensor restart</summary>
    public ButtonEntity BedroomMotionSensorRestart => new(_haContext, "button.bedroom_motion_sensor_restart");
    ///<summary>Bedroom Motion Sensor Restart</summary>
    public ButtonEntity BedroomMotionSensorRestart2 => new(_haContext, "button.bedroom_motion_sensor_restart_2");
    ///<summary>Bedroom Motion Sensor Restart ESP32</summary>
    public ButtonEntity BedroomMotionSensorRestartEsp32 => new(_haContext, "button.bedroom_motion_sensor_restart_esp32");
    ///<summary>Bedroom Motion Sensor Update</summary>
    public ButtonEntity BedroomMotionSensorUpdate => new(_haContext, "button.bedroom_motion_sensor_update");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Stop Program</summary>
    public ButtonEntity CareliSg593061393Maf05aCancelCookingA22 => new(_haContext, "button.careli_sg_593061393_maf05a_cancel_cooking_a_2_2");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Pause</summary>
    public ButtonEntity CareliSg593061393Maf05aPauseA23 => new(_haContext, "button.careli_sg_593061393_maf05a_pause_a_2_3");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Continue Program</summary>
    public ButtonEntity CareliSg593061393Maf05aResumeCookA32 => new(_haContext, "button.careli_sg_593061393_maf05a_resume_cook_a_3_2");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Start Program</summary>
    public ButtonEntity CareliSg593061393Maf05aStartCookA21 => new(_haContext, "button.careli_sg_593061393_maf05a_start_cook_a_2_1");
    ///<summary>Ceiling Fan Restart</summary>
    public ButtonEntity CeilingFanRestart => new(_haContext, "button.ceiling_fan_restart");
    ///<summary>Controller RGB DF1C0D Restart</summary>
    public ButtonEntity ControllerRgbDf1c0dRestart => new(_haContext, "button.controller_rgb_df1c0d_restart");
    ///<summary>Controller RGB DF1C0D Unpair remotes</summary>
    public ButtonEntity ControllerRgbDf1c0dUnpairRemotes => new(_haContext, "button.controller_rgb_df1c0d_unpair_remotes");
    ///<summary>DANIEL-PC_hass-agent DANIEL-PC_Big_Picture_Mode</summary>
    public ButtonEntity DanielPcHassAgentDanielPcBigPictureMode => new(_haContext, "button.daniel_pc_hass_agent_daniel_pc_big_picture_mode");
    ///<summary>DANIEL-PC_hass-agent DANIEL-PC_Display_Monitor</summary>
    public ButtonEntity DanielPcHassAgentDanielPcDisplayMonitor => new(_haContext, "button.daniel_pc_hass_agent_daniel_pc_display_monitor");
    ///<summary>DANIEL-PC_hass-agent DANIEL-PC_Display_TV</summary>
    public ButtonEntity DanielPcHassAgentDanielPcDisplayTv => new(_haContext, "button.daniel_pc_hass_agent_daniel_pc_display_tv");
    ///<summary>DANIEL-PC_hass-agent DANIEL-PC_hass-agent_kill_edge</summary>
    public ButtonEntity DanielPcHassAgentDanielPcHassAgentKillEdge => new(_haContext, "button.daniel_pc_hass_agent_daniel_pc_hass_agent_kill_edge");
    ///<summary>Daniel PC Update Sensors</summary>
    public ButtonEntity DanielPcHassAgentDanielPcHassAgentPublishallsensors => new(_haContext, "button.daniel_pc_hass_agent_daniel_pc_hass_agent_publishallsensors");
    ///<summary>DANIEL-PC Power</summary>
    public ButtonEntity DanielPcPower => new(_haContext, "button.daniel_pc_power");
    ///<summary>DANIEL-PC Restart</summary>
    public ButtonEntity DanielPcRestart => new(_haContext, "button.daniel_pc_restart");
    ///<summary>Desk Motion Sensor factory reset</summary>
    public ButtonEntity DeskMotionSensorFactoryReset => new(_haContext, "button.desk_motion_sensor_factory_reset");
    ///<summary>Desk Motion Sensor Manual Clear</summary>
    public ButtonEntity DeskMotionSensorManualClear => new(_haContext, "button.desk_motion_sensor_manual_clear");
    ///<summary>Desk Motion Sensor query params</summary>
    public ButtonEntity DeskMotionSensorQueryParams => new(_haContext, "button.desk_motion_sensor_query_params");
    ///<summary>Desk Motion Sensor restart</summary>
    public ButtonEntity DeskMotionSensorRestart => new(_haContext, "button.desk_motion_sensor_restart");
    ///<summary>Desk Motion Sensor Restart ESP32</summary>
    public ButtonEntity DeskMotionSensorRestartEsp32 => new(_haContext, "button.desk_motion_sensor_restart_esp32");
    ///<summary>Front Door Wake</summary>
    public ButtonEntity FrontDoorWake => new(_haContext, "button.front_door_wake");
    ///<summary>Google Assistant Synchronize devices</summary>
    public ButtonEntity GoogleAssistantSynchronizeDevices => new(_haContext, "button.google_assistant_synchronize_devices");
    ///<summary>Govee to MQTT Purge Caches</summary>
    public ButtonEntity GoveeToMqttPurgeCaches => new(_haContext, "button.govee_to_mqtt_purge_caches");
    ///<summary>Home Assistant Reload</summary>
    public ButtonEntity HomeassistantReload => new(_haContext, "button.homeassistant_reload");
    ///<summary>Home Assistant Restart</summary>
    public ButtonEntity HomeassistantRestart => new(_haContext, "button.homeassistant_restart");
    ///<summary>Repairs Ignore all</summary>
    public ButtonEntity IgnoreAllIssues => new(_haContext, "button.ignore_all_issues");
    ///<summary>Induction</summary>
    public ButtonEntity InductionCookerPower => new(_haContext, "button.induction_cooker_power");
    ///<summary>Kitchen Motion Sensor factory reset</summary>
    public ButtonEntity KitchenMotionSensorFactoryReset => new(_haContext, "button.kitchen_motion_sensor_factory_reset");
    ///<summary>Kitchen Motion Sensor Manual Clear</summary>
    public ButtonEntity KitchenMotionSensorManualClear => new(_haContext, "button.kitchen_motion_sensor_manual_clear");
    ///<summary>Kitchen Motion Sensor query params</summary>
    public ButtonEntity KitchenMotionSensorQueryParams => new(_haContext, "button.kitchen_motion_sensor_query_params");
    ///<summary>Kitchen Motion Sensor restart</summary>
    public ButtonEntity KitchenMotionSensorRestart => new(_haContext, "button.kitchen_motion_sensor_restart");
    ///<summary>Kitchen Motion Sensor Restart ESP32</summary>
    public ButtonEntity KitchenMotionSensorRestartEsp32 => new(_haContext, "button.kitchen_motion_sensor_restart_esp32");
    ///<summary>Launch Mi Remote</summary>
    public ButtonEntity LaunchMiRemote => new(_haContext, "button.launch_mi_remote");
    ///<summary>LG webOS TV FE94 Identify</summary>
    public ButtonEntity LgWebosTvFe94Identify => new(_haContext, "button.lg_webos_tv_fe94_identify");
    ///<summary>Manual Tracker Button Athena</summary>
    public ButtonEntity ManualTrackerButtonAthena => new(_haContext, "button.manual_tracker_button_athena");
    ///<summary>Manual Tracker Button Daniel</summary>
    public ButtonEntity ManualTrackerButtonDaniel => new(_haContext, "button.manual_tracker_button_daniel");
    ///<summary>Lock Toggle</summary>
    public ButtonEntity NoderedE44494a60e30483b => new(_haContext, "button.nodered_e44494a60e30483b");
    ///<summary>Pantry Motion Sensor factory reset</summary>
    public ButtonEntity PantryMotionSensorFactoryReset => new(_haContext, "button.pantry_motion_sensor_factory_reset");
    ///<summary>Pantry Motion Sensor Manual Clear</summary>
    public ButtonEntity PantryMotionSensorManualClear => new(_haContext, "button.pantry_motion_sensor_manual_clear");
    ///<summary>Pantry Motion Sensor query params</summary>
    public ButtonEntity PantryMotionSensorQueryParams => new(_haContext, "button.pantry_motion_sensor_query_params");
    ///<summary>Pantry Motion Sensor restart</summary>
    public ButtonEntity PantryMotionSensorRestart => new(_haContext, "button.pantry_motion_sensor_restart");
    ///<summary>Pantry Motion Sensor Restart ESP32</summary>
    public ButtonEntity PantryMotionSensorRestartEsp32 => new(_haContext, "button.pantry_motion_sensor_restart_esp32");
    ///<summary>Restart Fast Timer Notification</summary>
    public ButtonEntity RestartFastTimerNotification => new(_haContext, "button.restart_fast_timer_notification");
    ///<summary>RGB Light Strip Restart</summary>
    public ButtonEntity RgbLightStripRestart => new(_haContext, "button.rgb_light_strip_restart");
    ///<summary>Sala Motion Sensor factory reset</summary>
    public ButtonEntity SalaMotionSensorFactoryReset => new(_haContext, "button.sala_motion_sensor_factory_reset");
    ///<summary>Sala Motion Sensor Manual Clear</summary>
    public ButtonEntity SalaMotionSensorManualClear => new(_haContext, "button.sala_motion_sensor_manual_clear");
    ///<summary>Sala Motion Sensor query params</summary>
    public ButtonEntity SalaMotionSensorQueryParams => new(_haContext, "button.sala_motion_sensor_query_params");
    ///<summary>Sala Motion Sensor restart</summary>
    public ButtonEntity SalaMotionSensorRestart => new(_haContext, "button.sala_motion_sensor_restart");
    ///<summary>Sala Motion Sensor Restart ESP32</summary>
    public ButtonEntity SalaMotionSensorRestartEsp32 => new(_haContext, "button.sala_motion_sensor_restart_esp32");
    ///<summary>ThinkpadT14 lock</summary>
    public ButtonEntity Thinkpadt14Lock => new(_haContext, "button.thinkpadt14_lock");
    ///<summary>ThinkpadT14 monitorsleep</summary>
    public ButtonEntity Thinkpadt14Monitorsleep => new(_haContext, "button.thinkpadt14_monitorsleep");
    ///<summary>ThinkpadT14 monitorwake</summary>
    public ButtonEntity Thinkpadt14Monitorwake => new(_haContext, "button.thinkpadt14_monitorwake");
    ///<summary>ThinkpadT14 sleep</summary>
    public ButtonEntity Thinkpadt14Sleep => new(_haContext, "button.thinkpadt14_sleep");
    public ButtonEntity Thinkpadt14WakeOnLan => new(_haContext, "button.thinkpadt14_wake_on_lan");
    public ButtonEntity Thinkpadt14WakeOnWlan => new(_haContext, "button.thinkpadt14_wake_on_wlan");
    ///<summary>TV Backlight 3 Lite Request Platform API State</summary>
    public ButtonEntity TvBacklight3LiteRequestPlatformApiState => new(_haContext, "button.tv_backlight_3_lite_request_platform_api_state");
    ///<summary>Repairs Unignore all</summary>
    public ButtonEntity UnignoreAllIssues => new(_haContext, "button.unignore_all_issues");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Filter Reset Filter Life</summary>
    public ButtonEntity XiaomiSg753990712Cpa4ResetFilterLifeA41 => new(_haContext, "button.xiaomi_sg_753990712_cpa4_reset_filter_life_a_4_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Air Purifier Toggle</summary>
    public ButtonEntity XiaomiSg753990712Cpa4ToggleA21 => new(_haContext, "button.xiaomi_sg_753990712_cpa4_toggle_a_2_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service toggle-mode</summary>
    public ButtonEntity XiaomiSg753990712Cpa4ToggleModeA91 => new(_haContext, "button.xiaomi_sg_753990712_cpa4_toggle_mode_a_9_1");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all climate entities currently registered (at runtime) in Home Assistant as ClimateEntity</summary>
    public IEnumerable<ClimateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("climate.")).Select(e => new ClimateEntity(e));
    ///<summary>AC</summary>
    public ClimateEntity Ac => new(_haContext, "climate.ac");
}

public partial class ConversationEntities
{
    private readonly IHaContext _haContext;
    public ConversationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all conversation entities currently registered (at runtime) in Home Assistant as ConversationEntity</summary>
    public IEnumerable<ConversationEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("conversation.")).Select(e => new ConversationEntity(e));
    ///<summary>Google Generative AI</summary>
    public ConversationEntity GoogleGenerativeAi => new(_haContext, "conversation.google_generative_ai");
    ///<summary>Home Assistant</summary>
    public ConversationEntity HomeAssistant => new(_haContext, "conversation.home_assistant");
}

public partial class CounterEntities
{
    private readonly IHaContext _haContext;
    public CounterEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all counter entities currently registered (at runtime) in Home Assistant as CounterEntity</summary>
    public IEnumerable<CounterEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("counter.")).Select(e => new CounterEntity(e));
    ///<summary>People</summary>
    public CounterEntity People => new(_haContext, "counter.people");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all device_tracker entities currently registered (at runtime) in Home Assistant as DeviceTrackerEntity</summary>
    public IEnumerable<DeviceTrackerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("device_tracker.")).Select(e => new DeviceTrackerEntity(e));
    ///<summary>21051182C</summary>
    public DeviceTrackerEntity _21051182c => new(_haContext, "device_tracker.21051182c");
    ///<summary>8.8.8.8</summary>
    public DeviceTrackerEntity _8888 => new(_haContext, "device_tracker.8_8_8_8");
    ///<summary>887216f5-c9c0-4901-bf59-51c6e940bf11_100_40004</summary>
    public DeviceTrackerEntity _887216f5C9c04901Bf5951c6e940bf1110040004 => new(_haContext, "device_tracker.887216f5_c9c0_4901_bf59_51c6e940bf11_100_40004");
    ///<summary>athena_bezos</summary>
    public DeviceTrackerEntity AthenaBezos => new(_haContext, "device_tracker.athena_bezos");
    ///<summary>Baseus Tag Bermuda Tracker</summary>
    public DeviceTrackerEntity BaseusTagBermudaTracker => new(_haContext, "device_tracker.baseus_tag_bermuda_tracker");
    ///<summary>daniel_rodriguez</summary>
    public DeviceTrackerEntity DanielRodriguez => new(_haContext, "device_tracker.daniel_rodriguez");
    ///<summary>iPad</summary>
    public DeviceTrackerEntity Ipad => new(_haContext, "device_tracker.ipad");
    ///<summary>Aenics</summary>
    public DeviceTrackerEntity Iphone => new(_haContext, "device_tracker.iphone");
    ///<summary>bermuda_8c_ce_fd_a9_79_a6 Bermuda Tracker</summary>
    public DeviceTrackerEntity MiWatchLite79a6BermudaTracker => new(_haContext, "device_tracker.mi_watch_lite_79a6_bermuda_tracker");
    ///<summary>My iPhone</summary>
    public DeviceTrackerEntity MyIphone => new(_haContext, "device_tracker.my_iphone");
    ///<summary>Poco F4 GT BLE Bermuda Tracker</summary>
    public DeviceTrackerEntity PocoF4GtBleBermudaTracker => new(_haContext, "device_tracker.poco_f4_gt_ble_bermuda_tracker");
    ///<summary>POCO F4 GT</summary>
    public DeviceTrackerEntity PocoF4GtMobile => new(_haContext, "device_tracker.poco_f4_gt_mobile");
    ///<summary>Redmi Watch 5 Bermuda Tracker</summary>
    public DeviceTrackerEntity RedmiWatch5Active7e31BermudaTracker => new(_haContext, "device_tracker.redmi_watch_5_active_7e31_bermuda_tracker");
    ///<summary>Smart TV Pro</summary>
    public DeviceTrackerEntity SmartTvPro => new(_haContext, "device_tracker.smart_tv_pro");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all event entities currently registered (at runtime) in Home Assistant as EventEntity</summary>
    public IEnumerable<EventEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("event.")).Select(e => new EventEntity(e));
    ///<summary>Backup Automatic backup</summary>
    public EventEntity BackupAutomaticBackup => new(_haContext, "event.backup_automatic_backup");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Completed</summary>
    public EventEntity CareliSg593061393Maf05aCookingFinishedE21 => new(_haContext, "event.careli_sg_593061393_maf05a_cooking_finished_e_2_1");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Program Is Starting</summary>
    public EventEntity CareliSg593061393Maf05aCookingStartE31 => new(_haContext, "event.careli_sg_593061393_maf05a_cooking_start_e_3_1");
    ///<summary>Repairs</summary>
    public EventEntity Repair => new(_haContext, "event.repair");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service childlock-trigger</summary>
    public EventEntity XiaomiSg753990712Cpa4ChildlockTriggerE92 => new(_haContext, "event.xiaomi_sg_753990712_cpa4_childlock_trigger_e_9_2");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service fault-motor-stuck</summary>
    public EventEntity XiaomiSg753990712Cpa4FaultMotorStuckE91 => new(_haContext, "event.xiaomi_sg_753990712_cpa4_fault_motor_stuck_e_9_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service filter-exhausted</summary>
    public EventEntity XiaomiSg753990712Cpa4FilterExhaustedE93 => new(_haContext, "event.xiaomi_sg_753990712_cpa4_filter_exhausted_e_9_3");
}

public partial class FanEntities
{
    private readonly IHaContext _haContext;
    public FanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all fan entities currently registered (at runtime) in Home Assistant as FanEntity</summary>
    public IEnumerable<FanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("fan.")).Select(e => new FanEntity(e));
    ///<summary>Bedroom Stand Fan</summary>
    public FanEntity BedroomStandFan => new(_haContext, "fan.bedroom_stand_fan");
    ///<summary>Sala Stand Fan</summary>
    public FanEntity SalaStandFan => new(_haContext, "fan.sala_stand_fan");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact Air Purifier Fan Switch</summary>
    public FanEntity XiaomiSmartAirPurifier4CompactAirPurifierFanSwitch => new(_haContext, "fan.xiaomi_smart_air_purifier_4_compact_air_purifier_fan_switch");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_boolean entities currently registered (at runtime) in Home Assistant as InputBooleanEntity</summary>
    public IEnumerable<InputBooleanEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_boolean.")).Select(e => new InputBooleanEntity(e));
    ///<summary>AC Light</summary>
    public InputBooleanEntity AcLight => new(_haContext, "input_boolean.ac_light");
    ///<summary>AC Power Saving Mode</summary>
    public InputBooleanEntity AcPowerSavingMode => new(_haContext, "input_boolean.ac_power_saving_mode");
    ///<summary>netdaemon_home_automation_apps_area_bathroom_bathroom_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsAreaBathroomBathroomApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_area_bathroom_bathroom_app");
    ///<summary>netdaemon_home_automation_apps_area_bedroom_bedroom_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsAreaBedroomBedroomApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_area_bedroom_bedroom_app");
    ///<summary>netdaemon_home_automation_apps_area_desk_desk_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsAreaDeskDeskApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_area_desk_desk_app");
    ///<summary>netdaemon_home_automation_apps_area_kitchen_kitchen_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsAreaKitchenKitchenApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_area_kitchen_kitchen_app");
    ///<summary>netdaemon_home_automation_apps_area_living_room_living_room_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsAreaLivingRoomLivingRoomApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_area_living_room_living_room_app");
    ///<summary>netdaemon_home_automation_apps_area_pantry_pantry_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsAreaPantryPantryApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_area_pantry_pantry_app");
    ///<summary>netdaemon_home_automation_apps_common_security_security_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsCommonSecuritySecurityApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_common_security_security_app");
    ///<summary>netdaemon_home_automation_apps_common_startup_app</summary>
    public InputBooleanEntity NetdaemonHomeAutomationAppsCommonStartupApp => new(_haContext, "input_boolean.netdaemon_home_automation_apps_common_startup_app");
    ///<summary>Project Nation Week</summary>
    public InputBooleanEntity ProjectNationWeek => new(_haContext, "input_boolean.project_nation_week");
    ///<summary>use_kitchen_lights</summary>
    public InputBooleanEntity UseKitchenLights => new(_haContext, "input_boolean.use_kitchen_lights");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_button entities currently registered (at runtime) in Home Assistant as InputButtonEntity</summary>
    public IEnumerable<InputButtonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_button.")).Select(e => new InputButtonEntity(e));
    ///<summary>Remote PC</summary>
    public InputButtonEntity RemotePc => new(_haContext, "input_button.remote_pc");
    ///<summary>Show PC</summary>
    public InputButtonEntity ShowPc => new(_haContext, "input_button.show_pc");
}

public partial class InputNumberEntities
{
    private readonly IHaContext _haContext;
    public InputNumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_number entities currently registered (at runtime) in Home Assistant as InputNumberEntity</summary>
    public IEnumerable<InputNumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_number.")).Select(e => new InputNumberEntity(e));
    ///<summary>Energy Offset</summary>
    public InputNumberEntity EnergyOffset => new(_haContext, "input_number.energy_offset");
    ///<summary>Last Month Reading</summary>
    public InputNumberEntity LastMonthReading => new(_haContext, "input_number.last_month_reading");
    ///<summary>LG TV Brightness</summary>
    public InputNumberEntity LgTvBrightness => new(_haContext, "input_number.lg_tv_brightness");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all input_text entities currently registered (at runtime) in Home Assistant as InputTextEntity</summary>
    public IEnumerable<InputTextEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("input_text.")).Select(e => new InputTextEntity(e));
    ///<summary>Last Triggered Motion Sensor </summary>
    public InputTextEntity LastTriggeredMotionSensor => new(_haContext, "input_text.last_triggered_motion_sensor");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all lock entities currently registered (at runtime) in Home Assistant as LockEntity</summary>
    public IEnumerable<LockEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("lock.")).Select(e => new LockEntity(e));
    ///<summary>Front Door</summary>
    public LockEntity FrontDoor => new(_haContext, "lock.front_door");
    ///<summary>Front Door</summary>
    public LockEntity FrontDoor1 => new(_haContext, "lock.front_door_1");
    ///<summary>Lock Wrapper</summary>
    public LockEntity LockWrapper => new(_haContext, "lock.lock_wrapper");
}

public partial class NotifyEntities
{
    private readonly IHaContext _haContext;
    public NotifyEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all notify entities currently registered (at runtime) in Home Assistant as NotifyEntity</summary>
    public IEnumerable<NotifyEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("notify.")).Select(e => new NotifyEntity(e));
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Start Custom Program</summary>
    public NotifyEntity CareliSg593061393Maf05aStartCookA31 => new(_haContext, "notify.careli_sg_593061393_maf05a_start_cook_a_3_1");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all number entities currently registered (at runtime) in Home Assistant as NumberEntity</summary>
    public IEnumerable<NumberEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("number.")).Select(e => new NumberEntity(e));
    ///<summary>Baseus Tag Calibration Ref Power at 1m. 0 for default.</summary>
    public NumberEntity BaseusTagCalibrationRefPowerAt1m0ForDefault => new(_haContext, "number.baseus_tag_calibration_ref_power_at_1m_0_for_default");
    ///<summary>Bathroom Lights Smooth off</summary>
    public NumberEntity BathroomLightsSmoothOff => new(_haContext, "number.bathroom_lights_smooth_off");
    ///<summary>Bathroom Lights Smooth on</summary>
    public NumberEntity BathroomLightsSmoothOn => new(_haContext, "number.bathroom_lights_smooth_on");
    ///<summary>Bathroom Motion Sensor g0 move threshold</summary>
    public NumberEntity BathroomMotionSensorG0MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g0_move_threshold");
    ///<summary>Bathroom Motion Sensor g0 still threshold</summary>
    public NumberEntity BathroomMotionSensorG0StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g0_still_threshold");
    ///<summary>Bathroom Motion Sensor g1 move threshold</summary>
    public NumberEntity BathroomMotionSensorG1MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g1_move_threshold");
    ///<summary>Bathroom Motion Sensor g1 still threshold</summary>
    public NumberEntity BathroomMotionSensorG1StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g1_still_threshold");
    ///<summary>Bathroom Motion Sensor g2 move threshold</summary>
    public NumberEntity BathroomMotionSensorG2MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g2_move_threshold");
    ///<summary>Bathroom Motion Sensor g2 still threshold</summary>
    public NumberEntity BathroomMotionSensorG2StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g2_still_threshold");
    ///<summary>Bathroom Motion Sensor g3 move threshold</summary>
    public NumberEntity BathroomMotionSensorG3MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g3_move_threshold");
    ///<summary>Bathroom Motion Sensor g3 still threshold</summary>
    public NumberEntity BathroomMotionSensorG3StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g3_still_threshold");
    ///<summary>Bathroom Motion Sensor g4 move threshold</summary>
    public NumberEntity BathroomMotionSensorG4MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g4_move_threshold");
    ///<summary>Bathroom Motion Sensor g4 still threshold</summary>
    public NumberEntity BathroomMotionSensorG4StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g4_still_threshold");
    ///<summary>Bathroom Motion Sensor g5 move threshold</summary>
    public NumberEntity BathroomMotionSensorG5MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g5_move_threshold");
    ///<summary>Bathroom Motion Sensor g5 still threshold</summary>
    public NumberEntity BathroomMotionSensorG5StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g5_still_threshold");
    ///<summary>Bathroom Motion Sensor g6 move threshold</summary>
    public NumberEntity BathroomMotionSensorG6MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g6_move_threshold");
    ///<summary>Bathroom Motion Sensor g6 still threshold</summary>
    public NumberEntity BathroomMotionSensorG6StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g6_still_threshold");
    ///<summary>Bathroom Motion Sensor g7 move threshold</summary>
    public NumberEntity BathroomMotionSensorG7MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g7_move_threshold");
    ///<summary>Bathroom Motion Sensor g7 still threshold</summary>
    public NumberEntity BathroomMotionSensorG7StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g7_still_threshold");
    ///<summary>Bathroom Motion Sensor g8 move threshold</summary>
    public NumberEntity BathroomMotionSensorG8MoveThreshold => new(_haContext, "number.bathroom_motion_sensor_g8_move_threshold");
    ///<summary>Bathroom Motion Sensor g8 still threshold</summary>
    public NumberEntity BathroomMotionSensorG8StillThreshold => new(_haContext, "number.bathroom_motion_sensor_g8_still_threshold");
    ///<summary>Bathroom Motion Sensor light threshold</summary>
    public NumberEntity BathroomMotionSensorLightThreshold => new(_haContext, "number.bathroom_motion_sensor_light_threshold");
    ///<summary>Bathroom Motion Sensor max move distance gate</summary>
    public NumberEntity BathroomMotionSensorMaxMoveDistanceGate => new(_haContext, "number.bathroom_motion_sensor_max_move_distance_gate");
    ///<summary>Bathroom Motion Sensor max still distance gate</summary>
    public NumberEntity BathroomMotionSensorMaxStillDistanceGate => new(_haContext, "number.bathroom_motion_sensor_max_still_distance_gate");
    ///<summary>Bathroom Motion Sensor Still Target Delay</summary>
    public NumberEntity BathroomMotionSensorStillTargetDelay => new(_haContext, "number.bathroom_motion_sensor_still_target_delay");
    ///<summary>Bathroom Motion Sensor timeout</summary>
    public NumberEntity BathroomMotionSensorTimeout => new(_haContext, "number.bathroom_motion_sensor_timeout");
    ///<summary>Bed Lights  Smooth off</summary>
    public NumberEntity BedLightsSmoothOff => new(_haContext, "number.bed_lights_smooth_off");
    ///<summary>Bed Lights  Smooth on</summary>
    public NumberEntity BedLightsSmoothOn => new(_haContext, "number.bed_lights_smooth_on");
    ///<summary>Bedroom Motion Sensor Absorption</summary>
    public NumberEntity BedroomMotionSensorAbsorption => new(_haContext, "number.bedroom_motion_sensor_absorption");
    ///<summary>Bedroom Motion Sensor g0 move threshold</summary>
    public NumberEntity BedroomMotionSensorG0MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g0_move_threshold");
    ///<summary>Bedroom Motion Sensor g0 still threshold</summary>
    public NumberEntity BedroomMotionSensorG0StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g0_still_threshold");
    ///<summary>Bedroom Motion Sensor g1 move threshold</summary>
    public NumberEntity BedroomMotionSensorG1MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g1_move_threshold");
    ///<summary>Bedroom Motion Sensor g1 still threshold</summary>
    public NumberEntity BedroomMotionSensorG1StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g1_still_threshold");
    ///<summary>Bedroom Motion Sensor g2 move threshold</summary>
    public NumberEntity BedroomMotionSensorG2MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g2_move_threshold");
    ///<summary>Bedroom Motion Sensor g2 still threshold</summary>
    public NumberEntity BedroomMotionSensorG2StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g2_still_threshold");
    ///<summary>Bedroom Motion Sensor g3 move threshold</summary>
    public NumberEntity BedroomMotionSensorG3MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g3_move_threshold");
    ///<summary>Bedroom Motion Sensor g3 still threshold</summary>
    public NumberEntity BedroomMotionSensorG3StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g3_still_threshold");
    ///<summary>Bedroom Motion Sensor g4 move threshold</summary>
    public NumberEntity BedroomMotionSensorG4MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g4_move_threshold");
    ///<summary>Bedroom Motion Sensor g4 still threshold</summary>
    public NumberEntity BedroomMotionSensorG4StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g4_still_threshold");
    ///<summary>Bedroom Motion Sensor g5 move threshold</summary>
    public NumberEntity BedroomMotionSensorG5MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g5_move_threshold");
    ///<summary>Bedroom Motion Sensor g5 still threshold</summary>
    public NumberEntity BedroomMotionSensorG5StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g5_still_threshold");
    ///<summary>Bedroom Motion Sensor g6 move threshold</summary>
    public NumberEntity BedroomMotionSensorG6MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g6_move_threshold");
    ///<summary>Bedroom Motion Sensor g6 still threshold</summary>
    public NumberEntity BedroomMotionSensorG6StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g6_still_threshold");
    ///<summary>Bedroom Motion Sensor g7 move threshold</summary>
    public NumberEntity BedroomMotionSensorG7MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g7_move_threshold");
    ///<summary>Bedroom Motion Sensor g7 still threshold</summary>
    public NumberEntity BedroomMotionSensorG7StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g7_still_threshold");
    ///<summary>Bedroom Motion Sensor g8 move threshold</summary>
    public NumberEntity BedroomMotionSensorG8MoveThreshold => new(_haContext, "number.bedroom_motion_sensor_g8_move_threshold");
    ///<summary>Bedroom Motion Sensor g8 still threshold</summary>
    public NumberEntity BedroomMotionSensorG8StillThreshold => new(_haContext, "number.bedroom_motion_sensor_g8_still_threshold");
    ///<summary>Bedroom Motion Sensor light threshold</summary>
    public NumberEntity BedroomMotionSensorLightThreshold => new(_haContext, "number.bedroom_motion_sensor_light_threshold");
    ///<summary>Bedroom Motion Sensor Max Distance</summary>
    public NumberEntity BedroomMotionSensorMaxDistance => new(_haContext, "number.bedroom_motion_sensor_max_distance");
    ///<summary>Bedroom Motion Sensor max move distance gate</summary>
    public NumberEntity BedroomMotionSensorMaxMoveDistanceGate => new(_haContext, "number.bedroom_motion_sensor_max_move_distance_gate");
    ///<summary>Bedroom Motion Sensor max still distance gate</summary>
    public NumberEntity BedroomMotionSensorMaxStillDistanceGate => new(_haContext, "number.bedroom_motion_sensor_max_still_distance_gate");
    ///<summary>Bedroom Motion Sensor Still Target Delay</summary>
    public NumberEntity BedroomMotionSensorStillTargetDelay => new(_haContext, "number.bedroom_motion_sensor_still_target_delay");
    ///<summary>Bedroom Motion Sensor timeout</summary>
    public NumberEntity BedroomMotionSensorTimeout => new(_haContext, "number.bedroom_motion_sensor_timeout");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Scheduled Time</summary>
    public NumberEntity CareliSg593061393Maf05aAppointTimeP35 => new(_haContext, "number.careli_sg_593061393_maf05a_appoint_time_p_3_5");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Operating Temperature</summary>
    public NumberEntity CareliSg593061393Maf05aTargetTemperatureP24 => new(_haContext, "number.careli_sg_593061393_maf05a_target_temperature_p_2_4");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Operating Time</summary>
    public NumberEntity CareliSg593061393Maf05aTargetTimeP23 => new(_haContext, "number.careli_sg_593061393_maf05a_target_time_p_2_3");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Operating Temperature</summary>
    public NumberEntity CareliSg593061393Maf05aWorkTempP34 => new(_haContext, "number.careli_sg_593061393_maf05a_work_temp_p_3_4");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Operating Time</summary>
    public NumberEntity CareliSg593061393Maf05aWorkTimeP33 => new(_haContext, "number.careli_sg_593061393_maf05a_work_time_p_3_3");
    ///<summary>Ceiling Fan Turn off in</summary>
    public NumberEntity CeilingFanTurnOffIn => new(_haContext, "number.ceiling_fan_turn_off_in");
    ///<summary>Controller RGB DF1C0D Effect speed</summary>
    public NumberEntity ControllerRgbDf1c0dEffectSpeed => new(_haContext, "number.controller_rgb_df1c0d_effect_speed");
    ///<summary>Desk Motion Sensor g0 move threshold</summary>
    public NumberEntity DeskMotionSensorG0MoveThreshold => new(_haContext, "number.desk_motion_sensor_g0_move_threshold");
    ///<summary>Desk Motion Sensor g0 still threshold</summary>
    public NumberEntity DeskMotionSensorG0StillThreshold => new(_haContext, "number.desk_motion_sensor_g0_still_threshold");
    ///<summary>Desk Motion Sensor g1 move threshold</summary>
    public NumberEntity DeskMotionSensorG1MoveThreshold => new(_haContext, "number.desk_motion_sensor_g1_move_threshold");
    ///<summary>Desk Motion Sensor g1 still threshold</summary>
    public NumberEntity DeskMotionSensorG1StillThreshold => new(_haContext, "number.desk_motion_sensor_g1_still_threshold");
    ///<summary>Desk Motion Sensor g2 move threshold</summary>
    public NumberEntity DeskMotionSensorG2MoveThreshold => new(_haContext, "number.desk_motion_sensor_g2_move_threshold");
    ///<summary>Desk Motion Sensor g2 still threshold</summary>
    public NumberEntity DeskMotionSensorG2StillThreshold => new(_haContext, "number.desk_motion_sensor_g2_still_threshold");
    ///<summary>Desk Motion Sensor g3 move threshold</summary>
    public NumberEntity DeskMotionSensorG3MoveThreshold => new(_haContext, "number.desk_motion_sensor_g3_move_threshold");
    ///<summary>Desk Motion Sensor g3 still threshold</summary>
    public NumberEntity DeskMotionSensorG3StillThreshold => new(_haContext, "number.desk_motion_sensor_g3_still_threshold");
    ///<summary>Desk Motion Sensor g4 move threshold</summary>
    public NumberEntity DeskMotionSensorG4MoveThreshold => new(_haContext, "number.desk_motion_sensor_g4_move_threshold");
    ///<summary>Desk Motion Sensor g4 still threshold</summary>
    public NumberEntity DeskMotionSensorG4StillThreshold => new(_haContext, "number.desk_motion_sensor_g4_still_threshold");
    ///<summary>Desk Motion Sensor g5 move threshold</summary>
    public NumberEntity DeskMotionSensorG5MoveThreshold => new(_haContext, "number.desk_motion_sensor_g5_move_threshold");
    ///<summary>Desk Motion Sensor g5 still threshold</summary>
    public NumberEntity DeskMotionSensorG5StillThreshold => new(_haContext, "number.desk_motion_sensor_g5_still_threshold");
    ///<summary>Desk Motion Sensor g6 move threshold</summary>
    public NumberEntity DeskMotionSensorG6MoveThreshold => new(_haContext, "number.desk_motion_sensor_g6_move_threshold");
    ///<summary>Desk Motion Sensor g6 still threshold</summary>
    public NumberEntity DeskMotionSensorG6StillThreshold => new(_haContext, "number.desk_motion_sensor_g6_still_threshold");
    ///<summary>Desk Motion Sensor g7 move threshold</summary>
    public NumberEntity DeskMotionSensorG7MoveThreshold => new(_haContext, "number.desk_motion_sensor_g7_move_threshold");
    ///<summary>Desk Motion Sensor g7 still threshold</summary>
    public NumberEntity DeskMotionSensorG7StillThreshold => new(_haContext, "number.desk_motion_sensor_g7_still_threshold");
    ///<summary>Desk Motion Sensor g8 move threshold</summary>
    public NumberEntity DeskMotionSensorG8MoveThreshold => new(_haContext, "number.desk_motion_sensor_g8_move_threshold");
    ///<summary>Desk Motion Sensor g8 still threshold</summary>
    public NumberEntity DeskMotionSensorG8StillThreshold => new(_haContext, "number.desk_motion_sensor_g8_still_threshold");
    ///<summary>Desk Motion Sensor light threshold</summary>
    public NumberEntity DeskMotionSensorLightThreshold => new(_haContext, "number.desk_motion_sensor_light_threshold");
    ///<summary>Desk Motion Sensor max move distance gate</summary>
    public NumberEntity DeskMotionSensorMaxMoveDistanceGate => new(_haContext, "number.desk_motion_sensor_max_move_distance_gate");
    ///<summary>Desk Motion Sensor max still distance gate</summary>
    public NumberEntity DeskMotionSensorMaxStillDistanceGate => new(_haContext, "number.desk_motion_sensor_max_still_distance_gate");
    ///<summary>Desk Motion Sensor Still Target Delay</summary>
    public NumberEntity DeskMotionSensorStillTargetDelay => new(_haContext, "number.desk_motion_sensor_still_target_delay");
    ///<summary>Desk Motion Sensor timeout</summary>
    public NumberEntity DeskMotionSensorTimeout => new(_haContext, "number.desk_motion_sensor_timeout");
    ///<summary>Flytrap Turn off in</summary>
    public NumberEntity FlytrapTurnOffIn => new(_haContext, "number.flytrap_turn_off_in");
    ///<summary>Kitchen Motion Sensor g0 move threshold</summary>
    public NumberEntity KitchenMotionSensorG0MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g0_move_threshold");
    ///<summary>Kitchen Motion Sensor g0 still threshold</summary>
    public NumberEntity KitchenMotionSensorG0StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g0_still_threshold");
    ///<summary>Kitchen Motion Sensor g1 move threshold</summary>
    public NumberEntity KitchenMotionSensorG1MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g1_move_threshold");
    ///<summary>Kitchen Motion Sensor g1 still threshold</summary>
    public NumberEntity KitchenMotionSensorG1StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g1_still_threshold");
    ///<summary>Kitchen Motion Sensor g2 move threshold</summary>
    public NumberEntity KitchenMotionSensorG2MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g2_move_threshold");
    ///<summary>Kitchen Motion Sensor g2 still threshold</summary>
    public NumberEntity KitchenMotionSensorG2StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g2_still_threshold");
    ///<summary>Kitchen Motion Sensor g3 move threshold</summary>
    public NumberEntity KitchenMotionSensorG3MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g3_move_threshold");
    ///<summary>Kitchen Motion Sensor g3 still threshold</summary>
    public NumberEntity KitchenMotionSensorG3StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g3_still_threshold");
    ///<summary>Kitchen Motion Sensor g4 move threshold</summary>
    public NumberEntity KitchenMotionSensorG4MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g4_move_threshold");
    ///<summary>Kitchen Motion Sensor g4 still threshold</summary>
    public NumberEntity KitchenMotionSensorG4StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g4_still_threshold");
    ///<summary>Kitchen Motion Sensor g5 move threshold</summary>
    public NumberEntity KitchenMotionSensorG5MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g5_move_threshold");
    ///<summary>Kitchen Motion Sensor g5 still threshold</summary>
    public NumberEntity KitchenMotionSensorG5StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g5_still_threshold");
    ///<summary>Kitchen Motion Sensor g6 move threshold</summary>
    public NumberEntity KitchenMotionSensorG6MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g6_move_threshold");
    ///<summary>Kitchen Motion Sensor g6 still threshold</summary>
    public NumberEntity KitchenMotionSensorG6StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g6_still_threshold");
    ///<summary>Kitchen Motion Sensor g7 move threshold</summary>
    public NumberEntity KitchenMotionSensorG7MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g7_move_threshold");
    ///<summary>Kitchen Motion Sensor g7 still threshold</summary>
    public NumberEntity KitchenMotionSensorG7StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g7_still_threshold");
    ///<summary>Kitchen Motion Sensor g8 move threshold</summary>
    public NumberEntity KitchenMotionSensorG8MoveThreshold => new(_haContext, "number.kitchen_motion_sensor_g8_move_threshold");
    ///<summary>Kitchen Motion Sensor g8 still threshold</summary>
    public NumberEntity KitchenMotionSensorG8StillThreshold => new(_haContext, "number.kitchen_motion_sensor_g8_still_threshold");
    ///<summary>Kitchen Motion Sensor light threshold</summary>
    public NumberEntity KitchenMotionSensorLightThreshold => new(_haContext, "number.kitchen_motion_sensor_light_threshold");
    ///<summary>Kitchen Motion Sensor max move distance gate</summary>
    public NumberEntity KitchenMotionSensorMaxMoveDistanceGate => new(_haContext, "number.kitchen_motion_sensor_max_move_distance_gate");
    ///<summary>Kitchen Motion Sensor max still distance gate</summary>
    public NumberEntity KitchenMotionSensorMaxStillDistanceGate => new(_haContext, "number.kitchen_motion_sensor_max_still_distance_gate");
    ///<summary>Kitchen Motion Sensor Still Target Delay</summary>
    public NumberEntity KitchenMotionSensorStillTargetDelay => new(_haContext, "number.kitchen_motion_sensor_still_target_delay");
    ///<summary>Kitchen Motion Sensor timeout</summary>
    public NumberEntity KitchenMotionSensorTimeout => new(_haContext, "number.kitchen_motion_sensor_timeout");
    ///<summary>bermuda_8c_ce_fd_a9_79_a6 Calibration Ref Power at 1m. 0 for default.</summary>
    public NumberEntity MiWatchLite79a6CalibrationRefPowerAt1m0ForDefault => new(_haContext, "number.mi_watch_lite_79a6_calibration_ref_power_at_1m_0_for_default");
    ///<summary>Pantry Lights Smooth off</summary>
    public NumberEntity PantryLightsSmoothOff => new(_haContext, "number.pantry_lights_smooth_off");
    ///<summary>Pantry Lights Smooth on</summary>
    public NumberEntity PantryLightsSmoothOn => new(_haContext, "number.pantry_lights_smooth_on");
    ///<summary>Pantry Motion Sensor g0 move threshold</summary>
    public NumberEntity PantryMotionSensorG0MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g0_move_threshold");
    ///<summary>Pantry Motion Sensor g0 still threshold</summary>
    public NumberEntity PantryMotionSensorG0StillThreshold => new(_haContext, "number.pantry_motion_sensor_g0_still_threshold");
    ///<summary>Pantry Motion Sensor g1 move threshold</summary>
    public NumberEntity PantryMotionSensorG1MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g1_move_threshold");
    ///<summary>Pantry Motion Sensor g1 still threshold</summary>
    public NumberEntity PantryMotionSensorG1StillThreshold => new(_haContext, "number.pantry_motion_sensor_g1_still_threshold");
    ///<summary>Pantry Motion Sensor g2 move threshold</summary>
    public NumberEntity PantryMotionSensorG2MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g2_move_threshold");
    ///<summary>Pantry Motion Sensor g2 still threshold</summary>
    public NumberEntity PantryMotionSensorG2StillThreshold => new(_haContext, "number.pantry_motion_sensor_g2_still_threshold");
    ///<summary>Pantry Motion Sensor g3 move threshold</summary>
    public NumberEntity PantryMotionSensorG3MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g3_move_threshold");
    ///<summary>Pantry Motion Sensor g3 still threshold</summary>
    public NumberEntity PantryMotionSensorG3StillThreshold => new(_haContext, "number.pantry_motion_sensor_g3_still_threshold");
    ///<summary>Pantry Motion Sensor g4 move threshold</summary>
    public NumberEntity PantryMotionSensorG4MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g4_move_threshold");
    ///<summary>Pantry Motion Sensor g4 still threshold</summary>
    public NumberEntity PantryMotionSensorG4StillThreshold => new(_haContext, "number.pantry_motion_sensor_g4_still_threshold");
    ///<summary>Pantry Motion Sensor g5 move threshold</summary>
    public NumberEntity PantryMotionSensorG5MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g5_move_threshold");
    ///<summary>Pantry Motion Sensor g5 still threshold</summary>
    public NumberEntity PantryMotionSensorG5StillThreshold => new(_haContext, "number.pantry_motion_sensor_g5_still_threshold");
    ///<summary>Pantry Motion Sensor g6 move threshold</summary>
    public NumberEntity PantryMotionSensorG6MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g6_move_threshold");
    ///<summary>Pantry Motion Sensor g6 still threshold</summary>
    public NumberEntity PantryMotionSensorG6StillThreshold => new(_haContext, "number.pantry_motion_sensor_g6_still_threshold");
    ///<summary>Pantry Motion Sensor g7 move threshold</summary>
    public NumberEntity PantryMotionSensorG7MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g7_move_threshold");
    ///<summary>Pantry Motion Sensor g7 still threshold</summary>
    public NumberEntity PantryMotionSensorG7StillThreshold => new(_haContext, "number.pantry_motion_sensor_g7_still_threshold");
    ///<summary>Pantry Motion Sensor g8 move threshold</summary>
    public NumberEntity PantryMotionSensorG8MoveThreshold => new(_haContext, "number.pantry_motion_sensor_g8_move_threshold");
    ///<summary>Pantry Motion Sensor g8 still threshold</summary>
    public NumberEntity PantryMotionSensorG8StillThreshold => new(_haContext, "number.pantry_motion_sensor_g8_still_threshold");
    ///<summary>Pantry Motion Sensor light threshold</summary>
    public NumberEntity PantryMotionSensorLightThreshold => new(_haContext, "number.pantry_motion_sensor_light_threshold");
    ///<summary>Pantry Motion Sensor max move distance gate</summary>
    public NumberEntity PantryMotionSensorMaxMoveDistanceGate => new(_haContext, "number.pantry_motion_sensor_max_move_distance_gate");
    ///<summary>Pantry Motion Sensor max still distance gate</summary>
    public NumberEntity PantryMotionSensorMaxStillDistanceGate => new(_haContext, "number.pantry_motion_sensor_max_still_distance_gate");
    ///<summary>Pantry Motion Sensor Still Target Delay</summary>
    public NumberEntity PantryMotionSensorStillTargetDelay => new(_haContext, "number.pantry_motion_sensor_still_target_delay");
    ///<summary>Pantry Motion Sensor timeout</summary>
    public NumberEntity PantryMotionSensorTimeout => new(_haContext, "number.pantry_motion_sensor_timeout");
    ///<summary>Poco F4 GT BLE Calibration Ref Power at 1m. 0 for default.</summary>
    public NumberEntity PocoF4GtBleCalibrationRefPowerAt1m0ForDefault => new(_haContext, "number.poco_f4_gt_ble_calibration_ref_power_at_1m_0_for_default");
    ///<summary>Redmi Watch 5 Calibration Ref Power at 1m. 0 for default.</summary>
    public NumberEntity RedmiWatch5Active7e31CalibrationRefPowerAt1m0ForDefault => new(_haContext, "number.redmi_watch_5_active_7e31_calibration_ref_power_at_1m_0_for_default");
    ///<summary>Sala Lights 2 Smooth off</summary>
    public NumberEntity SalaLights2SmoothOff => new(_haContext, "number.sala_lights_2_smooth_off");
    ///<summary>Sala Lights 2 Smooth on</summary>
    public NumberEntity SalaLights2SmoothOn => new(_haContext, "number.sala_lights_2_smooth_on");
    ///<summary>Sala Lights Smooth off</summary>
    public NumberEntity SalaLightsSmoothOff => new(_haContext, "number.sala_lights_smooth_off");
    ///<summary>Sala Lights Smooth on</summary>
    public NumberEntity SalaLightsSmoothOn => new(_haContext, "number.sala_lights_smooth_on");
    ///<summary>Sala Motion Sensor g0 move threshold</summary>
    public NumberEntity SalaMotionSensorG0MoveThreshold => new(_haContext, "number.sala_motion_sensor_g0_move_threshold");
    ///<summary>Sala Motion Sensor g0 still threshold</summary>
    public NumberEntity SalaMotionSensorG0StillThreshold => new(_haContext, "number.sala_motion_sensor_g0_still_threshold");
    ///<summary>Sala Motion Sensor g1 move threshold</summary>
    public NumberEntity SalaMotionSensorG1MoveThreshold => new(_haContext, "number.sala_motion_sensor_g1_move_threshold");
    ///<summary>Sala Motion Sensor g1 still threshold</summary>
    public NumberEntity SalaMotionSensorG1StillThreshold => new(_haContext, "number.sala_motion_sensor_g1_still_threshold");
    ///<summary>Sala Motion Sensor g2 move threshold</summary>
    public NumberEntity SalaMotionSensorG2MoveThreshold => new(_haContext, "number.sala_motion_sensor_g2_move_threshold");
    ///<summary>Sala Motion Sensor g2 still threshold</summary>
    public NumberEntity SalaMotionSensorG2StillThreshold => new(_haContext, "number.sala_motion_sensor_g2_still_threshold");
    ///<summary>Sala Motion Sensor g3 move threshold</summary>
    public NumberEntity SalaMotionSensorG3MoveThreshold => new(_haContext, "number.sala_motion_sensor_g3_move_threshold");
    ///<summary>Sala Motion Sensor g3 still threshold</summary>
    public NumberEntity SalaMotionSensorG3StillThreshold => new(_haContext, "number.sala_motion_sensor_g3_still_threshold");
    ///<summary>Sala Motion Sensor g4 move threshold</summary>
    public NumberEntity SalaMotionSensorG4MoveThreshold => new(_haContext, "number.sala_motion_sensor_g4_move_threshold");
    ///<summary>Sala Motion Sensor g4 still threshold</summary>
    public NumberEntity SalaMotionSensorG4StillThreshold => new(_haContext, "number.sala_motion_sensor_g4_still_threshold");
    ///<summary>Sala Motion Sensor g5 move threshold</summary>
    public NumberEntity SalaMotionSensorG5MoveThreshold => new(_haContext, "number.sala_motion_sensor_g5_move_threshold");
    ///<summary>Sala Motion Sensor g5 still threshold</summary>
    public NumberEntity SalaMotionSensorG5StillThreshold => new(_haContext, "number.sala_motion_sensor_g5_still_threshold");
    ///<summary>Sala Motion Sensor g6 move threshold</summary>
    public NumberEntity SalaMotionSensorG6MoveThreshold => new(_haContext, "number.sala_motion_sensor_g6_move_threshold");
    ///<summary>Sala Motion Sensor g6 still threshold</summary>
    public NumberEntity SalaMotionSensorG6StillThreshold => new(_haContext, "number.sala_motion_sensor_g6_still_threshold");
    ///<summary>Sala Motion Sensor g7 move threshold</summary>
    public NumberEntity SalaMotionSensorG7MoveThreshold => new(_haContext, "number.sala_motion_sensor_g7_move_threshold");
    ///<summary>Sala Motion Sensor g7 still threshold</summary>
    public NumberEntity SalaMotionSensorG7StillThreshold => new(_haContext, "number.sala_motion_sensor_g7_still_threshold");
    ///<summary>Sala Motion Sensor g8 move threshold</summary>
    public NumberEntity SalaMotionSensorG8MoveThreshold => new(_haContext, "number.sala_motion_sensor_g8_move_threshold");
    ///<summary>Sala Motion Sensor g8 still threshold</summary>
    public NumberEntity SalaMotionSensorG8StillThreshold => new(_haContext, "number.sala_motion_sensor_g8_still_threshold");
    ///<summary>Sala Motion Sensor light threshold</summary>
    public NumberEntity SalaMotionSensorLightThreshold => new(_haContext, "number.sala_motion_sensor_light_threshold");
    ///<summary>Sala Motion Sensor max move distance gate</summary>
    public NumberEntity SalaMotionSensorMaxMoveDistanceGate => new(_haContext, "number.sala_motion_sensor_max_move_distance_gate");
    ///<summary>Sala Motion Sensor max still distance gate</summary>
    public NumberEntity SalaMotionSensorMaxStillDistanceGate => new(_haContext, "number.sala_motion_sensor_max_still_distance_gate");
    ///<summary>Sala Motion Sensor Still Target Delay</summary>
    public NumberEntity SalaMotionSensorStillTargetDelay => new(_haContext, "number.sala_motion_sensor_still_target_delay");
    ///<summary>Sala Motion Sensor timeout</summary>
    public NumberEntity SalaMotionSensorTimeout => new(_haContext, "number.sala_motion_sensor_timeout");
    ///<summary>Smart Plug 1 Power on Threshold</summary>
    public NumberEntity SmartPlug1PowerOnThreshold => new(_haContext, "number.smart_plug_1_power_on_threshold");
    ///<summary>Smart Plug 2 Power on Threshold</summary>
    public NumberEntity SmartPlug2PowerOnThreshold => new(_haContext, "number.smart_plug_2_power_on_threshold");
    ///<summary>Smart Plug 3 Power on Threshold</summary>
    public NumberEntity SmartPlug3PowerOnThreshold => new(_haContext, "number.smart_plug_3_power_on_threshold");
    ///<summary>Smart Plug 4 Power on Threshold</summary>
    public NumberEntity SmartPlug4PowerOnThreshold => new(_haContext, "number.smart_plug_4_power_on_threshold");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * aqi aqi-updata-heartbeat</summary>
    public NumberEntity XiaomiSg753990712Cpa4AqiUpdataHeartbeatP114 => new(_haContext, "number.xiaomi_sg_753990712_cpa4_aqi_updata_heartbeat_p_11_4");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service favorite-level</summary>
    public NumberEntity XiaomiSg753990712Cpa4FavoriteLevelP911 => new(_haContext, "number.xiaomi_sg_753990712_cpa4_favorite_level_p_9_11");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service filter-used-time-dbg</summary>
    public NumberEntity XiaomiSg753990712Cpa4FilterUsedTimeDbgP912 => new(_haContext, "number.xiaomi_sg_753990712_cpa4_filter_used_time_dbg_p_9_12");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all person entities currently registered (at runtime) in Home Assistant as PersonEntity</summary>
    public IEnumerable<PersonEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("person.")).Select(e => new PersonEntity(e));
    ///<summary>Athena Bezos</summary>
    public PersonEntity AthenaBezos => new(_haContext, "person.athena_bezos");
    ///<summary>Daniel Rodriguez</summary>
    public PersonEntity DanielRodriguez => new(_haContext, "person.daniel_rodriguez");
    ///<summary>Home Tracker</summary>
    public PersonEntity HomeTracker => new(_haContext, "person.home_tracker");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all remote entities currently registered (at runtime) in Home Assistant as RemoteEntity</summary>
    public IEnumerable<RemoteEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("remote.")).Select(e => new RemoteEntity(e));
    ///<summary>Living Room TV</summary>
    public RemoteEntity LivingRoomTv => new(_haContext, "remote.living_room_tv");
    ///<summary>Projector</summary>
    public RemoteEntity Projector => new(_haContext, "remote.projector");
    public RemoteEntity XiaomiTvBox11 => new(_haContext, "remote.xiaomi_tv_box_11");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all scene entities currently registered (at runtime) in Home Assistant as SceneEntity</summary>
    public IEnumerable<SceneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("scene.")).Select(e => new SceneEntity(e));
    ///<summary>Govee to MQTT One-Click: Default: Default</summary>
    public SceneEntity GoveeToMqttOneClickDefaultDefault => new(_haContext, "scene.govee_to_mqtt_one_click_default_default");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all script entities currently registered (at runtime) in Home Assistant as ScriptEntity</summary>
    public IEnumerable<ScriptEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("script.")).Select(e => new ScriptEntity(e));
    ///<summary>Launch App</summary>
    public ScriptEntity _1714535235439 => new(_haContext, "script.1714535235439");
    ///<summary>Launch HLK Radar Tool</summary>
    public ScriptEntity LaunchHlkRadarTool => new(_haContext, "script.launch_hlk_radar_tool");
    ///<summary>Launch Moonlight on Mi Pad 5</summary>
    public ScriptEntity LaunchMoonlightOnMiPad5 => new(_haContext, "script.launch_moonlight_on_mi_pad_5");
    ///<summary>Send TV Notification</summary>
    public ScriptEntity SendTvNotification => new(_haContext, "script.send_tv_notification");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all select entities currently registered (at runtime) in Home Assistant as SelectEntity</summary>
    public IEnumerable<SelectEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("select.")).Select(e => new SelectEntity(e));
    ///<summary>Bathroom Lights Light preset</summary>
    public SelectEntity BathroomLightsLightPreset => new(_haContext, "select.bathroom_lights_light_preset");
    ///<summary>Bathroom Motion Sensor baud rate</summary>
    public SelectEntity BathroomMotionSensorBaudRate => new(_haContext, "select.bathroom_motion_sensor_baud_rate");
    ///<summary>Bathroom Motion Sensor distance resolution</summary>
    public SelectEntity BathroomMotionSensorDistanceResolution => new(_haContext, "select.bathroom_motion_sensor_distance_resolution");
    ///<summary>Bathroom Motion Sensor light function</summary>
    public SelectEntity BathroomMotionSensorLightFunction => new(_haContext, "select.bathroom_motion_sensor_light_function");
    ///<summary>Bathroom Motion Sensor out pin level</summary>
    public SelectEntity BathroomMotionSensorOutPinLevel => new(_haContext, "select.bathroom_motion_sensor_out_pin_level");
    ///<summary>Bed Lights  Light preset</summary>
    public SelectEntity BedLightsLightPreset => new(_haContext, "select.bed_lights_light_preset");
    ///<summary>Bedroom Motion Sensor baud rate</summary>
    public SelectEntity BedroomMotionSensorBaudRate => new(_haContext, "select.bedroom_motion_sensor_baud_rate");
    ///<summary>Bedroom Motion Sensor distance resolution</summary>
    public SelectEntity BedroomMotionSensorDistanceResolution => new(_haContext, "select.bedroom_motion_sensor_distance_resolution");
    ///<summary>Bedroom Motion Sensor light function</summary>
    public SelectEntity BedroomMotionSensorLightFunction => new(_haContext, "select.bedroom_motion_sensor_light_function");
    ///<summary>Bedroom Motion Sensor out pin level</summary>
    public SelectEntity BedroomMotionSensorOutPinLevel => new(_haContext, "select.bedroom_motion_sensor_out_pin_level");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Quantity Of Ingredients</summary>
    public SelectEntity CareliSg593061393Maf05aFoodQuantyP36 => new(_haContext, "select.careli_sg_593061393_maf05a_food_quanty_p_3_6");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Preheating Button</summary>
    public SelectEntity CareliSg593061393Maf05aPreheatSwitchP37 => new(_haContext, "select.careli_sg_593061393_maf05a_preheat_switch_p_3_7");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service turn-pot-cfg</summary>
    public SelectEntity CareliSg593061393Maf05aTurnPotCfgP311 => new(_haContext, "select.careli_sg_593061393_maf05a_turn_pot_cfg_p_3_11");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Turn Over Notification</summary>
    public SelectEntity CareliSg593061393Maf05aTurnPotP310 => new(_haContext, "select.careli_sg_593061393_maf05a_turn_pot_p_3_10");
    ///<summary>Controller RGB DF1C0D Remote config</summary>
    public SelectEntity ControllerRgbDf1c0dRemoteConfig => new(_haContext, "select.controller_rgb_df1c0d_remote_config");
    ///<summary>Controller RGB DF1C0D Wiring</summary>
    public SelectEntity ControllerRgbDf1c0dWiring => new(_haContext, "select.controller_rgb_df1c0d_wiring");
    ///<summary>Desk Motion Sensor baud rate</summary>
    public SelectEntity DeskMotionSensorBaudRate => new(_haContext, "select.desk_motion_sensor_baud_rate");
    ///<summary>Desk Motion Sensor distance resolution</summary>
    public SelectEntity DeskMotionSensorDistanceResolution => new(_haContext, "select.desk_motion_sensor_distance_resolution");
    ///<summary>Desk Motion Sensor light function</summary>
    public SelectEntity DeskMotionSensorLightFunction => new(_haContext, "select.desk_motion_sensor_light_function");
    ///<summary>Desk Motion Sensor out pin level</summary>
    public SelectEntity DeskMotionSensorOutPinLevel => new(_haContext, "select.desk_motion_sensor_out_pin_level");
    ///<summary>Kitchen Motion Sensor baud rate</summary>
    public SelectEntity KitchenMotionSensorBaudRate => new(_haContext, "select.kitchen_motion_sensor_baud_rate");
    ///<summary>Kitchen Motion Sensor distance resolution</summary>
    public SelectEntity KitchenMotionSensorDistanceResolution => new(_haContext, "select.kitchen_motion_sensor_distance_resolution");
    ///<summary>Kitchen Motion Sensor light function</summary>
    public SelectEntity KitchenMotionSensorLightFunction => new(_haContext, "select.kitchen_motion_sensor_light_function");
    ///<summary>Kitchen Motion Sensor out pin level</summary>
    public SelectEntity KitchenMotionSensorOutPinLevel => new(_haContext, "select.kitchen_motion_sensor_out_pin_level");
    ///<summary>Mipad Charger Indicator light mode</summary>
    public SelectEntity LaptopChargerIndicatorLightMode => new(_haContext, "select.laptop_charger_indicator_light_mode");
    ///<summary>Mipad Charger Power on behavior</summary>
    public SelectEntity LaptopChargerPowerOnBehavior => new(_haContext, "select.laptop_charger_power_on_behavior");
    ///<summary>Pantry Lights Light preset</summary>
    public SelectEntity PantryLightsLightPreset => new(_haContext, "select.pantry_lights_light_preset");
    ///<summary>Pantry Motion Sensor baud rate</summary>
    public SelectEntity PantryMotionSensorBaudRate => new(_haContext, "select.pantry_motion_sensor_baud_rate");
    ///<summary>Pantry Motion Sensor distance resolution</summary>
    public SelectEntity PantryMotionSensorDistanceResolution => new(_haContext, "select.pantry_motion_sensor_distance_resolution");
    ///<summary>Pantry Motion Sensor light function</summary>
    public SelectEntity PantryMotionSensorLightFunction => new(_haContext, "select.pantry_motion_sensor_light_function");
    ///<summary>Pantry Motion Sensor out pin level</summary>
    public SelectEntity PantryMotionSensorOutPinLevel => new(_haContext, "select.pantry_motion_sensor_out_pin_level");
    ///<summary>RGB Light Strip Light preset</summary>
    public SelectEntity RgbLightStripLightPreset => new(_haContext, "select.rgb_light_strip_light_preset");
    ///<summary>Rice Cooker Indicator light mode</summary>
    public SelectEntity RiceCookerIndicatorLightMode => new(_haContext, "select.rice_cooker_indicator_light_mode");
    ///<summary>Rice Cooker Power on behavior</summary>
    public SelectEntity RiceCookerPowerOnBehavior => new(_haContext, "select.rice_cooker_power_on_behavior");
    ///<summary>Sala Lights 2 Light preset</summary>
    public SelectEntity SalaLights2LightPreset => new(_haContext, "select.sala_lights_2_light_preset");
    ///<summary>Sala Lights Light preset</summary>
    public SelectEntity SalaLightsLightPreset => new(_haContext, "select.sala_lights_light_preset");
    ///<summary>Sala Motion Sensor baud rate</summary>
    public SelectEntity SalaMotionSensorBaudRate => new(_haContext, "select.sala_motion_sensor_baud_rate");
    ///<summary>Sala Motion Sensor distance resolution</summary>
    public SelectEntity SalaMotionSensorDistanceResolution => new(_haContext, "select.sala_motion_sensor_distance_resolution");
    ///<summary>Sala Motion Sensor light function</summary>
    public SelectEntity SalaMotionSensorLightFunction => new(_haContext, "select.sala_motion_sensor_light_function");
    ///<summary>Sala Motion Sensor out pin level</summary>
    public SelectEntity SalaMotionSensorOutPinLevel => new(_haContext, "select.sala_motion_sensor_out_pin_level");
    ///<summary>Water Dispenser Indicator light mode</summary>
    public SelectEntity WaterDispenserIndicatorLightMode => new(_haContext, "select.water_dispenser_indicator_light_mode");
    ///<summary>Water Dispenser Power on behavior</summary>
    public SelectEntity WaterDispenserPowerOnBehavior => new(_haContext, "select.water_dispenser_power_on_behavior");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Screen Screen brightness</summary>
    public SelectEntity XiaomiSg753990712Cpa4BrightnessP132 => new(_haContext, "select.xiaomi_sg_753990712_cpa4_brightness_p_13_2");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service country-code</summary>
    public SelectEntity XiaomiSg753990712Cpa4CountryCodeP910 => new(_haContext, "select.xiaomi_sg_753990712_cpa4_country_code_p_9_10");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Air Purifier Mode</summary>
    public SelectEntity XiaomiSg753990712Cpa4ModeP24 => new(_haContext, "select.xiaomi_sg_753990712_cpa4_mode_p_2_4");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.")).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all non-numeric sensor entities currently registered (at runtime) in Home Assistant as SensorEntity</summary>
    public IEnumerable<SensorEntity> EnumerateAllNonNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && !(e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new SensorEntity(e));
    /// <summary>Enumerates all numeric sensor entities currently registered (at runtime) in Home Assistant as NumericSensorEntity</summary>
    public IEnumerable<NumericSensorEntity> EnumerateAllNumeric() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sensor.") && (e.EntityState?.AttributesJson?.TryGetProperty("unit_of_measurement", out _) ?? false)).Select(e => new NumericSensorEntity(e));
    ///<summary>21051182C Battery state</summary>
    public SensorEntity _21051182cBatteryState => new(_haContext, "sensor.21051182c_battery_state");
    ///<summary>21051182C Beacon monitor</summary>
    public SensorEntity _21051182cBeaconMonitor => new(_haContext, "sensor.21051182c_beacon_monitor");
    ///<summary>21051182C Charger type</summary>
    public SensorEntity _21051182cChargerType => new(_haContext, "sensor.21051182c_charger_type");
    ///<summary>21051182C Wi-Fi connection</summary>
    public SensorEntity _21051182cWifiConnection => new(_haContext, "sensor.21051182c_wifi_connection");
    ///<summary>887216f5-c9c0-4901-bf59-51c6e940bf11_100_40004 Vendor</summary>
    public SensorEntity _887216f5C9c04901Bf5951c6e940bf1110040004Vendor => new(_haContext, "sensor.887216f5_c9c0_4901_bf59_51c6e940bf11_100_40004_vendor");
    ///<summary>Air Fryer Level</summary>
    public SensorEntity AirFryerLevel => new(_haContext, "sensor.air_fryer_level");
    ///<summary>Air Fryer Status</summary>
    public SensorEntity AirFryerStatus => new(_haContext, "sensor.air_fryer_status");
    ///<summary>Home Assistant Air quality</summary>
    public SensorEntity AirQuality => new(_haContext, "sensor.air_quality");
    ///<summary>Home Assistant Alarm control panels</summary>
    public SensorEntity AlarmControlPanels => new(_haContext, "sensor.alarm_control_panels");
    ///<summary>Home Assistant Areas</summary>
    public SensorEntity Areas => new(_haContext, "sensor.areas");
    ///<summary>Home Assistant Automations</summary>
    public SensorEntity Automations => new(_haContext, "sensor.automations");
    ///<summary>Backup Backup Manager state</summary>
    public SensorEntity BackupBackupManagerState => new(_haContext, "sensor.backup_backup_manager_state");
    ///<summary>Backup Last attempted automatic backup</summary>
    public SensorEntity BackupLastAttemptedAutomaticBackup => new(_haContext, "sensor.backup_last_attempted_automatic_backup");
    ///<summary>Backup Last successful automatic backup</summary>
    public SensorEntity BackupLastSuccessfulAutomaticBackup => new(_haContext, "sensor.backup_last_successful_automatic_backup");
    ///<summary>Backup Next scheduled automatic backup</summary>
    public SensorEntity BackupNextScheduledAutomaticBackup => new(_haContext, "sensor.backup_next_scheduled_automatic_backup");
    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>Baseus Tag Area</summary>
    public SensorEntity BaseusTagArea => new(_haContext, "sensor.baseus_tag_area");
    ///<summary>Bathroom Lights Signal level</summary>
    public SensorEntity BathroomLightsSignalLevel => new(_haContext, "sensor.bathroom_lights_signal_level");
    ///<summary>Bathroom Motion Sensor light</summary>
    public SensorEntity BathroomMotionSensorLight => new(_haContext, "sensor.bathroom_motion_sensor_light");
    ///<summary>Bathroom Motion Sensor Presence sensor mac address</summary>
    public SensorEntity BathroomMotionSensorPresenceSensorMacAddress => new(_haContext, "sensor.bathroom_motion_sensor_presence_sensor_mac_address");
    ///<summary>Bathroom Motion Sensor Presence sensor version</summary>
    public SensorEntity BathroomMotionSensorPresenceSensorVersion => new(_haContext, "sensor.bathroom_motion_sensor_presence_sensor_version");
    ///<summary>Bed Lights  Signal level</summary>
    public SensorEntity BedLightsSignalLevel => new(_haContext, "sensor.bed_lights_signal_level");
    ///<summary>Bedroom Motion Sensor Current Scale Reading</summary>
    public SensorEntity BedroomMotionSensorCurrentScaleReading => new(_haContext, "sensor.bedroom_motion_sensor_current_scale_reading");
    ///<summary>Bedroom Motion Sensor light</summary>
    public SensorEntity BedroomMotionSensorLight => new(_haContext, "sensor.bedroom_motion_sensor_light");
    ///<summary>Bedroom Motion Sensor Presence sensor mac address</summary>
    public SensorEntity BedroomMotionSensorPresenceSensorMacAddress => new(_haContext, "sensor.bedroom_motion_sensor_presence_sensor_mac_address");
    ///<summary>Bedroom Motion Sensor Presence sensor version</summary>
    public SensorEntity BedroomMotionSensorPresenceSensorVersion => new(_haContext, "sensor.bedroom_motion_sensor_presence_sensor_version");
    ///<summary>Bermuda Global Active proxy count</summary>
    public SensorEntity BermudaGlobalActiveProxyCount => new(_haContext, "sensor.bermuda_global_active_proxy_count");
    ///<summary>Bermuda Global Total proxy count</summary>
    public SensorEntity BermudaGlobalTotalProxyCount => new(_haContext, "sensor.bermuda_global_total_proxy_count");
    ///<summary>Home Assistant Binary sensors</summary>
    public SensorEntity BinarySensors => new(_haContext, "sensor.binary_sensors");
    ///<summary>Home Assistant Buttons</summary>
    public SensorEntity Buttons => new(_haContext, "sensor.buttons");
    ///<summary>Home Assistant Calendars</summary>
    public SensorEntity Calendars => new(_haContext, "sensor.calendars");
    ///<summary>Home Assistant Cameras</summary>
    public SensorEntity Cameras => new(_haContext, "sensor.cameras");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Error</summary>
    public SensorEntity CareliSg593061393Maf05aFaultP22 => new(_haContext, "sensor.careli_sg_593061393_maf05a_fault_p_2_2");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Operating Status</summary>
    public SensorEntity CareliSg593061393Maf05aStatusP21 => new(_haContext, "sensor.careli_sg_593061393_maf05a_status_p_2_1");
    ///<summary>Ceiling Fan Auto-off at</summary>
    public SensorEntity CeilingFanAutoOffAt => new(_haContext, "sensor.ceiling_fan_auto_off_at");
    ///<summary>Home Assistant Climate</summary>
    public SensorEntity Climate => new(_haContext, "sensor.climate");
    ///<summary>Controller RGB DF1C0D Paired remotes</summary>
    public SensorEntity ControllerRgbDf1c0dPairedRemotes => new(_haContext, "sensor.controller_rgb_df1c0d_paired_remotes");
    ///<summary>Home Assistant Covers</summary>
    public SensorEntity Covers => new(_haContext, "sensor.covers");
    ///<summary>Home Assistant Custom integrations</summary>
    public SensorEntity CustomIntegrations => new(_haContext, "sensor.custom_integrations");
    ///<summary>daniel-pc Expires</summary>
    public SensorEntity DanielPcExpires => new(_haContext, "sensor.daniel_pc_expires");
    ///<summary>DANIEL-PC_hass-agent DANIEL-PC_hass-agent_activewindow</summary>
    public SensorEntity DanielPcHassAgentDanielPcHassAgentActivewindow => new(_haContext, "sensor.daniel_pc_hass_agent_daniel_pc_hass_agent_activewindow");
    ///<summary>DANIEL-PC_hass-agent DANIEL-PC_hass-agent_incognito</summary>
    public SensorEntity DanielPcHassAgentDanielPcHassAgentIncognito => new(_haContext, "sensor.daniel_pc_hass_agent_daniel_pc_hass_agent_incognito");
    ///<summary>daniel-pc IP address</summary>
    public SensorEntity DanielPcIpAddress => new(_haContext, "sensor.daniel_pc_ip_address");
    ///<summary>daniel-pc Last seen</summary>
    public SensorEntity DanielPcLastSeen => new(_haContext, "sensor.daniel_pc_last_seen");
    ///<summary>DANIEL-PC Network interface</summary>
    public SensorEntity DanielPcNetworkInterface => new(_haContext, "sensor.daniel_pc_network_interface");
    ///<summary>DANIEL-PC Processes</summary>
    public SensorEntity DanielPcProcesses => new(_haContext, "sensor.daniel_pc_processes");
    ///<summary>Home Assistant Dates</summary>
    public SensorEntity Dates => new(_haContext, "sensor.dates");
    ///<summary>Home Assistant Date/times</summary>
    public SensorEntity Datetimes => new(_haContext, "sensor.datetimes");
    ///<summary>Desk Motion Sensor Presence sensor mac address</summary>
    public SensorEntity DeskMotionSensorPresenceSensorMacAddress => new(_haContext, "sensor.desk_motion_sensor_presence_sensor_mac_address");
    ///<summary>Desk Motion Sensor Presence sensor version</summary>
    public SensorEntity DeskMotionSensorPresenceSensorVersion => new(_haContext, "sensor.desk_motion_sensor_presence_sensor_version");
    ///<summary>Home Assistant Device trackers</summary>
    public SensorEntity DeviceTrackers => new(_haContext, "sensor.device_trackers");
    ///<summary>Home Assistant Devices</summary>
    public SensorEntity Devices => new(_haContext, "sensor.devices");
    ///<summary>Home Assistant Entities</summary>
    public SensorEntity Entities => new(_haContext, "sensor.entities");
    ///<summary>ESPHome Device Builder Newest version</summary>
    public SensorEntity EsphomeNewestVersion => new(_haContext, "sensor.esphome_newest_version");
    ///<summary>ESPHome Device Builder Version</summary>
    public SensorEntity EsphomeVersion => new(_haContext, "sensor.esphome_version");
    ///<summary>Electricity Bill</summary>
    public SensorEntity EstimatedMonthlyElectricityBill => new(_haContext, "sensor.estimated_monthly_electricity_bill");
    ///<summary>Home Assistant Fans</summary>
    public SensorEntity Fans => new(_haContext, "sensor.fans");
    ///<summary>Flytrap Auto-off at</summary>
    public SensorEntity FlytrapAutoOffAt => new(_haContext, "sensor.flytrap_auto_off_at");
    ///<summary>Flytrap Signal level</summary>
    public SensorEntity FlytrapSignalLevel2 => new(_haContext, "sensor.flytrap_signal_level_2");
    ///<summary>Front Door Operator</summary>
    public SensorEntity FrontDoorOperator => new(_haContext, "sensor.front_door_operator");
    ///<summary>Govee to MQTT Version</summary>
    public SensorEntity GoveeToMqttVersion => new(_haContext, "sensor.govee_to_mqtt_version");
    ///<summary>homeassistant Expires</summary>
    public SensorEntity HomeassistantExpires => new(_haContext, "sensor.homeassistant_expires");
    ///<summary>homeassistant IP address</summary>
    public SensorEntity HomeassistantIpAddress => new(_haContext, "sensor.homeassistant_ip_address");
    ///<summary>homeassistant Last seen</summary>
    public SensorEntity HomeassistantLastSeen => new(_haContext, "sensor.homeassistant_last_seen");
    ///<summary>Home Assistant Humidifiers</summary>
    public SensorEntity Humidifiers => new(_haContext, "sensor.humidifiers");
    ///<summary>Home Assistant Images</summary>
    public SensorEntity Images => new(_haContext, "sensor.images");
    ///<summary>Home Assistant Input booleans</summary>
    public SensorEntity InputBooleans => new(_haContext, "sensor.input_booleans");
    ///<summary>Home Assistant Input buttons</summary>
    public SensorEntity InputButtons => new(_haContext, "sensor.input_buttons");
    ///<summary>Home Assistant Input date/times</summary>
    public SensorEntity InputDatetimes => new(_haContext, "sensor.input_datetimes");
    ///<summary>Home Assistant Input numbers</summary>
    public SensorEntity InputNumbers => new(_haContext, "sensor.input_numbers");
    ///<summary>Home Assistant Input selects</summary>
    public SensorEntity InputSelects => new(_haContext, "sensor.input_selects");
    ///<summary>Home Assistant Input texts</summary>
    public SensorEntity InputTexts => new(_haContext, "sensor.input_texts");
    ///<summary>Home Assistant Integrations</summary>
    public SensorEntity Integrations => new(_haContext, "sensor.integrations");
    ///<summary>iPad Activity</summary>
    public SensorEntity IpadActivity => new(_haContext, "sensor.ipad_activity");
    ///<summary>iPad App Version</summary>
    public SensorEntity IpadAppVersion => new(_haContext, "sensor.ipad_app_version");
    ///<summary>iPad Audio Output</summary>
    public SensorEntity IpadAudioOutput => new(_haContext, "sensor.ipad_audio_output");
    ///<summary>iPad Battery State</summary>
    public SensorEntity IpadBatteryState => new(_haContext, "sensor.ipad_battery_state");
    ///<summary>iPad BSSID</summary>
    public SensorEntity IpadBssid => new(_haContext, "sensor.ipad_bssid");
    ///<summary>iPad Connection Type</summary>
    public SensorEntity IpadConnectionType => new(_haContext, "sensor.ipad_connection_type");
    ///<summary>iPad Geocoded Location</summary>
    public SensorEntity IpadGeocodedLocation => new(_haContext, "sensor.ipad_geocoded_location");
    ///<summary>iPad Last Update Trigger</summary>
    public SensorEntity IpadLastUpdateTrigger => new(_haContext, "sensor.ipad_last_update_trigger");
    ///<summary>iPad Location permission</summary>
    public SensorEntity IpadLocationPermission => new(_haContext, "sensor.ipad_location_permission");
    ///<summary>iPad SSID</summary>
    public SensorEntity IpadSsid => new(_haContext, "sensor.ipad_ssid");
    ///<summary>iPhone Activity</summary>
    public SensorEntity IphoneActivity => new(_haContext, "sensor.iphone_activity");
    ///<summary>iPhone App Version</summary>
    public SensorEntity IphoneAppVersion => new(_haContext, "sensor.iphone_app_version");
    ///<summary>iPhone Audio Output</summary>
    public SensorEntity IphoneAudioOutput => new(_haContext, "sensor.iphone_audio_output");
    ///<summary>iPhone Battery State</summary>
    public SensorEntity IphoneBatteryState => new(_haContext, "sensor.iphone_battery_state");
    ///<summary>iPhone BSSID</summary>
    public SensorEntity IphoneBssid => new(_haContext, "sensor.iphone_bssid");
    ///<summary>iPhone Connection Type</summary>
    public SensorEntity IphoneConnectionType => new(_haContext, "sensor.iphone_connection_type");
    ///<summary>iPhone Geocoded Location</summary>
    public SensorEntity IphoneGeocodedLocation => new(_haContext, "sensor.iphone_geocoded_location");
    ///<summary>iPhone Last Update Trigger</summary>
    public SensorEntity IphoneLastUpdateTrigger => new(_haContext, "sensor.iphone_last_update_trigger");
    ///<summary>iPhone Location permission</summary>
    public SensorEntity IphoneLocationPermission => new(_haContext, "sensor.iphone_location_permission");
    ///<summary>iPhone SIM 1</summary>
    public SensorEntity IphoneSim1 => new(_haContext, "sensor.iphone_sim_1");
    ///<summary>iPhone SIM 2</summary>
    public SensorEntity IphoneSim2 => new(_haContext, "sensor.iphone_sim_2");
    ///<summary>iPhone SSID</summary>
    public SensorEntity IphoneSsid => new(_haContext, "sensor.iphone_ssid");
    ///<summary>Kitchen Motion Sensor light</summary>
    public SensorEntity KitchenMotionSensorLight => new(_haContext, "sensor.kitchen_motion_sensor_light");
    ///<summary>Kitchen Motion Sensor Presence sensor mac address</summary>
    public SensorEntity KitchenMotionSensorPresenceSensorMacAddress => new(_haContext, "sensor.kitchen_motion_sensor_presence_sensor_mac_address");
    ///<summary>Kitchen Motion Sensor Presence sensor version</summary>
    public SensorEntity KitchenMotionSensorPresenceSensorVersion => new(_haContext, "sensor.kitchen_motion_sensor_presence_sensor_version");
    ///<summary>Last Triggered Motion Sensor Friendly Name</summary>
    public SensorEntity LastTriggeredMotionSensorFriendlyName => new(_haContext, "sensor.last_triggered_motion_sensor_friendly_name");
    ///<summary>Home Assistant Lights</summary>
    public SensorEntity Lights => new(_haContext, "sensor.lights");
    ///<summary>Home Assistant Locks</summary>
    public SensorEntity Locks => new(_haContext, "sensor.locks");
    ///<summary>Home Assistant Media players</summary>
    public SensorEntity MediaPlayers => new(_haContext, "sensor.media_players");
    ///<summary>bermuda_8c_ce_fd_a9_79_a6 Area</summary>
    public SensorEntity MiWatchLite79a6Area => new(_haContext, "sensor.mi_watch_lite_79a6_area");
    ///<summary>MiPad Browser path</summary>
    public SensorEntity MipadBrowserPath => new(_haContext, "sensor.mipad_browser_path");
    ///<summary>MiPad Browser user</summary>
    public SensorEntity MipadBrowserUser => new(_haContext, "sensor.mipad_browser_user");
    ///<summary>MiPad Browser userAgent</summary>
    public SensorEntity MipadBrowserUseragent => new(_haContext, "sensor.mipad_browser_useragent");
    ///<summary>MiPad Browser visibility</summary>
    public SensorEntity MipadBrowserVisibility => new(_haContext, "sensor.mipad_browser_visibility");
    ///<summary>Home Assistant Numbers</summary>
    public SensorEntity Numbers => new(_haContext, "sensor.numbers");
    ///<summary>Pantry Lights Signal level</summary>
    public SensorEntity PantryLightsSignalLevel2 => new(_haContext, "sensor.pantry_lights_signal_level_2");
    ///<summary>Pantry Motion Sensor light</summary>
    public SensorEntity PantryMotionSensorLight => new(_haContext, "sensor.pantry_motion_sensor_light");
    ///<summary>Pantry Motion Sensor Presence sensor mac address</summary>
    public SensorEntity PantryMotionSensorPresenceSensorMacAddress => new(_haContext, "sensor.pantry_motion_sensor_presence_sensor_mac_address");
    ///<summary>Pantry Motion Sensor Presence sensor version</summary>
    public SensorEntity PantryMotionSensorPresenceSensorVersion => new(_haContext, "sensor.pantry_motion_sensor_presence_sensor_version");
    ///<summary>Home Assistant Persistent notifications</summary>
    public SensorEntity PersistentNotifications => new(_haContext, "sensor.persistent_notifications");
    ///<summary>Home Assistant Persons</summary>
    public SensorEntity Persons => new(_haContext, "sensor.persons");
    ///<summary>Poco F4 GT BLE Area</summary>
    public SensorEntity PocoF4GtBleArea => new(_haContext, "sensor.poco_f4_gt_ble_area");
    ///<summary>POCO F4 GT BLE transmitter</summary>
    public SensorEntity PocoF4GtBleTransmitter => new(_haContext, "sensor.poco_f4_gt_ble_transmitter");
    ///<summary>POCO F4 GT Detected activity</summary>
    public SensorEntity PocoF4GtDetectedActivity => new(_haContext, "sensor.poco_f4_gt_detected_activity");
    ///<summary>POCO F4 GT Last update trigger</summary>
    public SensorEntity PocoF4GtLastUpdateTrigger => new(_haContext, "sensor.poco_f4_gt_last_update_trigger");
    ///<summary>Home Assistant Remotes</summary>
    public SensorEntity Remotes => new(_haContext, "sensor.remotes");
    ///<summary>RGB Light Strip Signal level</summary>
    public SensorEntity RgbLightStripSignalLevel => new(_haContext, "sensor.rgb_light_strip_signal_level");
    ///<summary>Sala Lights 2 Signal level</summary>
    public SensorEntity SalaLights2SignalLevel2 => new(_haContext, "sensor.sala_lights_2_signal_level_2");
    ///<summary>Sala Lights Signal level</summary>
    public SensorEntity SalaLightsSignalLevel2 => new(_haContext, "sensor.sala_lights_signal_level_2");
    ///<summary>Sala Motion Sensor light</summary>
    public SensorEntity SalaMotionSensorLight => new(_haContext, "sensor.sala_motion_sensor_light");
    ///<summary>Sala Motion Sensor Presence sensor mac address</summary>
    public SensorEntity SalaMotionSensorPresenceSensorMacAddress => new(_haContext, "sensor.sala_motion_sensor_presence_sensor_mac_address");
    ///<summary>Sala Motion Sensor Presence sensor version</summary>
    public SensorEntity SalaMotionSensorPresenceSensorVersion => new(_haContext, "sensor.sala_motion_sensor_presence_sensor_version");
    ///<summary>Home Assistant Scenes</summary>
    public SensorEntity Scenes => new(_haContext, "sensor.scenes");
    ///<summary>Home Assistant Scripts</summary>
    public SensorEntity Scripts => new(_haContext, "sensor.scripts");
    ///<summary>Home Assistant Selects</summary>
    public SensorEntity Selects => new(_haContext, "sensor.selects");
    ///<summary>Home Assistant Sensors</summary>
    public SensorEntity Sensors => new(_haContext, "sensor.sensors");
    ///<summary>Home Assistant Sirens</summary>
    public SensorEntity Sirens => new(_haContext, "sensor.sirens");
    ///<summary>Smart TV Pro Last used app</summary>
    public SensorEntity SmartTvProLastUsedApp => new(_haContext, "sensor.smart_tv_pro_last_used_app");
    ///<summary>EWeLink Plug Bedroom 2 Action</summary>
    public SensorEntity Sonoff1002352c40Action => new(_haContext, "sensor.sonoff_1002352c40_action");
    ///<summary>EWeLink Plug Sala 2 Action</summary>
    public SensorEntity Sonoff1002380fe5Action => new(_haContext, "sensor.sonoff_1002380fe5_action");
    ///<summary>EWeLink Plug Sala 1 Action</summary>
    public SensorEntity Sonoff1002381023Action => new(_haContext, "sensor.sonoff_1002381023_action");
    ///<summary>EWeLink Plug Bedroom 1 Action</summary>
    public SensorEntity Sonoff100238104eAction => new(_haContext, "sensor.sonoff_100238104e_action");
    ///<summary>Home Assistant Speech-to-text</summary>
    public SensorEntity Stt => new(_haContext, "sensor.stt");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>Home Assistant Suns</summary>
    public SensorEntity Suns => new(_haContext, "sensor.suns");
    ///<summary>Home Assistant Switches</summary>
    public SensorEntity Switches => new(_haContext, "sensor.switches");
    ///<summary>System Monitor Last boot</summary>
    public SensorEntity SystemMonitorLastBoot => new(_haContext, "sensor.system_monitor_last_boot");
    ///<summary>Home Assistant Texts</summary>
    public SensorEntity Texts => new(_haContext, "sensor.texts");
    ///<summary>ThinkpadT14 DISPLAY1</summary>
    public SensorEntity Thinkpadt144009a504E7674f6aBf1aB11fda26d5b9Display1 => new(_haContext, "sensor.thinkpadt14_4009a504_e767_4f6a_bf1a_b11fda26d5b9_display1");
    ///<summary>ThinkpadT14 DISPLAY2</summary>
    public SensorEntity Thinkpadt144009a504E7674f6aBf1aB11fda26d5b9Display2 => new(_haContext, "sensor.thinkpadt14_4009a504_e767_4f6a_bf1a_b11fda26d5b9_display2");
    ///<summary>ThinkpadT14 DISPLAY6</summary>
    public SensorEntity Thinkpadt144009a504E7674f6aBf1aB11fda26d5b9Display6 => new(_haContext, "sensor.thinkpadt14_4009a504_e767_4f6a_bf1a_b11fda26d5b9_display6");
    ///<summary>ThinkpadT14 Charge Remaining</summary>
    public SensorEntity Thinkpadt14BatteryChargeRemaining => new(_haContext, "sensor.thinkpadt14_battery_charge_remaining");
    ///<summary>ThinkpadT14 Charge Status</summary>
    public SensorEntity Thinkpadt14BatteryChargeStatus => new(_haContext, "sensor.thinkpadt14_battery_charge_status");
    ///<summary>ThinkpadT14 Full Charge Lifetime</summary>
    public SensorEntity Thinkpadt14BatteryFullChargeLifetime => new(_haContext, "sensor.thinkpadt14_battery_full_charge_lifetime");
    ///<summary>ThinkpadT14 Powerline Status</summary>
    public SensorEntity Thinkpadt14BatteryPowerlineStatus => new(_haContext, "sensor.thinkpadt14_battery_powerline_status");
    ///<summary>ThinkpadT14 Display Count</summary>
    public SensorEntity Thinkpadt14DisplayDisplayCount => new(_haContext, "sensor.thinkpadt14_display_display_count");
    ///<summary>ThinkpadT14 Primary Display</summary>
    public SensorEntity Thinkpadt14DisplayPrimaryDisplay => new(_haContext, "sensor.thinkpadt14_display_primary_display");
    ///<summary>ThinkpadT14 sessionstate</summary>
    public SensorEntity Thinkpadt14Sessionstate => new(_haContext, "sensor.thinkpadt14_sessionstate");
    ///<summary>Home Assistant Times</summary>
    public SensorEntity Times => new(_haContext, "sensor.times");
    ///<summary>Home Assistant Text-to-speech</summary>
    public SensorEntity Tts => new(_haContext, "sensor.tts");
    ///<summary>TV Backlight 3 Lite Status</summary>
    public SensorEntity TvBacklight3LiteStatus => new(_haContext, "sensor.tv_backlight_3_lite_status");
    ///<summary>Home Assistant Update</summary>
    public SensorEntity Update => new(_haContext, "sensor.update");
    ///<summary>Home Assistant Vacuums</summary>
    public SensorEntity Vacuums => new(_haContext, "sensor.vacuums");
    ///<summary>watchman_last_updated</summary>
    public SensorEntity WatchmanLastUpdated => new(_haContext, "sensor.watchman_last_updated");
    ///<summary>Home Assistant Water heaters</summary>
    public SensorEntity WaterHeaters => new(_haContext, "sensor.water_heaters");
    ///<summary>Home Assistant Weather</summary>
    public SensorEntity Weather => new(_haContext, "sensor.weather");
    ///<summary>xiaomi-21121210g Expires</summary>
    public SensorEntity Xiaomi21121210gExpires => new(_haContext, "sensor.xiaomi_21121210g_expires");
    ///<summary>xiaomi-21121210g IP address</summary>
    public SensorEntity Xiaomi21121210gIpAddress => new(_haContext, "sensor.xiaomi_21121210g_ip_address");
    ///<summary>xiaomi-21121210g Last seen</summary>
    public SensorEntity Xiaomi21121210gLastSeen => new(_haContext, "sensor.xiaomi_21121210g_last_seen");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Air Purifier Device Fault</summary>
    public SensorEntity XiaomiSg753990712Cpa4FaultP22 => new(_haContext, "sensor.xiaomi_sg_753990712_cpa4_fault_p_2_2");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact * custom-service motor-speed-rpm</summary>
    public SensorEntity XiaomiSg753990712Cpa4MotorSpeedRpmP91 => new(_haContext, "sensor.xiaomi_sg_753990712_cpa4_motor_speed_rpm_p_9_1");
    ///<summary>Home Assistant Zones</summary>
    public SensorEntity Zones => new(_haContext, "sensor.zones");
    ///<summary>21051182C Battery level</summary>
    public NumericSensorEntity _21051182cBatteryLevel => new(_haContext, "sensor.21051182c_battery_level");
    ///<summary>21051182C Bluetooth connection</summary>
    public NumericSensorEntity _21051182cBluetoothConnection => new(_haContext, "sensor.21051182c_bluetooth_connection");
    ///<summary>887216f5-c9c0-4901-bf59-51c6e940bf11_100_40004 Estimated distance</summary>
    public NumericSensorEntity _887216f5C9c04901Bf5951c6e940bf1110040004EstimatedDistance => new(_haContext, "sensor.887216f5_c9c0_4901_bf59_51c6e940bf11_100_40004_estimated_distance");
    ///<summary>887216f5-c9c0-4901-bf59-51c6e940bf11_100_40004 Power</summary>
    public NumericSensorEntity _887216f5C9c04901Bf5951c6e940bf1110040004Power => new(_haContext, "sensor.887216f5_c9c0_4901_bf59_51c6e940bf11_100_40004_power");
    ///<summary>Repairs Active</summary>
    public NumericSensorEntity ActiveIssues => new(_haContext, "sensor.active_issues");
    ///<summary>Baseus Tag Distance</summary>
    public NumericSensorEntity BaseusTagDistance => new(_haContext, "sensor.baseus_tag_distance");
    ///<summary>Bathroom Motion Sensor g0 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG0MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g0_move_energy");
    ///<summary>Bathroom Motion Sensor g0 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG0StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g0_still_energy");
    ///<summary>Bathroom Motion Sensor g1 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG1MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g1_move_energy");
    ///<summary>Bathroom Motion Sensor g1 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG1StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g1_still_energy");
    ///<summary>Bathroom Motion Sensor g2 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG2MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g2_move_energy");
    ///<summary>Bathroom Motion Sensor g2 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG2StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g2_still_energy");
    ///<summary>Bathroom Motion Sensor g3 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG3MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g3_move_energy");
    ///<summary>Bathroom Motion Sensor g3 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG3StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g3_still_energy");
    ///<summary>Bathroom Motion Sensor g4 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG4MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g4_move_energy");
    ///<summary>Bathroom Motion Sensor g4 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG4StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g4_still_energy");
    ///<summary>Bathroom Motion Sensor g5 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG5MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g5_move_energy");
    ///<summary>Bathroom Motion Sensor g5 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG5StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g5_still_energy");
    ///<summary>Bathroom Motion Sensor g6 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG6MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g6_move_energy");
    ///<summary>Bathroom Motion Sensor g6 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG6StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g6_still_energy");
    ///<summary>Bathroom Motion Sensor g7 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG7MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g7_move_energy");
    ///<summary>Bathroom Motion Sensor g7 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG7StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g7_still_energy");
    ///<summary>Bathroom Motion Sensor g8 move energy</summary>
    public NumericSensorEntity BathroomMotionSensorG8MoveEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g8_move_energy");
    ///<summary>Bathroom Motion Sensor g8 still energy</summary>
    public NumericSensorEntity BathroomMotionSensorG8StillEnergy => new(_haContext, "sensor.bathroom_motion_sensor_g8_still_energy");
    ///<summary>Bathroom Motion Sensor Occupancy Timeout</summary>
    public NumericSensorEntity BathroomMotionSensorOccupancyTimeout => new(_haContext, "sensor.bathroom_motion_sensor_occupancy_timeout");
    ///<summary>Bathroom Motion Sensor Uptime Sensor</summary>
    public NumericSensorEntity BathroomMotionSensorUptimeSensor => new(_haContext, "sensor.bathroom_motion_sensor_uptime_sensor");
    ///<summary>Battery (Rechargable)</summary>
    public NumericSensorEntity BatteryRechargable => new(_haContext, "sensor.battery_rechargable");
    ///<summary>Bedroom Motion Sensor Free Mem</summary>
    public NumericSensorEntity BedroomMotionSensorFreeMem => new(_haContext, "sensor.bedroom_motion_sensor_free_mem");
    ///<summary>Bedroom Motion Sensor g0 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG0MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g0_move_energy");
    ///<summary>Bedroom Motion Sensor g0 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG0StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g0_still_energy");
    ///<summary>Bedroom Motion Sensor g1 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG1MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g1_move_energy");
    ///<summary>Bedroom Motion Sensor g1 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG1StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g1_still_energy");
    ///<summary>Bedroom Motion Sensor g2 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG2MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g2_move_energy");
    ///<summary>Bedroom Motion Sensor g2 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG2StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g2_still_energy");
    ///<summary>Bedroom Motion Sensor g3 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG3MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g3_move_energy");
    ///<summary>Bedroom Motion Sensor g3 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG3StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g3_still_energy");
    ///<summary>Bedroom Motion Sensor g4 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG4MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g4_move_energy");
    ///<summary>Bedroom Motion Sensor g4 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG4StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g4_still_energy");
    ///<summary>Bedroom Motion Sensor g5 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG5MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g5_move_energy");
    ///<summary>Bedroom Motion Sensor g5 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG5StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g5_still_energy");
    ///<summary>Bedroom Motion Sensor g6 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG6MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g6_move_energy");
    ///<summary>Bedroom Motion Sensor g6 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG6StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g6_still_energy");
    ///<summary>Bedroom Motion Sensor g7 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG7MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g7_move_energy");
    ///<summary>Bedroom Motion Sensor g7 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG7StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g7_still_energy");
    ///<summary>Bedroom Motion Sensor g8 move energy</summary>
    public NumericSensorEntity BedroomMotionSensorG8MoveEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g8_move_energy");
    ///<summary>Bedroom Motion Sensor g8 still energy</summary>
    public NumericSensorEntity BedroomMotionSensorG8StillEnergy => new(_haContext, "sensor.bedroom_motion_sensor_g8_still_energy");
    ///<summary>Bedroom Motion Sensor Occupancy Timeout</summary>
    public NumericSensorEntity BedroomMotionSensorOccupancyTimeout => new(_haContext, "sensor.bedroom_motion_sensor_occupancy_timeout");
    ///<summary>Bedroom Motion Sensor Uptime</summary>
    public NumericSensorEntity BedroomMotionSensorUptime => new(_haContext, "sensor.bedroom_motion_sensor_uptime");
    ///<summary>Bedroom Motion Sensor Uptime Sensor</summary>
    public NumericSensorEntity BedroomMotionSensorUptimeSensor => new(_haContext, "sensor.bedroom_motion_sensor_uptime_sensor");
    ///<summary>Bedroom Motion Sensor Xiaomi Mi Scale Impedance</summary>
    public NumericSensorEntity BedroomMotionSensorXiaomiMiScaleImpedance => new(_haContext, "sensor.bedroom_motion_sensor_xiaomi_mi_scale_impedance");
    ///<summary>Bedroom Motion Sensor Xiaomi Mi Scale Weight</summary>
    public NumericSensorEntity BedroomMotionSensorXiaomiMiScaleWeight => new(_haContext, "sensor.bedroom_motion_sensor_xiaomi_mi_scale_weight");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Schedule Remaining Time</summary>
    public NumericSensorEntity CareliSg593061393Maf05aAppointTimeLeftP38 => new(_haContext, "sensor.careli_sg_593061393_maf05a_appoint_time_left_p_3_8");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L  Air Fryer Time Remaining</summary>
    public NumericSensorEntity CareliSg593061393Maf05aLeftTimeP25 => new(_haContext, "sensor.careli_sg_593061393_maf05a_left_time_p_2_5");
    ///<summary>Contact Sensor Battery</summary>
    public NumericSensorEntity ContactSensorBattery => new(_haContext, "sensor.contact_sensor_battery");
    ///<summary>DANIEL-PC Free disk space C:</summary>
    public NumericSensorEntity DanielPcFreeDiskSpaceC => new(_haContext, "sensor.daniel_pc_free_disk_space_c");
    ///<summary>DANIEL-PC Free memory</summary>
    public NumericSensorEntity DanielPcFreeMemory => new(_haContext, "sensor.daniel_pc_free_memory");
    ///<summary>DANIEL-PC_hass-agent DANIEL-PC_hass-agent_cpuload</summary>
    public NumericSensorEntity DanielPcHassAgentDanielPcHassAgentCpuload => new(_haContext, "sensor.daniel_pc_hass_agent_daniel_pc_hass_agent_cpuload");
    ///<summary>DANIEL-PC Temperature</summary>
    public NumericSensorEntity DanielPcTemperature => new(_haContext, "sensor.daniel_pc_temperature");
    ///<summary>Delta Monthly Energy Reading</summary>
    public NumericSensorEntity DeltaMonthlyEnergyReading => new(_haContext, "sensor.delta_monthly_energy_reading");
    ///<summary>Desk Motion Sensor g0 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG0MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g0_move_energy");
    ///<summary>Desk Motion Sensor g0 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG0StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g0_still_energy");
    ///<summary>Desk Motion Sensor g1 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG1MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g1_move_energy");
    ///<summary>Desk Motion Sensor g1 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG1StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g1_still_energy");
    ///<summary>Desk Motion Sensor g2 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG2MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g2_move_energy");
    ///<summary>Desk Motion Sensor g2 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG2StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g2_still_energy");
    ///<summary>Desk Motion Sensor g3 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG3MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g3_move_energy");
    ///<summary>Desk Motion Sensor g3 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG3StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g3_still_energy");
    ///<summary>Desk Motion Sensor g4 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG4MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g4_move_energy");
    ///<summary>Desk Motion Sensor g4 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG4StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g4_still_energy");
    ///<summary>Desk Motion Sensor g5 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG5MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g5_move_energy");
    ///<summary>Desk Motion Sensor g5 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG5StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g5_still_energy");
    ///<summary>Desk Motion Sensor g6 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG6MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g6_move_energy");
    ///<summary>Desk Motion Sensor g6 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG6StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g6_still_energy");
    ///<summary>Desk Motion Sensor g7 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG7MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g7_move_energy");
    ///<summary>Desk Motion Sensor g7 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG7StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g7_still_energy");
    ///<summary>Desk Motion Sensor g8 move energy</summary>
    public NumericSensorEntity DeskMotionSensorG8MoveEnergy => new(_haContext, "sensor.desk_motion_sensor_g8_move_energy");
    ///<summary>Desk Motion Sensor g8 still energy</summary>
    public NumericSensorEntity DeskMotionSensorG8StillEnergy => new(_haContext, "sensor.desk_motion_sensor_g8_still_energy");
    ///<summary>Desk Motion Sensor Occupancy Timeout</summary>
    public NumericSensorEntity DeskMotionSensorOccupancyTimeout => new(_haContext, "sensor.desk_motion_sensor_occupancy_timeout");
    ///<summary>Desk Motion Sensor Uptime Sensor</summary>
    public NumericSensorEntity DeskMotionSensorUptimeSensor => new(_haContext, "sensor.desk_motion_sensor_uptime_sensor");
    ///<summary>Energy (Dell Laptop)</summary>
    public NumericSensorEntity EnergyAthenaSLaptop => new(_haContext, "sensor.energy_athena_s_laptop");
    ///<summary>Energy (Dell Monitor)</summary>
    public NumericSensorEntity EnergyAthenaSMonitor => new(_haContext, "sensor.energy_athena_s_monitor");
    ///<summary>Energy (Bathroom Lights)</summary>
    public NumericSensorEntity EnergyBathroomLights => new(_haContext, "sensor.energy_bathroom_lights");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyBathroomLightsCost => new(_haContext, "sensor.energy_bathroom_lights_cost");
    ///<summary>Energy (Bed Fan)</summary>
    public NumericSensorEntity EnergyBedFan => new(_haContext, "sensor.energy_bed_fan");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyBedFanCost => new(_haContext, "sensor.energy_bed_fan_cost");
    ///<summary>Energy (Bedlights)</summary>
    public NumericSensorEntity EnergyBedlights => new(_haContext, "sensor.energy_bedlights");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyBedlightsCost => new(_haContext, "sensor.energy_bedlights_cost");
    ///<summary>Energy (Ceiling Fan)</summary>
    public NumericSensorEntity EnergyCeilingFan => new(_haContext, "sensor.energy_ceiling_fan");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyCeilingFanCost => new(_haContext, "sensor.energy_ceiling_fan_cost");
    ///<summary>Energy (Fridge)</summary>
    public NumericSensorEntity EnergyConsumption => new(_haContext, "sensor.energy_consumption");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyConsumptionCost => new(_haContext, "sensor.energy_consumption_cost");
    ///<summary>Energy Cost</summary>
    public NumericSensorEntity EnergyCost => new(_haContext, "sensor.energy_cost");
    ///<summary>Energy (Kitchen)</summary>
    public NumericSensorEntity EnergyKitchen => new(_haContext, "sensor.energy_kitchen");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyKitchenCost => new(_haContext, "sensor.energy_kitchen_cost");
    ///<summary>Energy (LG TV)</summary>
    public NumericSensorEntity EnergyLgTv => new(_haContext, "sensor.energy_lg_tv");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyLgTvCost => new(_haContext, "sensor.energy_lg_tv_cost");
    ///<summary>Energy Meter Reading</summary>
    public NumericSensorEntity EnergyMeterReading => new(_haContext, "sensor.energy_meter_reading");
    ///<summary>Energy (Pantry Lights)</summary>
    public NumericSensorEntity EnergyPantryLights => new(_haContext, "sensor.energy_pantry_lights");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyPantryLightsCost => new(_haContext, "sensor.energy_pantry_lights_cost");
    ///<summary>Energy (PC)</summary>
    public NumericSensorEntity EnergyPc => new(_haContext, "sensor.energy_pc");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyPcCost2 => new(_haContext, "sensor.energy_pc_cost_2");
    ///<summary>Energy (Projector)</summary>
    public NumericSensorEntity EnergyProjector => new(_haContext, "sensor.energy_projector");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyProjectorCost => new(_haContext, "sensor.energy_projector_cost");
    ///<summary>Energy (Rice Cooker)</summary>
    public NumericSensorEntity EnergyRiceCooker => new(_haContext, "sensor.energy_rice_cooker");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyRiceCookerCost => new(_haContext, "sensor.energy_rice_cooker_cost");
    ///<summary>Energy (Sala Fan)</summary>
    public NumericSensorEntity EnergySalaFan => new(_haContext, "sensor.energy_sala_fan");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergySalaFanCost => new(_haContext, "sensor.energy_sala_fan_cost");
    ///<summary>Energy (Sala Lights)</summary>
    public NumericSensorEntity EnergySalaLights1 => new(_haContext, "sensor.energy_sala_lights_1");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergySalaLights1Cost => new(_haContext, "sensor.energy_sala_lights_1_cost");
    ///<summary>Energy (TCL TV++)</summary>
    public NumericSensorEntity EnergyTclTv => new(_haContext, "sensor.energy_tcl_tv");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyTclTvCost => new(_haContext, "sensor.energy_tcl_tv_cost");
    ///<summary>Energy Total</summary>
    public NumericSensorEntity EnergyTotal => new(_haContext, "sensor.energy_total");
    ///<summary>Energy (Miscellaneous)</summary>
    public NumericSensorEntity EnergyUnaccountedEstimate3kw => new(_haContext, "sensor.energy_unaccounted_estimate_3kw");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyUnaccountedEstimate3kwCost => new(_haContext, "sensor.energy_unaccounted_estimate_3kw_cost");
    ///<summary>Energy (Washing Machine)</summary>
    public NumericSensorEntity EnergyWashingMachine => new(_haContext, "sensor.energy_washing_machine");
    ///<summary>Energy (Water Dispenser)</summary>
    public NumericSensorEntity EnergyWaterDispenser => new(_haContext, "sensor.energy_water_dispenser");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyWaterDispenserCost2 => new(_haContext, "sensor.energy_water_dispenser_cost_2");
    ///<summary>Energy (Work Laptop)</summary>
    public NumericSensorEntity EnergyWorkLaptop => new(_haContext, "sensor.energy_work_laptop");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity EnergyWorkLaptopCost => new(_haContext, "sensor.energy_work_laptop_cost");
    ///<summary>Estimated Monthly Energy Reading</summary>
    public NumericSensorEntity EstimatedMonthlyEnergyReading => new(_haContext, "sensor.estimated_monthly_energy_reading");
    ///<summary>Front Door Battery</summary>
    public NumericSensorEntity FrontDoorBattery => new(_haContext, "sensor.front_door_battery");
    ///<summary>Front Door Battery</summary>
    public NumericSensorEntity FrontDoorBattery2 => new(_haContext, "sensor.front_door_battery_2");
    ///<summary>Front Door Battery voltage</summary>
    public NumericSensorEntity FrontDoorBatteryVoltage => new(_haContext, "sensor.front_door_battery_voltage");
    ///<summary>Repairs Ignored</summary>
    public NumericSensorEntity IgnoredIssues => new(_haContext, "sensor.ignored_issues");
    ///<summary>iPad Battery Level</summary>
    public NumericSensorEntity IpadBatteryLevel => new(_haContext, "sensor.ipad_battery_level");
    ///<summary>iPad Storage</summary>
    public NumericSensorEntity IpadStorage => new(_haContext, "sensor.ipad_storage");
    ///<summary>iPhone Average Active Pace</summary>
    public NumericSensorEntity IphoneAverageActivePace => new(_haContext, "sensor.iphone_average_active_pace");
    ///<summary>iPhone Battery Level</summary>
    public NumericSensorEntity IphoneBatteryLevel => new(_haContext, "sensor.iphone_battery_level");
    ///<summary>iPhone Distance</summary>
    public NumericSensorEntity IphoneDistance => new(_haContext, "sensor.iphone_distance");
    ///<summary>iPhone Floors Ascended</summary>
    public NumericSensorEntity IphoneFloorsAscended => new(_haContext, "sensor.iphone_floors_ascended");
    ///<summary>iPhone Floors Descended</summary>
    public NumericSensorEntity IphoneFloorsDescended => new(_haContext, "sensor.iphone_floors_descended");
    ///<summary>iPhone Steps</summary>
    public NumericSensorEntity IphoneSteps => new(_haContext, "sensor.iphone_steps");
    ///<summary>iPhone Storage</summary>
    public NumericSensorEntity IphoneStorage => new(_haContext, "sensor.iphone_storage");
    ///<summary>Repairs Total</summary>
    public NumericSensorEntity Issues => new(_haContext, "sensor.issues");
    ///<summary>Kitchen Motion Sensor g0 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG0MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g0_move_energy");
    ///<summary>Kitchen Motion Sensor g0 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG0StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g0_still_energy");
    ///<summary>Kitchen Motion Sensor g1 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG1MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g1_move_energy");
    ///<summary>Kitchen Motion Sensor g1 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG1StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g1_still_energy");
    ///<summary>Kitchen Motion Sensor g2 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG2MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g2_move_energy");
    ///<summary>Kitchen Motion Sensor g2 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG2StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g2_still_energy");
    ///<summary>Kitchen Motion Sensor g3 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG3MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g3_move_energy");
    ///<summary>Kitchen Motion Sensor g3 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG3StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g3_still_energy");
    ///<summary>Kitchen Motion Sensor g4 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG4MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g4_move_energy");
    ///<summary>Kitchen Motion Sensor g4 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG4StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g4_still_energy");
    ///<summary>Kitchen Motion Sensor g5 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG5MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g5_move_energy");
    ///<summary>Kitchen Motion Sensor g5 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG5StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g5_still_energy");
    ///<summary>Kitchen Motion Sensor g6 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG6MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g6_move_energy");
    ///<summary>Kitchen Motion Sensor g6 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG6StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g6_still_energy");
    ///<summary>Kitchen Motion Sensor g7 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG7MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g7_move_energy");
    ///<summary>Kitchen Motion Sensor g7 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG7StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g7_still_energy");
    ///<summary>Kitchen Motion Sensor g8 move energy</summary>
    public NumericSensorEntity KitchenMotionSensorG8MoveEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g8_move_energy");
    ///<summary>Kitchen Motion Sensor g8 still energy</summary>
    public NumericSensorEntity KitchenMotionSensorG8StillEnergy => new(_haContext, "sensor.kitchen_motion_sensor_g8_still_energy");
    ///<summary>Kitchen Motion Sensor Occupancy Timeout</summary>
    public NumericSensorEntity KitchenMotionSensorOccupancyTimeout => new(_haContext, "sensor.kitchen_motion_sensor_occupancy_timeout");
    ///<summary>Kitchen Motion Sensor Uptime Sensor</summary>
    public NumericSensorEntity KitchenMotionSensorUptimeSensor => new(_haContext, "sensor.kitchen_motion_sensor_uptime_sensor");
    ///<summary>Mipad Charger Power</summary>
    public NumericSensorEntity LaptopChargerPower => new(_haContext, "sensor.laptop_charger_power");
    ///<summary>Mi Body Composition Scale (B3E1) Impedance</summary>
    public NumericSensorEntity MiBodyCompositionScaleB3e1Impedance => new(_haContext, "sensor.mi_body_composition_scale_b3e1_impedance");
    ///<summary>Mi Body Composition Scale (B3E1) Mass</summary>
    public NumericSensorEntity MiBodyCompositionScaleB3e1Mass => new(_haContext, "sensor.mi_body_composition_scale_b3e1_mass");
    ///<summary>Mi Body Composition Scale (B3E1) Mass Non Stabilized</summary>
    public NumericSensorEntity MiBodyCompositionScaleB3e1MassNonStabilized => new(_haContext, "sensor.mi_body_composition_scale_b3e1_mass_non_stabilized");
    ///<summary>bermuda_8c_ce_fd_a9_79_a6 Distance</summary>
    public NumericSensorEntity MiWatchLite79a6Distance => new(_haContext, "sensor.mi_watch_lite_79a6_distance");
    ///<summary>MiPad Browser height</summary>
    public NumericSensorEntity MipadBrowserHeight => new(_haContext, "sensor.mipad_browser_height");
    ///<summary>MiPad Browser width</summary>
    public NumericSensorEntity MipadBrowserWidth => new(_haContext, "sensor.mipad_browser_width");
    ///<summary>Pantry Motion Sensor g0 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG0MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g0_move_energy");
    ///<summary>Pantry Motion Sensor g0 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG0StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g0_still_energy");
    ///<summary>Pantry Motion Sensor g1 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG1MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g1_move_energy");
    ///<summary>Pantry Motion Sensor g1 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG1StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g1_still_energy");
    ///<summary>Pantry Motion Sensor g2 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG2MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g2_move_energy");
    ///<summary>Pantry Motion Sensor g2 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG2StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g2_still_energy");
    ///<summary>Pantry Motion Sensor g3 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG3MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g3_move_energy");
    ///<summary>Pantry Motion Sensor g3 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG3StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g3_still_energy");
    ///<summary>Pantry Motion Sensor g4 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG4MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g4_move_energy");
    ///<summary>Pantry Motion Sensor g4 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG4StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g4_still_energy");
    ///<summary>Pantry Motion Sensor g5 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG5MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g5_move_energy");
    ///<summary>Pantry Motion Sensor g5 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG5StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g5_still_energy");
    ///<summary>Pantry Motion Sensor g6 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG6MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g6_move_energy");
    ///<summary>Pantry Motion Sensor g6 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG6StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g6_still_energy");
    ///<summary>Pantry Motion Sensor g7 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG7MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g7_move_energy");
    ///<summary>Pantry Motion Sensor g7 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG7StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g7_still_energy");
    ///<summary>Pantry Motion Sensor g8 move energy</summary>
    public NumericSensorEntity PantryMotionSensorG8MoveEnergy => new(_haContext, "sensor.pantry_motion_sensor_g8_move_energy");
    ///<summary>Pantry Motion Sensor g8 still energy</summary>
    public NumericSensorEntity PantryMotionSensorG8StillEnergy => new(_haContext, "sensor.pantry_motion_sensor_g8_still_energy");
    ///<summary>Pantry Motion Sensor Occupancy Timeout</summary>
    public NumericSensorEntity PantryMotionSensorOccupancyTimeout => new(_haContext, "sensor.pantry_motion_sensor_occupancy_timeout");
    ///<summary>Pantry Motion Sensor Uptime Sensor</summary>
    public NumericSensorEntity PantryMotionSensorUptimeSensor => new(_haContext, "sensor.pantry_motion_sensor_uptime_sensor");
    ///<summary>POCO F4 GT Bluetooth connection</summary>
    public NumericSensorEntity PocoF4GtBluetoothConnection => new(_haContext, "sensor.poco_f4_gt_bluetooth_connection");
    ///<summary>POCO F4 GT Sleep confidence</summary>
    public NumericSensorEntity PocoF4GtSleepConfidence => new(_haContext, "sensor.poco_f4_gt_sleep_confidence");
    ///<summary>Rice Cooker Current</summary>
    public NumericSensorEntity RiceCookerCurrent => new(_haContext, "sensor.rice_cooker_current");
    ///<summary>Rice Cooker Power</summary>
    public NumericSensorEntity RiceCookerPower => new(_haContext, "sensor.rice_cooker_power");
    ///<summary>Rice Cooker Voltage</summary>
    public NumericSensorEntity RiceCookerVoltage => new(_haContext, "sensor.rice_cooker_voltage");
    ///<summary>Rice Cooker Wattage</summary>
    public NumericSensorEntity RiceCookerWattage => new(_haContext, "sensor.rice_cooker_wattage");
    ///<summary>Sala Motion Sensor g0 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG0MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g0_move_energy");
    ///<summary>Sala Motion Sensor g0 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG0StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g0_still_energy");
    ///<summary>Sala Motion Sensor g1 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG1MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g1_move_energy");
    ///<summary>Sala Motion Sensor g1 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG1StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g1_still_energy");
    ///<summary>Sala Motion Sensor g2 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG2MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g2_move_energy");
    ///<summary>Sala Motion Sensor g2 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG2StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g2_still_energy");
    ///<summary>Sala Motion Sensor g3 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG3MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g3_move_energy");
    ///<summary>Sala Motion Sensor g3 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG3StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g3_still_energy");
    ///<summary>Sala Motion Sensor g4 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG4MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g4_move_energy");
    ///<summary>Sala Motion Sensor g4 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG4StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g4_still_energy");
    ///<summary>Sala Motion Sensor g5 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG5MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g5_move_energy");
    ///<summary>Sala Motion Sensor g5 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG5StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g5_still_energy");
    ///<summary>Sala Motion Sensor g6 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG6MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g6_move_energy");
    ///<summary>Sala Motion Sensor g6 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG6StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g6_still_energy");
    ///<summary>Sala Motion Sensor g7 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG7MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g7_move_energy");
    ///<summary>Sala Motion Sensor g7 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG7StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g7_still_energy");
    ///<summary>Sala Motion Sensor g8 move energy</summary>
    public NumericSensorEntity SalaMotionSensorG8MoveEnergy => new(_haContext, "sensor.sala_motion_sensor_g8_move_energy");
    ///<summary>Sala Motion Sensor g8 still energy</summary>
    public NumericSensorEntity SalaMotionSensorG8StillEnergy => new(_haContext, "sensor.sala_motion_sensor_g8_still_energy");
    ///<summary>Sala Motion Sensor Occupancy Timeout</summary>
    public NumericSensorEntity SalaMotionSensorOccupancyTimeout => new(_haContext, "sensor.sala_motion_sensor_occupancy_timeout");
    ///<summary>Sala Motion Sensor Uptime Sensor</summary>
    public NumericSensorEntity SalaMotionSensorUptimeSensor => new(_haContext, "sensor.sala_motion_sensor_uptime_sensor");
    ///<summary>Smart Plug 1 Sonoff S31 Power</summary>
    public NumericSensorEntity SmartPlug1SonoffS31Power => new(_haContext, "sensor.smart_plug_1_sonoff_s31_power");
    ///<summary>Smart Plug 2 Sonoff S31 Energy</summary>
    public NumericSensorEntity SmartPlug2SonoffS31Energy => new(_haContext, "sensor.smart_plug_2_sonoff_s31_energy");
    ///<summary>Smart Plug 2 Sonoff S31 Power</summary>
    public NumericSensorEntity SmartPlug2SonoffS31Power => new(_haContext, "sensor.smart_plug_2_sonoff_s31_power");
    ///<summary>Smart Plug 3 Sonoff S31 Power</summary>
    public NumericSensorEntity SmartPlug3SonoffS31Power => new(_haContext, "sensor.smart_plug_3_sonoff_s31_power");
    ///<summary>Smart Plug 4 Sonoff S31 Current</summary>
    public NumericSensorEntity SmartPlug4SonoffS31Current => new(_haContext, "sensor.smart_plug_4_sonoff_s31_current");
    ///<summary>Smart Plug 4 Sonoff S31 Power</summary>
    public NumericSensorEntity SmartPlug4SonoffS31Power => new(_haContext, "sensor.smart_plug_4_sonoff_s31_power");
    ///<summary>Energy (AC)</summary>
    public NumericSensorEntity SmartPlugPowerMeter => new(_haContext, "sensor.smart_plug_power_meter");
    ///<summary>sensor Cost</summary>
    public NumericSensorEntity SmartPlugPowerMeterCost => new(_haContext, "sensor.smart_plug_power_meter_cost");
    ///<summary>S31 Plug 1 (Fridge) Energy</summary>
    public NumericSensorEntity Sonoff1002163cb5Energy => new(_haContext, "sensor.sonoff_1002163cb5_energy");
    ///<summary>S31 Plug 1 (Fridge) Power</summary>
    public NumericSensorEntity Sonoff1002163cb5Power => new(_haContext, "sensor.sonoff_1002163cb5_power");
    ///<summary>SpeedTest Download</summary>
    public NumericSensorEntity SpeedtestDownload => new(_haContext, "sensor.speedtest_download");
    ///<summary>SpeedTest Ping</summary>
    public NumericSensorEntity SpeedtestPing => new(_haContext, "sensor.speedtest_ping");
    ///<summary>SpeedTest Upload</summary>
    public NumericSensorEntity SpeedtestUpload => new(_haContext, "sensor.speedtest_upload");
    ///<summary>Sun Solar azimuth</summary>
    public NumericSensorEntity SunSolarAzimuth => new(_haContext, "sensor.sun_solar_azimuth");
    ///<summary>Sun Solar elevation</summary>
    public NumericSensorEntity SunSolarElevation => new(_haContext, "sensor.sun_solar_elevation");
    ///<summary>System Monitor Memory usage</summary>
    public NumericSensorEntity SystemMonitorMemoryUsage => new(_haContext, "sensor.system_monitor_memory_usage");
    ///<summary>System Monitor Processor temperature</summary>
    public NumericSensorEntity SystemMonitorProcessorTemperature => new(_haContext, "sensor.system_monitor_processor_temperature");
    ///<summary>System Monitor Processor use</summary>
    public NumericSensorEntity SystemMonitorProcessorUse => new(_haContext, "sensor.system_monitor_processor_use");
    ///<summary>Temperature (Bedroom)</summary>
    public NumericSensorEntity TemperatureBedroom => new(_haContext, "sensor.temperature_bedroom");
    ///<summary>ThinkpadT14 Charge Remaining Percentage</summary>
    public NumericSensorEntity Thinkpadt14BatteryChargeRemainingPercentage => new(_haContext, "sensor.thinkpadt14_battery_charge_remaining_percentage");
    ///<summary>ThinkpadT14 currentvolume</summary>
    public NumericSensorEntity Thinkpadt14Currentvolume => new(_haContext, "sensor.thinkpadt14_currentvolume");
    ///<summary>watchman_missing_entities</summary>
    public NumericSensorEntity WatchmanMissingEntities => new(_haContext, "sensor.watchman_missing_entities");
    ///<summary>watchman_missing_services</summary>
    public NumericSensorEntity WatchmanMissingServices => new(_haContext, "sensor.watchman_missing_services");
    ///<summary>Water Dispenser Power</summary>
    public NumericSensorEntity WaterDispenserPower => new(_haContext, "sensor.water_dispenser_power");
    ///<summary>Wattage (Sala Lights Group)</summary>
    public NumericSensorEntity Wattage => new(_haContext, "sensor.wattage");
    ///<summary>Wattage (Bedlights)</summary>
    public NumericSensorEntity Wattage3 => new(_haContext, "sensor.wattage_3");
    ///<summary>Wattage (Pantry Lights)</summary>
    public NumericSensorEntity Wattage4 => new(_haContext, "sensor.wattage_4");
    ///<summary>Wattage (Bathroom Lights)</summary>
    public NumericSensorEntity Wattage5 => new(_haContext, "sensor.wattage_5");
    ///<summary>Wattage (Ceiling Fan)</summary>
    public NumericSensorEntity Wattage6 => new(_haContext, "sensor.wattage_6");
    ///<summary>Wattage (TCL TV++)</summary>
    public NumericSensorEntity Wattage8 => new(_haContext, "sensor.wattage_8");
    ///<summary>Wattage (Athena&apos;s Laptop)</summary>
    public NumericSensorEntity WattageAthenaSLaptop => new(_haContext, "sensor.wattage_athena_s_laptop");
    ///<summary>Wattage (Athena&apos;s Monitor)</summary>
    public NumericSensorEntity WattageAthenaSMonitor => new(_haContext, "sensor.wattage_athena_s_monitor");
    ///<summary>Wattage (Bed Fan)</summary>
    public NumericSensorEntity WattageBedFan => new(_haContext, "sensor.wattage_bed_fan");
    ///<summary>Wattage (LG TV)</summary>
    public NumericSensorEntity WattageLgTv => new(_haContext, "sensor.wattage_lg_tv");
    ///<summary>Wattage (Projector)</summary>
    public NumericSensorEntity WattageProjector => new(_haContext, "sensor.wattage_projector");
    ///<summary>Wattage (Sala Fan)</summary>
    public NumericSensorEntity WattageSalaFan => new(_haContext, "sensor.wattage_sala_fan");
    ///<summary>Wattage (Unaccounted Estimate)</summary>
    public NumericSensorEntity WattageUnaccountedEstimate => new(_haContext, "sensor.wattage_unaccounted_estimate");
    ///<summary>Wattage (Work Laptop)</summary>
    public NumericSensorEntity WattageWorkLaptop => new(_haContext, "sensor.wattage_work_laptop");
    ///<summary>WiFi Temperature &amp; Humidity Battery</summary>
    public NumericSensorEntity WifiTemperatureHumidityBattery => new(_haContext, "sensor.wifi_temperature_humidity_battery");
    ///<summary>WiFi Temperature &amp; Humidity Humidity</summary>
    public NumericSensorEntity WifiTemperatureHumidityHumidity => new(_haContext, "sensor.wifi_temperature_humidity_humidity");
    ///<summary>WiFi Temperature &amp; Humidity Temperature</summary>
    public NumericSensorEntity WifiTemperatureHumidityTemperature => new(_haContext, "sensor.wifi_temperature_humidity_temperature");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Filter Filter Left Time</summary>
    public NumericSensorEntity XiaomiSg753990712Cpa4FilterLeftTimeP44 => new(_haContext, "sensor.xiaomi_sg_753990712_cpa4_filter_left_time_p_4_4");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Filter Filter Life Level</summary>
    public NumericSensorEntity XiaomiSg753990712Cpa4FilterLifeLevelP41 => new(_haContext, "sensor.xiaomi_sg_753990712_cpa4_filter_life_level_p_4_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Filter Filter Used Time</summary>
    public NumericSensorEntity XiaomiSg753990712Cpa4FilterUsedTimeP43 => new(_haContext, "sensor.xiaomi_sg_753990712_cpa4_filter_used_time_p_4_3");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Environment PM2.5</summary>
    public NumericSensorEntity XiaomiSg753990712Cpa4Pm25DensityP34 => new(_haContext, "sensor.xiaomi_sg_753990712_cpa4_pm2_5_density_p_3_4");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all sun entities currently registered (at runtime) in Home Assistant as SunEntity</summary>
    public IEnumerable<SunEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("sun.")).Select(e => new SunEntity(e));
    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all switch entities currently registered (at runtime) in Home Assistant as SwitchEntity</summary>
    public IEnumerable<SwitchEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("switch.")).Select(e => new SwitchEntity(e));
    ///<summary>65C755 Mute</summary>
    public SwitchEntity _65c755Mute => new(_haContext, "switch.65c755_mute");
    ///<summary>AC Automation</summary>
    public SwitchEntity AcAutomation => new(_haContext, "switch.ac_automation");
    ///<summary>Fresh air</summary>
    public SwitchEntity AcFreshAir => new(_haContext, "switch.ac_fresh_air");
    ///<summary>Panel light</summary>
    public SwitchEntity AcPanelLight => new(_haContext, "switch.ac_panel_light");
    ///<summary>Quiet mode</summary>
    public SwitchEntity AcQuiet => new(_haContext, "switch.ac_quiet");
    ///<summary>AC Swing Mode</summary>
    public SwitchEntity AcSwingMode => new(_haContext, "switch.ac_swing_mode");
    ///<summary>Xtra fan</summary>
    public SwitchEntity AcXfan => new(_haContext, "switch.ac_xfan");
    ///<summary>Bathroom Lights Auto-update enabled</summary>
    public SwitchEntity BathroomLightsAutoUpdateEnabled => new(_haContext, "switch.bathroom_lights_auto_update_enabled");
    ///<summary>Bathroom Motion Sensor</summary>
    public SwitchEntity BathroomMotionSensor => new(_haContext, "switch.bathroom_motion_sensor");
    ///<summary>Bathroom Motion Sensor Auto Calibrate</summary>
    public SwitchEntity BathroomMotionSensorAutoCalibrate => new(_haContext, "switch.bathroom_motion_sensor_auto_calibrate");
    ///<summary>Bathroom Motion Sensor control Bluetooth</summary>
    public SwitchEntity BathroomMotionSensorControlBluetooth => new(_haContext, "switch.bathroom_motion_sensor_control_bluetooth");
    ///<summary>Bathroom Motion Sensor engineering mode</summary>
    public SwitchEntity BathroomMotionSensorEngineeringMode => new(_haContext, "switch.bathroom_motion_sensor_engineering_mode");
    ///<summary>Bed Lights  Auto-update enabled</summary>
    public SwitchEntity BedLightsAutoUpdateEnabled => new(_haContext, "switch.bed_lights_auto_update_enabled");
    ///<summary>Bedroom Fan Automation</summary>
    public SwitchEntity BedroomFanAutomation => new(_haContext, "switch.bedroom_fan_automation");
    ///<summary>Bedroom Motion Sensor</summary>
    public SwitchEntity BedroomMotionSensor => new(_haContext, "switch.bedroom_motion_sensor");
    ///<summary>Bedroom Motion Sensor Arduino OTA</summary>
    public SwitchEntity BedroomMotionSensorArduinoOta => new(_haContext, "switch.bedroom_motion_sensor_arduino_ota");
    ///<summary>Bedroom Motion Sensor Auto Calibrate</summary>
    public SwitchEntity BedroomMotionSensorAutoCalibrate => new(_haContext, "switch.bedroom_motion_sensor_auto_calibrate");
    ///<summary>Bedroom Motion Sensor Auto Update</summary>
    public SwitchEntity BedroomMotionSensorAutoUpdate => new(_haContext, "switch.bedroom_motion_sensor_auto_update");
    ///<summary>Bedroom Motion Sensor control Bluetooth</summary>
    public SwitchEntity BedroomMotionSensorControlBluetooth => new(_haContext, "switch.bedroom_motion_sensor_control_bluetooth");
    ///<summary>Bedroom Motion Sensor engineering mode</summary>
    public SwitchEntity BedroomMotionSensorEngineeringMode => new(_haContext, "switch.bedroom_motion_sensor_engineering_mode");
    ///<summary>Bedroom Motion Sensor Prerelease</summary>
    public SwitchEntity BedroomMotionSensorPrerelease => new(_haContext, "switch.bedroom_motion_sensor_prerelease");
    ///<summary>Ceiling Fan</summary>
    public SwitchEntity CeilingFan => new(_haContext, "switch.ceiling_fan");
    ///<summary>Ceiling Fan Auto-off enabled</summary>
    public SwitchEntity CeilingFanAutoOffEnabled => new(_haContext, "switch.ceiling_fan_auto_off_enabled");
    ///<summary>Ceiling Fan Auto-update enabled</summary>
    public SwitchEntity CeilingFanAutoUpdateEnabled => new(_haContext, "switch.ceiling_fan_auto_update_enabled");
    ///<summary>Ceiling Fan LED</summary>
    public SwitchEntity CeilingFanLed => new(_haContext, "switch.ceiling_fan_led");
    ///<summary>Clean Air</summary>
    public SwitchEntity CleanAir => new(_haContext, "switch.clean_air");
    ///<summary>Home Assistant Cloud Alexa</summary>
    public SwitchEntity CloudAlexa => new(_haContext, "switch.cloud_alexa");
    ///<summary>Home Assistant Cloud Alexa state reporting</summary>
    public SwitchEntity CloudAlexaReportState => new(_haContext, "switch.cloud_alexa_report_state");
    ///<summary>Home Assistant Cloud Google Assistant</summary>
    public SwitchEntity CloudGoogle => new(_haContext, "switch.cloud_google");
    ///<summary>Home Assistant Cloud Google Assistant state reporting</summary>
    public SwitchEntity CloudGoogleReportState => new(_haContext, "switch.cloud_google_report_state");
    ///<summary>Home Assistant Cloud Remote</summary>
    public SwitchEntity CloudRemote => new(_haContext, "switch.cloud_remote");
    ///<summary>Controller RGB DF1C0D Remote access</summary>
    public SwitchEntity ControllerRgbDf1c0dRemoteAccess => new(_haContext, "switch.controller_rgb_df1c0d_remote_access");
    ///<summary>Cooking Automation</summary>
    public SwitchEntity CookingAutomation => new(_haContext, "switch.cooking_automation");
    ///<summary>Mi Pad Charger</summary>
    public SwitchEntity Cozylife2ac9 => new(_haContext, "switch.cozylife_2ac9");
    ///<summary>Exhaust Fan</summary>
    public SwitchEntity Cozylife955f => new(_haContext, "switch.cozylife_955f");
    ///<summary>Cozylife Switch Sala Stand Fan</summary>
    public SwitchEntity CozylifeB38e => new(_haContext, "switch.cozylife_b38e");
    ///<summary>Daniel-PC</summary>
    public SwitchEntity DanielPc => new(_haContext, "switch.daniel_pc");
    ///<summary>Desk Motion Sensor Auto Calibrate</summary>
    public SwitchEntity DeskMotionSensorAutoCalibrate => new(_haContext, "switch.desk_motion_sensor_auto_calibrate");
    ///<summary>Desk Motion Sensor control Bluetooth</summary>
    public SwitchEntity DeskMotionSensorControlBluetooth => new(_haContext, "switch.desk_motion_sensor_control_bluetooth");
    ///<summary>Desk Motion Sensor engineering mode</summary>
    public SwitchEntity DeskMotionSensorEngineeringMode => new(_haContext, "switch.desk_motion_sensor_engineering_mode");
    ///<summary>Display PC</summary>
    public SwitchEntity DisplayPc => new(_haContext, "switch.display_pc");
    ///<summary>Engineering Mode</summary>
    public SwitchEntity EngineeringMode => new(_haContext, "switch.engineering_mode");
    ///<summary>Flytrap</summary>
    public SwitchEntity Flytrap => new(_haContext, "switch.flytrap");
    ///<summary>Flytrap Auto-off enabled</summary>
    public SwitchEntity FlytrapAutoOffEnabled => new(_haContext, "switch.flytrap_auto_off_enabled");
    ///<summary>Flytrap Auto-update enabled</summary>
    public SwitchEntity FlytrapAutoUpdateEnabled => new(_haContext, "switch.flytrap_auto_update_enabled");
    ///<summary>Flytrap LED</summary>
    public SwitchEntity FlytrapLed => new(_haContext, "switch.flytrap_led");
    ///<summary>Gree A/C Pre-release</summary>
    public SwitchEntity GreeACPreRelease => new(_haContext, "switch.gree_a_c_pre_release");
    ///<summary>Induction</summary>
    public SwitchEntity Induction => new(_haContext, "switch.induction");
    ///<summary>Kitchen Motion Sensor</summary>
    public SwitchEntity KitchenMotionSensor => new(_haContext, "switch.kitchen_motion_sensor");
    ///<summary>Kitchen Motion Sensor Auto Calibrate</summary>
    public SwitchEntity KitchenMotionSensorAutoCalibrate => new(_haContext, "switch.kitchen_motion_sensor_auto_calibrate");
    ///<summary>Kitchen Motion Sensor control Bluetooth</summary>
    public SwitchEntity KitchenMotionSensorControlBluetooth => new(_haContext, "switch.kitchen_motion_sensor_control_bluetooth");
    ///<summary>Kitchen Motion Sensor engineering mode</summary>
    public SwitchEntity KitchenMotionSensorEngineeringMode => new(_haContext, "switch.kitchen_motion_sensor_engineering_mode");
    ///<summary>Laptop</summary>
    public SwitchEntity Laptop => new(_haContext, "switch.laptop");
    ///<summary>Laptop</summary>
    public SwitchEntity Laptop3 => new(_haContext, "switch.laptop_3");
    ///<summary>Mipad Charger Child lock</summary>
    public SwitchEntity LaptopChargerChildLock => new(_haContext, "switch.laptop_charger_child_lock");
    ///<summary>Lg Screen</summary>
    public SwitchEntity LgScreen => new(_haContext, "switch.lg_screen");
    ///<summary>LG Screen</summary>
    public SwitchEntity LgScreen1 => new(_haContext, "switch.lg_screen_1");
    ///<summary>LG Screensaver</summary>
    public SwitchEntity LgScreensaver => new(_haContext, "switch.lg_screensaver");
    ///<summary>LG TV</summary>
    public SwitchEntity LgTv => new(_haContext, "switch.lg_tv");
    ///<summary>LG TV Motion Sensor</summary>
    public SwitchEntity LgTvMotionSensor => new(_haContext, "switch.lg_tv_motion_sensor");
    ///<summary>LG TV Motion Sensor</summary>
    public SwitchEntity LgTvMotionSensor3 => new(_haContext, "switch.lg_tv_motion_sensor_3");
    ///<summary>LG webOS TV FE94 Mute</summary>
    public SwitchEntity LgWebosTvFe94Mute => new(_haContext, "switch.lg_webos_tv_fe94_mute");
    ///<summary>lock</summary>
    public SwitchEntity Lock2 => new(_haContext, "switch.lock_2");
    ///<summary>Lock Automation</summary>
    public SwitchEntity LockAutomation => new(_haContext, "switch.lock_automation");
    ///<summary>Mi Pad 5 Screensaver</summary>
    public SwitchEntity MiPad5Screensaver => new(_haContext, "switch.mi_pad_5_screensaver");
    ///<summary>Mipad Charger Socket 1</summary>
    public SwitchEntity MipadChargerSocket1 => new(_haContext, "switch.mipad_charger_socket_1");
    ///<summary>Motion Sensor Auto Reactivate</summary>
    public SwitchEntity MotionSensorAutoReactivate => new(_haContext, "switch.motion_sensor_auto_reactivate");
    ///<summary>Motion Sensors</summary>
    public SwitchEntity MotionSensors => new(_haContext, "switch.motion_sensors");
    ///<summary>Laptop Auto Charge</summary>
    public SwitchEntity Nodered093beef3e4230f12 => new(_haContext, "switch.nodered_093beef3e4230f12");
    ///<summary>tv-automation</summary>
    public SwitchEntity Nodered90e90b1bf1d27e84 => new(_haContext, "switch.nodered_90e90b1bf1d27e84");
    ///<summary>Pantry Lights Auto-update enabled</summary>
    public SwitchEntity PantryLightsAutoUpdateEnabled => new(_haContext, "switch.pantry_lights_auto_update_enabled");
    ///<summary>Pantry Motion Sensor</summary>
    public SwitchEntity PantryMotionSensor => new(_haContext, "switch.pantry_motion_sensor");
    ///<summary>Pantry Motion Sensor Auto Calibrate</summary>
    public SwitchEntity PantryMotionSensorAutoCalibrate => new(_haContext, "switch.pantry_motion_sensor_auto_calibrate");
    ///<summary>Pantry Motion Sensor control Bluetooth</summary>
    public SwitchEntity PantryMotionSensorControlBluetooth => new(_haContext, "switch.pantry_motion_sensor_control_bluetooth");
    ///<summary>Pantry Motion Sensor engineering mode</summary>
    public SwitchEntity PantryMotionSensorEngineeringMode => new(_haContext, "switch.pantry_motion_sensor_engineering_mode");
    ///<summary>RGB Light Strip Auto-update enabled</summary>
    public SwitchEntity RgbLightStripAutoUpdateEnabled => new(_haContext, "switch.rgb_light_strip_auto_update_enabled");
    ///<summary>RGB Light Strip Smooth transitions</summary>
    public SwitchEntity RgbLightStripSmoothTransitions => new(_haContext, "switch.rgb_light_strip_smooth_transitions");
    ///<summary>Rice Cooker Child lock</summary>
    public SwitchEntity RiceCookerChildLock => new(_haContext, "switch.rice_cooker_child_lock");
    ///<summary>Rice Cooker Socket 1</summary>
    public SwitchEntity RiceCookerSocket1 => new(_haContext, "switch.rice_cooker_socket_1");
    ///<summary>Sala Fan Automation</summary>
    public SwitchEntity SalaFanAutomation => new(_haContext, "switch.sala_fan_automation");
    ///<summary>Sala Fans</summary>
    public SwitchEntity SalaFans => new(_haContext, "switch.sala_fans");
    ///<summary>Sala Lights 2 Auto-update enabled</summary>
    public SwitchEntity SalaLights2AutoUpdateEnabled => new(_haContext, "switch.sala_lights_2_auto_update_enabled");
    ///<summary>Sala Lights Auto-update enabled</summary>
    public SwitchEntity SalaLightsAutoUpdateEnabled => new(_haContext, "switch.sala_lights_auto_update_enabled");
    ///<summary>Sala Motion Sensor</summary>
    public SwitchEntity SalaMotionSensor => new(_haContext, "switch.sala_motion_sensor");
    ///<summary>Sala Motion Sensor Auto Calibrate</summary>
    public SwitchEntity SalaMotionSensorAutoCalibrate => new(_haContext, "switch.sala_motion_sensor_auto_calibrate");
    ///<summary>Sala Motion Sensor control Bluetooth</summary>
    public SwitchEntity SalaMotionSensorControlBluetooth => new(_haContext, "switch.sala_motion_sensor_control_bluetooth");
    ///<summary>Sala Motion Sensor engineering mode</summary>
    public SwitchEntity SalaMotionSensorEngineeringMode => new(_haContext, "switch.sala_motion_sensor_engineering_mode");
    ///<summary>Smart Plug 1 Sonoff S31 Relay</summary>
    public SwitchEntity SmartPlug1SonoffS31Relay => new(_haContext, "switch.smart_plug_1_sonoff_s31_relay");
    ///<summary>Smart Plug 2 Sonoff S31 Relay</summary>
    public SwitchEntity SmartPlug2SonoffS31Relay => new(_haContext, "switch.smart_plug_2_sonoff_s31_relay");
    ///<summary>Smart Plug 3 Sonoff S31 Relay</summary>
    public SwitchEntity SmartPlug3SonoffS31Relay => new(_haContext, "switch.smart_plug_3_sonoff_s31_relay");
    ///<summary>Smart Plug 4 Sonoff S31 Relay</summary>
    public SwitchEntity SmartPlug4SonoffS31Relay => new(_haContext, "switch.smart_plug_4_sonoff_s31_relay");
    ///<summary>S31 Plug 1 (Fridge)</summary>
    public SwitchEntity Sonoff1002163cb5 => new(_haContext, "switch.sonoff_1002163cb5");
    ///<summary>S31 Plug 1 (Fridge) LED</summary>
    public SwitchEntity Sonoff1002163cb5Led => new(_haContext, "switch.sonoff_1002163cb5_led");
    ///<summary>EWeLink Plug Bedroom 2</summary>
    public SwitchEntity Sonoff1002352c401 => new(_haContext, "switch.sonoff_1002352c40_1");
    ///<summary>EWeLink Plug Bedroom 2 Detach</summary>
    public SwitchEntity Sonoff1002352c40Detach => new(_haContext, "switch.sonoff_1002352c40_detach");
    ///<summary>EWeLink Plug Bedroom 2 LED</summary>
    public SwitchEntity Sonoff1002352c40Led => new(_haContext, "switch.sonoff_1002352c40_led");
    ///<summary>Laptop Plug</summary>
    public SwitchEntity Sonoff1002380fe51 => new(_haContext, "switch.sonoff_1002380fe5_1");
    ///<summary>EWeLink Plug Sala 2 Detach</summary>
    public SwitchEntity Sonoff1002380fe5Detach => new(_haContext, "switch.sonoff_1002380fe5_detach");
    ///<summary>EWeLink Plug Sala 2 LED</summary>
    public SwitchEntity Sonoff1002380fe5Led => new(_haContext, "switch.sonoff_1002380fe5_led");
    ///<summary>EWeLink Plug Sala 1</summary>
    public SwitchEntity Sonoff10023810231 => new(_haContext, "switch.sonoff_1002381023_1");
    ///<summary>EWeLink Plug Sala 1 Detach</summary>
    public SwitchEntity Sonoff1002381023Detach => new(_haContext, "switch.sonoff_1002381023_detach");
    ///<summary>EWeLink Plug Sala 1 LED</summary>
    public SwitchEntity Sonoff1002381023Led => new(_haContext, "switch.sonoff_1002381023_led");
    ///<summary>EWeLink Plug Bedroom 1</summary>
    public SwitchEntity Sonoff100238104e1 => new(_haContext, "switch.sonoff_100238104e_1");
    ///<summary>EWeLink Plug Bedroom 1 Detach</summary>
    public SwitchEntity Sonoff100238104eDetach => new(_haContext, "switch.sonoff_100238104e_detach");
    ///<summary>EWeLink Plug Bedroom 1 LED</summary>
    public SwitchEntity Sonoff100238104eLed => new(_haContext, "switch.sonoff_100238104e_led");
    ///<summary>Sala Stand Fan</summary>
    public SwitchEntity Switch => new(_haContext, "switch.switch");
    ///<summary>Tablet Automation</summary>
    public SwitchEntity TabletAutomation => new(_haContext, "switch.tablet_automation");
    ///<summary>TP Link Integration</summary>
    public SwitchEntity TpLinkIntegration => new(_haContext, "switch.tp_link_integration");
    ///<summary>TV Automation</summary>
    public SwitchEntity TvAutomation => new(_haContext, "switch.tv_automation");
    ///<summary>TV Backlight 3 Lite Gradient Toggle</summary>
    public SwitchEntity TvBacklight3LiteGradientToggle => new(_haContext, "switch.tv_backlight_3_lite_gradient_toggle");
    ///<summary>TV Backlight 3 Lite Power Switch</summary>
    public SwitchEntity TvBacklight3LitePowerSwitch => new(_haContext, "switch.tv_backlight_3_lite_power_switch");
    ///<summary>PC Output TV</summary>
    public SwitchEntity TvDisplay => new(_haContext, "switch.tv_display");
    ///<summary>DANIEL-PC</summary>
    public SwitchEntity WakeOnLan => new(_haContext, "switch.wake_on_lan");
    ///<summary>Water Dispenser Child lock</summary>
    public SwitchEntity WaterDispenserChildLock => new(_haContext, "switch.water_dispenser_child_lock");
    ///<summary>Water Dispenser Socket 1</summary>
    public SwitchEntity WaterDispenserSocket1 => new(_haContext, "switch.water_dispenser_socket_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Alarm Alarm</summary>
    public SwitchEntity XiaomiSg753990712Cpa4AlarmP61 => new(_haContext, "switch.xiaomi_sg_753990712_cpa4_alarm_p_6_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Air Purifier Switch Status</summary>
    public SwitchEntity XiaomiSg753990712Cpa4OnP21 => new(_haContext, "switch.xiaomi_sg_753990712_cpa4_on_p_2_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact  Physical Control Locked Physical Control Locked</summary>
    public SwitchEntity XiaomiSg753990712Cpa4PhysicalControlsLockedP81 => new(_haContext, "switch.xiaomi_sg_753990712_cpa4_physical_controls_locked_p_8_1");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact Air Purifier Fan Switch</summary>
    public SwitchEntity XiaomiSmartAirPurifier4CompactAirPurifierFanSwitch => new(_haContext, "switch.xiaomi_smart_air_purifier_4_compact_air_purifier_fan_switch");
    ///<summary>Xiaomi Smart Air Purifier 4 Compact Air Purifier LED Status</summary>
    public SwitchEntity XiaomiSmartAirPurifier4CompactAirPurifierLedStatus => new(_haContext, "switch.xiaomi_smart_air_purifier_4_compact_air_purifier_led_status");
}

public partial class TagEntities
{
    private readonly IHaContext _haContext;
    public TagEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tag entities currently registered (at runtime) in Home Assistant as TagEntity</summary>
    public IEnumerable<TagEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tag.")).Select(e => new TagEntity(e));
    ///<summary>Tag 0aa9e8b4-4b8b-427e-b90e-7f5ac17a15f3</summary>
    public TagEntity _0aa9e8b44b8b427eB90e7f5ac17a15f3 => new(_haContext, "tag.0aa9e8b4_4b8b_427e_b90e_7f5ac17a15f3");
    ///<summary>Door Tag</summary>
    public TagEntity DoorTag => new(_haContext, "tag.door_tag");
    ///<summary>NFC Bedroom Fan Tag 1</summary>
    public TagEntity NfcBedroomFanTag1 => new(_haContext, "tag.nfc_bedroom_fan_tag_1");
    ///<summary>NFC Bedroom Lights Tag 1</summary>
    public TagEntity NfcBedroomLightsTag1 => new(_haContext, "tag.nfc_bedroom_lights_tag_1");
    ///<summary>NFC Desk 1 Tag 1</summary>
    public TagEntity NfcDesk1Tag1 => new(_haContext, "tag.nfc_desk_1_tag_1");
    ///<summary>NFC Desk 2 Tag 1</summary>
    public TagEntity NfcDesk2Tag1 => new(_haContext, "tag.nfc_desk_2_tag_1");
    ///<summary>NFC Desk 2 Tag 2</summary>
    public TagEntity NfcDesk2Tag2 => new(_haContext, "tag.nfc_desk_2_tag_2");
    ///<summary>NFC Desk 2 Tag 3</summary>
    public TagEntity NfcDesk2Tag3 => new(_haContext, "tag.nfc_desk_2_tag_3");
    ///<summary>NFC Sala Tag 1</summary>
    public TagEntity NfcSalaTag1 => new(_haContext, "tag.nfc_sala_tag_1");
}

public partial class TextEntities
{
    private readonly IHaContext _haContext;
    public TextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all text entities currently registered (at runtime) in Home Assistant as TextEntity</summary>
    public IEnumerable<TextEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("text.")).Select(e => new TextEntity(e));
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Recipe ID</summary>
    public TextEntity CareliSg593061393Maf05aRecipeIdP31 => new(_haContext, "text.careli_sg_593061393_maf05a_recipe_id_p_3_1");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service recipe-name</summary>
    public TextEntity CareliSg593061393Maf05aRecipeNameP32 => new(_haContext, "text.careli_sg_593061393_maf05a_recipe_name_p_3_2");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service recipe-sync</summary>
    public TextEntity CareliSg593061393Maf05aRecipeSyncP39 => new(_haContext, "text.careli_sg_593061393_maf05a_recipe_sync_p_3_9");
    ///<summary>Xiaomi Smart Air Fryer Pro 4L * Custom Service Start Custom Program</summary>
    public TextEntity CareliSg593061393Maf05aStartCookA31 => new(_haContext, "text.careli_sg_593061393_maf05a_start_cook_a_3_1");
}

public partial class TimerEntities
{
    private readonly IHaContext _haContext;
    public TimerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all timer entities currently registered (at runtime) in Home Assistant as TimerEntity</summary>
    public IEnumerable<TimerEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("timer.")).Select(e => new TimerEntity(e));
    ///<summary>Eating Window</summary>
    public TimerEntity EatingWindow => new(_haContext, "timer.eating_window");
    ///<summary>Fasting Window</summary>
    public TimerEntity FastingWindow => new(_haContext, "timer.fasting_window");
    ///<summary>Fasting Window 2</summary>
    public TimerEntity FastingWindow2 => new(_haContext, "timer.fasting_window_2");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all update entities currently registered (at runtime) in Home Assistant as UpdateEntity</summary>
    public IEnumerable<UpdateEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("update.")).Select(e => new UpdateEntity(e));
    ///<summary>Attribute as Sensor update</summary>
    public UpdateEntity AttributeAsSensorUpdate => new(_haContext, "update.attribute_as_sensor_update");
    ///<summary>Bedroom Motion Sensor Firmware</summary>
    public UpdateEntity BedroomMotionSensorFirmware => new(_haContext, "update.bedroom_motion_sensor_firmware");
    ///<summary>Bermuda BLE Trilateration update</summary>
    public UpdateEntity BermudaBleTrilaterationUpdate => new(_haContext, "update.bermuda_ble_trilateration_update");
    ///<summary>browser_mod update</summary>
    public UpdateEntity BrowserModUpdate => new(_haContext, "update.browser_mod_update");
    ///<summary>card-mod update</summary>
    public UpdateEntity CardModUpdate => new(_haContext, "update.card_mod_update");
    ///<summary>ESPHome Device Builder Update</summary>
    public UpdateEntity EsphomeUpdate => new(_haContext, "update.esphome_update");
    ///<summary>Filebrowser Update</summary>
    public UpdateEntity FilebrowserUpdate => new(_haContext, "update.filebrowser_update");
    ///<summary>Govee to MQTT Bridge Update</summary>
    public UpdateEntity GoveeToMqttBridgeUpdate => new(_haContext, "update.govee_to_mqtt_bridge_update");
    ///<summary>Gree A/C update</summary>
    public UpdateEntity GreeACUpdate => new(_haContext, "update.gree_a_c_update");
    ///<summary>HACS update</summary>
    public UpdateEntity HacsUpdate => new(_haContext, "update.hacs_update");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Home Assistant Swipe Navigation update</summary>
    public UpdateEntity HomeAssistantSwipeNavigationUpdate => new(_haContext, "update.home_assistant_swipe_navigation_update");
    ///<summary>iPhone Device Tracker update</summary>
    public UpdateEntity IphoneDeviceTrackerUpdate => new(_haContext, "update.iphone_device_tracker_update");
    ///<summary>Firmware</summary>
    public UpdateEntity Ld2410Esp321Firmware => new(_haContext, "update.ld2410_esp32_1_firmware");
    ///<summary>Firmware</summary>
    public UpdateEntity Ld2410Esp325Firmware => new(_haContext, "update.ld2410_esp32_5_firmware");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>Mushroom update</summary>
    public UpdateEntity MushroomUpdate => new(_haContext, "update.mushroom_update");
    ///<summary>n8n Update</summary>
    public UpdateEntity N8nUpdate => new(_haContext, "update.n8n_update");
    ///<summary>NetDaemon update</summary>
    public UpdateEntity NetdaemonUpdate => new(_haContext, "update.netdaemon_update");
    ///<summary>NetDaemon V5 (.NET 9) Update</summary>
    public UpdateEntity NetdaemonV5Net9Update => new(_haContext, "update.netdaemon_v5_net_9_update");
    ///<summary>Node-RED Companion update</summary>
    public UpdateEntity NodeRedCompanionUpdate => new(_haContext, "update.node_red_companion_update");
    ///<summary>Node-RED Update</summary>
    public UpdateEntity NodeRedUpdate => new(_haContext, "update.node_red_update");
    ///<summary>Passive BLE monitor integration update</summary>
    public UpdateEntity PassiveBleMonitorIntegrationUpdate => new(_haContext, "update.passive_ble_monitor_integration_update");
    ///<summary>Powercalc update</summary>
    public UpdateEntity PowercalcUpdate => new(_haContext, "update.powercalc_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Smart Plug 1 Firmware</summary>
    public UpdateEntity SmartPlug1Firmware => new(_haContext, "update.smart_plug_1_firmware");
    ///<summary>Smart Plug 2 Firmware</summary>
    public UpdateEntity SmartPlug2Firmware => new(_haContext, "update.smart_plug_2_firmware");
    ///<summary>Smart Plug 3 Firmware</summary>
    public UpdateEntity SmartPlug3Firmware => new(_haContext, "update.smart_plug_3_firmware");
    ///<summary>Smart Plug 4 Firmware</summary>
    public UpdateEntity SmartPlug4Firmware => new(_haContext, "update.smart_plug_4_firmware");
    ///<summary>Sonoff LAN update</summary>
    public UpdateEntity SonoffLanUpdate => new(_haContext, "update.sonoff_lan_update");
    ///<summary>Spook 👻 Your homie update</summary>
    public UpdateEntity SpookYourHomieUpdate => new(_haContext, "update.spook_your_homie_update");
    ///<summary>SQLite Web Update</summary>
    public UpdateEntity SqliteWebUpdate => new(_haContext, "update.sqlite_web_update");
    ///<summary>SSH update</summary>
    public UpdateEntity SshUpdate => new(_haContext, "update.ssh_update");
    ///<summary>Streamline Card update</summary>
    public UpdateEntity StreamlineCardUpdate => new(_haContext, "update.streamline_card_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Tailscale Update</summary>
    public UpdateEntity TailscaleUpdate => new(_haContext, "update.tailscale_update");
    ///<summary>Terminal &amp; SSH Update</summary>
    public UpdateEntity TerminalSshUpdate => new(_haContext, "update.terminal_ssh_update");
    ///<summary>Watchman update</summary>
    public UpdateEntity WatchmanUpdate => new(_haContext, "update.watchman_update");
    ///<summary>Xiaomi Home update</summary>
    public UpdateEntity XiaomiHomeUpdate => new(_haContext, "update.xiaomi_home_update");
    ///<summary>Xiaomi Miot Auto update</summary>
    public UpdateEntity XiaomiMiotAutoUpdate => new(_haContext, "update.xiaomi_miot_auto_update");
    ///<summary>Firmware</summary>
    public UpdateEntity ZEsp32C61Firmware2 => new(_haContext, "update.z_esp32_c6_1_firmware_2");
    ///<summary>Firmware</summary>
    public UpdateEntity ZEsp32C62Firmware => new(_haContext, "update.z_esp32_c6_2_firmware");
    ///<summary>Firmware</summary>
    public UpdateEntity ZEsp32C63Firmware => new(_haContext, "update.z_esp32_c6_3_firmware");
}

public partial class WakeWordEntities
{
    private readonly IHaContext _haContext;
    public WakeWordEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all wake_word entities currently registered (at runtime) in Home Assistant as WakeWordEntity</summary>
    public IEnumerable<WakeWordEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("wake_word.")).Select(e => new WakeWordEntity(e));
    ///<summary>openwakeword</summary>
    public WakeWordEntity Openwakeword => new(_haContext, "wake_word.openwakeword");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all weather entities currently registered (at runtime) in Home Assistant as WeatherEntity</summary>
    public IEnumerable<WeatherEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("weather.")).Select(e => new WeatherEntity(e));
    ///<summary>home</summary>
    public WeatherEntity Home => new(_haContext, "weather.home");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all zone entities currently registered (at runtime) in Home Assistant as ZoneEntity</summary>
    public IEnumerable<ZoneEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("zone.")).Select(e => new ZoneEntity(e));
    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    /// <summary>Enumerates all tts entities currently registered (at runtime) in Home Assistant as TtsEntity</summary>
    public IEnumerable<TtsEntity> EnumerateAll() => _haContext.GetAllEntities().Where(e => e.EntityId.StartsWith("tts.")).Select(e => new TtsEntity(e));
    ///<summary>Google AI TTS</summary>
    public TtsEntity GoogleAiTts => new(_haContext, "tts.google_ai_tts");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public double? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("ip_address")]
    public string? IpAddress { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("browserID")]
    public string? BrowserID { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("active_child")]
    public string? ActiveChild { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("browserID")]
    public string? BrowserID { get; init; }

    [JsonPropertyName("video_interaction_required")]
    public bool? VideoInteractionRequired { get; init; }

    [JsonPropertyName("audio_interaction_required")]
    public bool? AudioInteractionRequired { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("browserID")]
    public string? BrowserID { get; init; }

    [JsonPropertyName("data")]
    public string? Data { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>, IClimateEntityCore
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("target_temp_step")]
    public double? TargetTempStep { get; init; }

    [JsonPropertyName("fan_modes")]
    public IReadOnlyList<string>? FanModes { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("swing_modes")]
    public IReadOnlyList<string>? SwingModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("swing_horizontal_modes")]
    public IReadOnlyList<string>? SwingHorizontalModes { get; init; }

    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ConversationEntity : Entity<ConversationEntity, EntityState<ConversationAttributes>, ConversationAttributes>
{
    public ConversationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ConversationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ConversationAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CounterEntity : Entity<CounterEntity, EntityState<CounterAttributes>, CounterAttributes>
{
    public CounterEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CounterEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CounterAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("initial")]
    public double? Initial { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("minimum")]
    public double? Minimum { get; init; }

    [JsonPropertyName("maximum")]
    public double? Maximum { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }

    [JsonPropertyName("ip")]
    public string? Ip { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("scanner")]
    public string? Scanner { get; init; }

    [JsonPropertyName("area")]
    public string? Area { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("domain")]
    public string? Domain { get; init; }

    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }

    [JsonPropertyName("backup_stage")]
    public object? BackupStage { get; init; }

    [JsonPropertyName("failed_reason")]
    public object? FailedReason { get; init; }
}

public partial record FanEntity : Entity<FanEntity, EntityState<FanAttributes>, FanAttributes>
{
    public FanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public FanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record FanAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("preset_modes")]
    public object? PresetModes { get; init; }

    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }

    [JsonPropertyName("preset_mode")]
    public object? PresetMode { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>, IInputButtonEntityCore
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputNumberEntity : NumericEntity<InputNumberEntity, NumericEntityState<InputNumberAttributes>, InputNumberAttributes>, IInputNumberEntityCore
{
    public InputNumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputNumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputNumberAttributes
{
    [JsonPropertyName("initial")]
    public object? Initial { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>, ILockEntityCore
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NotifyEntity : Entity<NotifyEntity, EntityState<NotifyAttributes>, NotifyAttributes>
{
    public NotifyEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NotifyEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NotifyAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("action params")]
    public string? Actionparams { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("ip_address")]
    public string? IpAddress { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("activity_list")]
    public IReadOnlyList<object>? ActivityList { get; init; }

    [JsonPropertyName("current_activity")]
    public string? CurrentActivity { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>, ISceneEntityCore
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("ip_address")]
    public string? IpAddress { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("887216f5-c9c0-4901-bf59-51c6e940bf11_100_40004")]
    public double? _887216f5c9c04901bf5951c6e940bf1110040004 { get; init; }

    [JsonPropertyName("is_hidden")]
    public bool? IsHidden { get; init; }

    [JsonPropertyName("Local Time")]
    public string? LocalTime { get; init; }

    [JsonPropertyName("Time in Milliseconds")]
    public double? TimeinMilliseconds { get; init; }

    [JsonPropertyName("Low Power Mode")]
    public bool? LowPowerMode { get; init; }

    [JsonPropertyName("Confidence")]
    public string? Confidence { get; init; }

    [JsonPropertyName("Types")]
    public IReadOnlyList<string>? Types { get; init; }

    [JsonPropertyName("Allows VoIP")]
    public bool? AllowsVoIP { get; init; }

    [JsonPropertyName("Carrier ID")]
    public string? CarrierID { get; init; }

    [JsonPropertyName("Carrier Name")]
    public string? CarrierName { get; init; }

    [JsonPropertyName("Current Radio Technology")]
    public string? CurrentRadioTechnology { get; init; }

    [JsonPropertyName("ISO Country Code")]
    public string? ISOCountryCode { get; init; }

    [JsonPropertyName("Mobile Country Code")]
    public string? MobileCountryCode { get; init; }

    [JsonPropertyName("Mobile Network Code")]
    public string? MobileNetworkCode { get; init; }

    [JsonPropertyName("Administrative Area")]
    public string? AdministrativeArea { get; init; }

    [JsonPropertyName("Areas Of Interest")]
    public IReadOnlyList<string>? AreasOfInterest { get; init; }

    [JsonPropertyName("Country")]
    public string? Country { get; init; }

    [JsonPropertyName("Inland Water")]
    public string? InlandWater { get; init; }

    [JsonPropertyName("Locality")]
    public string? Locality { get; init; }

    [JsonPropertyName("Location")]
    public IReadOnlyList<double>? Location { get; init; }

    [JsonPropertyName("Name")]
    public string? Name { get; init; }

    [JsonPropertyName("Ocean")]
    public string? Ocean { get; init; }

    [JsonPropertyName("Postal Code")]
    public string? PostalCode { get; init; }

    [JsonPropertyName("Sub Administrative Area")]
    public string? SubAdministrativeArea { get; init; }

    [JsonPropertyName("Sub Locality")]
    public string? SubLocality { get; init; }

    [JsonPropertyName("Sub Thoroughfare")]
    public string? SubThoroughfare { get; init; }

    [JsonPropertyName("Thoroughfare")]
    public string? Thoroughfare { get; init; }

    [JsonPropertyName("Time Zone")]
    public string? TimeZone { get; init; }

    [JsonPropertyName("Zones")]
    public IReadOnlyList<string>? Zones { get; init; }

    [JsonPropertyName("Label")]
    public string? Label { get; init; }

    [JsonPropertyName("Package")]
    public string? Package { get; init; }

    [JsonPropertyName("still")]
    public double? Still { get; init; }

    [JsonPropertyName("unknown")]
    public double? Unknown { get; init; }

    [JsonPropertyName("Advertise mode")]
    public string? Advertisemode { get; init; }

    [JsonPropertyName("Measured power")]
    public double? Measuredpower { get; init; }

    [JsonPropertyName("Supports transmitter")]
    public bool? Supportstransmitter { get; init; }

    [JsonPropertyName("Transmitting power")]
    public string? Transmittingpower { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("metered")]
    public bool? Metered { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("ip_address")]
    public string? IpAddress { get; init; }

    [JsonPropertyName("remote")]
    public bool? Remote { get; init; }

    [JsonPropertyName("keypad")]
    public bool? Keypad { get; init; }

    [JsonPropertyName("manual")]
    public bool? Manual { get; init; }

    [JsonPropertyName("tag")]
    public bool? Tag { get; init; }

    [JsonPropertyName("autorelock")]
    public bool? Autorelock { get; init; }

    [JsonPropertyName("method")]
    public string? Method { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    [JsonPropertyName("area_name")]
    public string? AreaName { get; init; }

    [JsonPropertyName("current_mac")]
    public string? CurrentMac { get; init; }

    [JsonPropertyName("http")]
    public object? Http { get; init; }

    [JsonPropertyName("iot")]
    public object? Iot { get; init; }

    [JsonPropertyName("lan")]
    public object? Lan { get; init; }

    [JsonPropertyName("overall")]
    public object? Overall { get; init; }

    [JsonPropertyName("platform_metadata")]
    public object? PlatformMetadata { get; init; }

    [JsonPropertyName("platform_state")]
    public object? PlatformState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public object? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }

    [JsonPropertyName("on_foot")]
    public double? OnFoot { get; init; }

    [JsonPropertyName("walking")]
    public double? Walking { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("browserID")]
    public string? BrowserID { get; init; }

    [JsonPropertyName("pathSegments")]
    public IReadOnlyList<string>? PathSegments { get; init; }

    [JsonPropertyName("userAgent")]
    public string? UserAgent { get; init; }

    [JsonPropertyName("userData")]
    public object? UserData { get; init; }

    [JsonPropertyName("Resolution")]
    public string? Resolution { get; init; }

    [JsonPropertyName("Width")]
    public double? Width { get; init; }

    [JsonPropertyName("Height")]
    public double? Height { get; init; }

    [JsonPropertyName("VirtualResolution")]
    public string? VirtualResolution { get; init; }

    [JsonPropertyName("VirtualWidth")]
    public double? VirtualWidth { get; init; }

    [JsonPropertyName("VirtualHeight")]
    public double? VirtualHeight { get; init; }

    [JsonPropertyName("BitsPerPixel")]
    public double? BitsPerPixel { get; init; }

    [JsonPropertyName("PrimaryDisplay")]
    public bool? PrimaryDisplay { get; init; }

    [JsonPropertyName("WorkingArea")]
    public string? WorkingArea { get; init; }

    [JsonPropertyName("WorkingAreaWidth")]
    public double? WorkingAreaWidth { get; init; }

    [JsonPropertyName("WorkingAreaHeight")]
    public double? WorkingAreaHeight { get; init; }

    [JsonPropertyName("RotatedDegrees")]
    public double? RotatedDegrees { get; init; }

    [JsonPropertyName("in_vehicle")]
    public double? InVehicle { get; init; }

    [JsonPropertyName("on_bicycle")]
    public double? OnBicycle { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<object>? Entities { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("last_period")]
    public string? LastPeriod { get; init; }

    [JsonPropertyName("last_valid_state")]
    public string? LastValidState { get; init; }

    [JsonPropertyName("last_reset")]
    public string? LastReset { get; init; }

    [JsonPropertyName("next_reset")]
    public string? NextReset { get; init; }

    [JsonPropertyName("connected_not_paired_devices")]
    public IReadOnlyList<object>? ConnectedNotPairedDevices { get; init; }

    [JsonPropertyName("connected_paired_devices")]
    public IReadOnlyList<string>? ConnectedPairedDevices { get; init; }

    [JsonPropertyName("paired_devices")]
    public IReadOnlyList<string>? PairedDevices { get; init; }

    [JsonPropertyName("Available")]
    public string? Available { get; init; }

    [JsonPropertyName("Available (Important)")]
    public string? AvailableImportant { get; init; }

    [JsonPropertyName("Available (Opportunistic)")]
    public string? AvailableOpportunistic { get; init; }

    [JsonPropertyName("Total")]
    public string? Total { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("android.appInfo_com.facebook.orca_10000")]
    public string? Android_appInfoCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.appInfo_com.facebook.orca_2147483647")]
    public string? Android_appInfoCom_facebook_orca2147483647 { get; init; }

    [JsonPropertyName("android.appInfo_com.google.android.apps.messaging_2")]
    public string? Android_appInfoCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.appInfo_com.google.android.gm_-769128466")]
    public string? Android_appInfoCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.appInfo_com.google.android.gm_0")]
    public string? Android_appInfoCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.appInfo_com.miui.misound_999")]
    public string? Android_appInfoCom_miui_misound999 { get; init; }

    [JsonPropertyName("android.appInfo_com.miui.securitycenter_20006")]
    public string? Android_appInfoCom_miui_securitycenter20006 { get; init; }

    [JsonPropertyName("android.appInfo_com.xiaomi.aicr_1")]
    public string? Android_appInfoCom_xiaomi_aicr1 { get; init; }

    [JsonPropertyName("android.appInfo_com.xiaomi.mi_connect_service_2")]
    public string? Android_appInfoCom_xiaomi_miConnectService2 { get; init; }

    [JsonPropertyName("android.appInfo_com.xiaomi.mirror_10")]
    public string? Android_appInfoCom_xiaomi_mirror10 { get; init; }

    [JsonPropertyName("android.bigText_com.google.android.gm_-769128466")]
    public string? Android_bigTextCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.bigText_com.google.android.gm_0")]
    public string? Android_bigTextCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.car.EXTENSIONS_com.facebook.orca_10000")]
    public string? Android_car_EXTENSIONSCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.conversationUnreadMessageCount_com.facebook.orca_10000")]
    public double? Android_conversationUnreadMessageCountCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.conversationUnreadMessageCount_com.google.android.apps.messaging_2")]
    public double? Android_conversationUnreadMessageCountCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.hiddenConversationTitle_com.facebook.orca_10000")]
    public string? Android_hiddenConversationTitleCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.hiddenConversationTitle_com.google.android.apps.messaging_2")]
    public string? Android_hiddenConversationTitleCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.infoText_com.facebook.orca_10000")]
    public string? Android_infoTextCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.infoText_com.google.android.apps.messaging_2")]
    public string? Android_infoTextCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.infoText_com.google.android.gm_-769128466")]
    public string? Android_infoTextCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.infoText_com.google.android.gm_0")]
    public string? Android_infoTextCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.isGroupConversation_com.facebook.orca_10000")]
    public bool? Android_isGroupConversationCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.isGroupConversation_com.google.android.apps.messaging_2")]
    public bool? Android_isGroupConversationCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.largeIcon_com.facebook.orca_10000")]
    public string? Android_largeIconCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.largeIcon_com.google.android.apps.messaging_2")]
    public string? Android_largeIconCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.largeIcon_com.google.android.gm_-769128466")]
    public string? Android_largeIconCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.largeIcon_com.google.android.gm_0")]
    public string? Android_largeIconCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.messages_com.facebook.orca_10000")]
    public IReadOnlyList<string>? Android_messagesCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.messages_com.google.android.apps.messaging_2")]
    public IReadOnlyList<string>? Android_messagesCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.messagingStyleUser_com.facebook.orca_10000")]
    public string? Android_messagingStyleUserCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.messagingStyleUser_com.google.android.apps.messaging_2")]
    public string? Android_messagingStyleUserCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.messagingUser_com.facebook.orca_10000")]
    public string? Android_messagingUserCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.messagingUser_com.google.android.apps.messaging_2")]
    public string? Android_messagingUserCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.people.list_com.google.android.gm_-769128466")]
    public IReadOnlyList<string>? Android_people_listCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.people.list_com.google.android.gm_0")]
    public IReadOnlyList<string>? Android_people_listCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.facebook.orca_10000")]
    public bool? Android_progressIndeterminateCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.google.android.apps.messaging_2")]
    public bool? Android_progressIndeterminateCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.google.android.gm_-769128466")]
    public bool? Android_progressIndeterminateCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.google.android.gm_0")]
    public bool? Android_progressIndeterminateCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.progressMax_com.facebook.orca_10000")]
    public double? Android_progressMaxCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.progressMax_com.google.android.apps.messaging_2")]
    public double? Android_progressMaxCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.progressMax_com.google.android.gm_-769128466")]
    public double? Android_progressMaxCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.progressMax_com.google.android.gm_0")]
    public double? Android_progressMaxCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.progress_com.facebook.orca_10000")]
    public double? Android_progressCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.progress_com.google.android.apps.messaging_2")]
    public double? Android_progressCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.progress_com.google.android.gm_-769128466")]
    public double? Android_progressCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.progress_com.google.android.gm_0")]
    public double? Android_progressCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.reduced.images_com.facebook.orca_10000")]
    public bool? Android_reduced_imagesCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.reduced.images_com.facebook.orca_2147483647")]
    public bool? Android_reduced_imagesCom_facebook_orca2147483647 { get; init; }

    [JsonPropertyName("android.reduced.images_com.google.android.apps.messaging_2")]
    public bool? Android_reduced_imagesCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.reduced.images_com.google.android.gm_-769128466")]
    public bool? Android_reduced_imagesCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.reduced.images_com.google.android.gm_0")]
    public bool? Android_reduced_imagesCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.reduced.images_com.miui.misound_999")]
    public bool? Android_reduced_imagesCom_miui_misound999 { get; init; }

    [JsonPropertyName("android.reduced.images_com.miui.securitycenter_20006")]
    public bool? Android_reduced_imagesCom_miui_securitycenter20006 { get; init; }

    [JsonPropertyName("android.reduced.images_com.xiaomi.aicr_1")]
    public bool? Android_reduced_imagesCom_xiaomi_aicr1 { get; init; }

    [JsonPropertyName("android.reduced.images_com.xiaomi.mi_connect_service_2")]
    public bool? Android_reduced_imagesCom_xiaomi_miConnectService2 { get; init; }

    [JsonPropertyName("android.reduced.images_com.xiaomi.mirror_10")]
    public bool? Android_reduced_imagesCom_xiaomi_mirror10 { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.facebook.orca_10000")]
    public string? Android_remoteInputHistoryCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.google.android.apps.messaging_2")]
    public string? Android_remoteInputHistoryCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.google.android.gm_-769128466")]
    public string? Android_remoteInputHistoryCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.google.android.gm_0")]
    public string? Android_remoteInputHistoryCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.selfDisplayName_com.facebook.orca_10000")]
    public string? Android_selfDisplayNameCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.selfDisplayName_com.google.android.apps.messaging_2")]
    public string? Android_selfDisplayNameCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.showChronometer_com.facebook.orca_10000")]
    public bool? Android_showChronometerCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.showChronometer_com.google.android.apps.messaging_2")]
    public bool? Android_showChronometerCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.showChronometer_com.google.android.gm_-769128466")]
    public bool? Android_showChronometerCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.showChronometer_com.google.android.gm_0")]
    public bool? Android_showChronometerCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.showWhen_com.facebook.orca_10000")]
    public bool? Android_showWhenCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.showWhen_com.google.android.apps.messaging_2")]
    public bool? Android_showWhenCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.showWhen_com.google.android.gm_-769128466")]
    public bool? Android_showWhenCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.showWhen_com.google.android.gm_0")]
    public bool? Android_showWhenCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.subText_com.facebook.orca_10000")]
    public string? Android_subTextCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.subText_com.google.android.apps.messaging_2")]
    public string? Android_subTextCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.subText_com.google.android.gm_-769128466")]
    public string? Android_subTextCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.subText_com.google.android.gm_0")]
    public string? Android_subTextCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.support.v4.app.extra.COMPAT_TEMPLATE_com.google.android.apps.messaging_2")]
    public string? Android_support_v4_app_extra_COMPATTEMPLATECom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.support.v4.app.extra.COMPAT_TEMPLATE_com.google.android.gm_-769128466")]
    public string? Android_support_v4_app_extra_COMPATTEMPLATECom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.support.v4.app.extra.COMPAT_TEMPLATE_com.google.android.gm_0")]
    public string? Android_support_v4_app_extra_COMPATTEMPLATECom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.template_com.facebook.orca_10000")]
    public string? Android_templateCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.template_com.google.android.apps.messaging_2")]
    public string? Android_templateCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.template_com.google.android.gm_-769128466")]
    public string? Android_templateCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.template_com.google.android.gm_0")]
    public string? Android_templateCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.text_com.facebook.orca_10000")]
    public string? Android_textCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.text_com.google.android.apps.messaging_2")]
    public string? Android_textCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.text_com.google.android.gm_-769128466")]
    public string? Android_textCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.text_com.google.android.gm_0")]
    public string? Android_textCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.text_com.xiaomi.mirror_10")]
    public string? Android_textCom_xiaomi_mirror10 { get; init; }

    [JsonPropertyName("android.title_com.facebook.orca_10000")]
    public string? Android_titleCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.title_com.google.android.apps.messaging_2")]
    public string? Android_titleCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.title_com.google.android.gm_-769128466")]
    public string? Android_titleCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.title_com.google.android.gm_0")]
    public string? Android_titleCom_google_android_gm0 { get; init; }

    [JsonPropertyName("android.title_com.xiaomi.mi_connect_service_2")]
    public string? Android_titleCom_xiaomi_miConnectService2 { get; init; }

    [JsonPropertyName("android.title_com.xiaomi.mirror_10")]
    public string? Android_titleCom_xiaomi_mirror10 { get; init; }

    [JsonPropertyName("android.wearable.EXTENSIONS_com.facebook.orca_10000")]
    public string? Android_wearable_EXTENSIONSCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("android.wearable.EXTENSIONS_com.google.android.apps.messaging_2")]
    public string? Android_wearable_EXTENSIONSCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("android.wearable.EXTENSIONS_com.google.android.gm_-769128466")]
    public string? Android_wearable_EXTENSIONSCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("android.wearable.EXTENSIONS_com.google.android.gm_0")]
    public string? Android_wearable_EXTENSIONSCom_google_android_gm0 { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.facebook.orca_10000")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_facebook_orca10000 { get; init; }

    [JsonPropertyName("argAndroidAccount_com.google.android.gm_-769128466")]
    public string? ArgAndroidAccountCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("argAndroidAccount_com.google.android.gm_0")]
    public string? ArgAndroidAccountCom_google_android_gm0 { get; init; }

    [JsonPropertyName("argMustShow_com.google.android.gm_-769128466")]
    public bool? ArgMustShowCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("argMustShow_com.google.android.gm_0")]
    public bool? ArgMustShowCom_google_android_gm0 { get; init; }

    [JsonPropertyName("argNotificationType_com.google.android.gm_-769128466")]
    public string? ArgNotificationTypeCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("argNotificationType_com.google.android.gm_0")]
    public string? ArgNotificationTypeCom_google_android_gm0 { get; init; }

    [JsonPropertyName("argPriorityScore_com.google.android.gm_-769128466")]
    public double? ArgPriorityScoreCom_google_android_gm769128466 { get; init; }

    [JsonPropertyName("argPriorityScore_com.google.android.gm_0")]
    public double? ArgPriorityScoreCom_google_android_gm0 { get; init; }

    [JsonPropertyName("com.facebook.orca_10000_category")]
    public string? Com_facebook_orca10000Category { get; init; }

    [JsonPropertyName("com.facebook.orca_10000_channel_id")]
    public string? Com_facebook_orca10000ChannelId { get; init; }

    [JsonPropertyName("com.facebook.orca_10000_group_id")]
    public string? Com_facebook_orca10000GroupId { get; init; }

    [JsonPropertyName("com.facebook.orca_10000_is_clearable")]
    public bool? Com_facebook_orca10000IsClearable { get; init; }

    [JsonPropertyName("com.facebook.orca_10000_is_ongoing")]
    public bool? Com_facebook_orca10000IsOngoing { get; init; }

    [JsonPropertyName("com.facebook.orca_10000_post_time")]
    public double? Com_facebook_orca10000PostTime { get; init; }

    [JsonPropertyName("com.facebook.orca_2147483647_category")]
    public string? Com_facebook_orca2147483647Category { get; init; }

    [JsonPropertyName("com.facebook.orca_2147483647_channel_id")]
    public string? Com_facebook_orca2147483647ChannelId { get; init; }

    [JsonPropertyName("com.facebook.orca_2147483647_group_id")]
    public string? Com_facebook_orca2147483647GroupId { get; init; }

    [JsonPropertyName("com.facebook.orca_2147483647_is_clearable")]
    public bool? Com_facebook_orca2147483647IsClearable { get; init; }

    [JsonPropertyName("com.facebook.orca_2147483647_is_ongoing")]
    public bool? Com_facebook_orca2147483647IsOngoing { get; init; }

    [JsonPropertyName("com.facebook.orca_2147483647_post_time")]
    public double? Com_facebook_orca2147483647PostTime { get; init; }

    [JsonPropertyName("com.google.android.apps.messaging_2_category")]
    public string? Com_google_android_apps_messaging2Category { get; init; }

    [JsonPropertyName("com.google.android.apps.messaging_2_channel_id")]
    public string? Com_google_android_apps_messaging2ChannelId { get; init; }

    [JsonPropertyName("com.google.android.apps.messaging_2_group_id")]
    public string? Com_google_android_apps_messaging2GroupId { get; init; }

    [JsonPropertyName("com.google.android.apps.messaging_2_is_clearable")]
    public bool? Com_google_android_apps_messaging2IsClearable { get; init; }

    [JsonPropertyName("com.google.android.apps.messaging_2_is_ongoing")]
    public bool? Com_google_android_apps_messaging2IsOngoing { get; init; }

    [JsonPropertyName("com.google.android.apps.messaging_2_post_time")]
    public double? Com_google_android_apps_messaging2PostTime { get; init; }

    [JsonPropertyName("com.google.android.gm_-769128466_category")]
    public string? Com_google_android_gm769128466Category { get; init; }

    [JsonPropertyName("com.google.android.gm_-769128466_channel_id")]
    public string? Com_google_android_gm769128466ChannelId { get; init; }

    [JsonPropertyName("com.google.android.gm_-769128466_group_id")]
    public string? Com_google_android_gm769128466GroupId { get; init; }

    [JsonPropertyName("com.google.android.gm_-769128466_is_clearable")]
    public bool? Com_google_android_gm769128466IsClearable { get; init; }

    [JsonPropertyName("com.google.android.gm_-769128466_is_ongoing")]
    public bool? Com_google_android_gm769128466IsOngoing { get; init; }

    [JsonPropertyName("com.google.android.gm_-769128466_post_time")]
    public double? Com_google_android_gm769128466PostTime { get; init; }

    [JsonPropertyName("com.google.android.gm_0_category")]
    public string? Com_google_android_gm0Category { get; init; }

    [JsonPropertyName("com.google.android.gm_0_channel_id")]
    public string? Com_google_android_gm0ChannelId { get; init; }

    [JsonPropertyName("com.google.android.gm_0_group_id")]
    public string? Com_google_android_gm0GroupId { get; init; }

    [JsonPropertyName("com.google.android.gm_0_is_clearable")]
    public bool? Com_google_android_gm0IsClearable { get; init; }

    [JsonPropertyName("com.google.android.gm_0_is_ongoing")]
    public bool? Com_google_android_gm0IsOngoing { get; init; }

    [JsonPropertyName("com.google.android.gm_0_post_time")]
    public double? Com_google_android_gm0PostTime { get; init; }

    [JsonPropertyName("com.miui.misound_999_category")]
    public string? Com_miui_misound999Category { get; init; }

    [JsonPropertyName("com.miui.misound_999_channel_id")]
    public string? Com_miui_misound999ChannelId { get; init; }

    [JsonPropertyName("com.miui.misound_999_group_id")]
    public string? Com_miui_misound999GroupId { get; init; }

    [JsonPropertyName("com.miui.misound_999_is_clearable")]
    public bool? Com_miui_misound999IsClearable { get; init; }

    [JsonPropertyName("com.miui.misound_999_is_ongoing")]
    public bool? Com_miui_misound999IsOngoing { get; init; }

    [JsonPropertyName("com.miui.misound_999_post_time")]
    public double? Com_miui_misound999PostTime { get; init; }

    [JsonPropertyName("com.miui.securitycenter_20006_category")]
    public string? Com_miui_securitycenter20006Category { get; init; }

    [JsonPropertyName("com.miui.securitycenter_20006_channel_id")]
    public string? Com_miui_securitycenter20006ChannelId { get; init; }

    [JsonPropertyName("com.miui.securitycenter_20006_group_id")]
    public string? Com_miui_securitycenter20006GroupId { get; init; }

    [JsonPropertyName("com.miui.securitycenter_20006_is_clearable")]
    public bool? Com_miui_securitycenter20006IsClearable { get; init; }

    [JsonPropertyName("com.miui.securitycenter_20006_is_ongoing")]
    public bool? Com_miui_securitycenter20006IsOngoing { get; init; }

    [JsonPropertyName("com.miui.securitycenter_20006_post_time")]
    public double? Com_miui_securitycenter20006PostTime { get; init; }

    [JsonPropertyName("com.xiaomi.aicr_1_category")]
    public string? Com_xiaomi_aicr1Category { get; init; }

    [JsonPropertyName("com.xiaomi.aicr_1_channel_id")]
    public string? Com_xiaomi_aicr1ChannelId { get; init; }

    [JsonPropertyName("com.xiaomi.aicr_1_group_id")]
    public string? Com_xiaomi_aicr1GroupId { get; init; }

    [JsonPropertyName("com.xiaomi.aicr_1_is_clearable")]
    public bool? Com_xiaomi_aicr1IsClearable { get; init; }

    [JsonPropertyName("com.xiaomi.aicr_1_is_ongoing")]
    public bool? Com_xiaomi_aicr1IsOngoing { get; init; }

    [JsonPropertyName("com.xiaomi.aicr_1_post_time")]
    public double? Com_xiaomi_aicr1PostTime { get; init; }

    [JsonPropertyName("com.xiaomi.mi_connect_service_2_category")]
    public string? Com_xiaomi_miConnectService2Category { get; init; }

    [JsonPropertyName("com.xiaomi.mi_connect_service_2_channel_id")]
    public string? Com_xiaomi_miConnectService2ChannelId { get; init; }

    [JsonPropertyName("com.xiaomi.mi_connect_service_2_group_id")]
    public string? Com_xiaomi_miConnectService2GroupId { get; init; }

    [JsonPropertyName("com.xiaomi.mi_connect_service_2_is_clearable")]
    public bool? Com_xiaomi_miConnectService2IsClearable { get; init; }

    [JsonPropertyName("com.xiaomi.mi_connect_service_2_is_ongoing")]
    public bool? Com_xiaomi_miConnectService2IsOngoing { get; init; }

    [JsonPropertyName("com.xiaomi.mi_connect_service_2_post_time")]
    public double? Com_xiaomi_miConnectService2PostTime { get; init; }

    [JsonPropertyName("com.xiaomi.mirror_10_category")]
    public string? Com_xiaomi_mirror10Category { get; init; }

    [JsonPropertyName("com.xiaomi.mirror_10_channel_id")]
    public string? Com_xiaomi_mirror10ChannelId { get; init; }

    [JsonPropertyName("com.xiaomi.mirror_10_group_id")]
    public string? Com_xiaomi_mirror10GroupId { get; init; }

    [JsonPropertyName("com.xiaomi.mirror_10_is_clearable")]
    public bool? Com_xiaomi_mirror10IsClearable { get; init; }

    [JsonPropertyName("com.xiaomi.mirror_10_is_ongoing")]
    public bool? Com_xiaomi_mirror10IsOngoing { get; init; }

    [JsonPropertyName("com.xiaomi.mirror_10_post_time")]
    public double? Com_xiaomi_mirror10PostTime { get; init; }

    [JsonPropertyName("extra_im_notification_conversation_id_com.google.android.apps.messaging_2")]
    public string? ExtraImNotificationConversationIdCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("extra_im_notification_earliest_timestamp_com.google.android.apps.messaging_2")]
    public double? ExtraImNotificationEarliestTimestampCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("extra_im_notification_latest_timestamp_com.google.android.apps.messaging_2")]
    public double? ExtraImNotificationLatestTimestampCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("extra_im_notification_message_ids_com.google.android.apps.messaging_2")]
    public IReadOnlyList<string>? ExtraImNotificationMessageIdsCom_google_android_apps_messaging2 { get; init; }

    [JsonPropertyName("extra_notification_data_map_com.facebook.orca_10000")]
    public string? ExtraNotificationDataMapCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("extra_notification_push_id_com.facebook.orca_10000")]
    public string? ExtraNotificationPushIdCom_facebook_orca10000 { get; init; }

    [JsonPropertyName("light")]
    public double? Light { get; init; }

    [JsonPropertyName("motion")]
    public double? Motion { get; init; }

    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }

    [JsonPropertyName("end")]
    public double? End { get; init; }

    [JsonPropertyName("start")]
    public double? Start { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("history")]
    public IReadOnlyList<double>? History { get; init; }

    [JsonPropertyName("uuid")]
    public string? Uuid { get; init; }

    [JsonPropertyName("major")]
    public double? Major { get; init; }

    [JsonPropertyName("minor")]
    public double? Minor { get; init; }

    [JsonPropertyName("current_mac")]
    public string? CurrentMac { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("browserID")]
    public string? BrowserID { get; init; }

    [JsonPropertyName("android.appInfo_com.grabtaxi.passenger_1641264680")]
    public string? Android_appInfoCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.contains.customView_com.grabtaxi.passenger_1641264680")]
    public bool? Android_contains_customViewCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.infoText_com.grabtaxi.passenger_1641264680")]
    public string? Android_infoTextCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.largeIcon_com.grabtaxi.passenger_1641264680")]
    public string? Android_largeIconCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.progressIndeterminate_com.grabtaxi.passenger_1641264680")]
    public bool? Android_progressIndeterminateCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.progressMax_com.grabtaxi.passenger_1641264680")]
    public double? Android_progressMaxCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.progress_com.grabtaxi.passenger_1641264680")]
    public double? Android_progressCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.reduced.images_com.grabtaxi.passenger_1641264680")]
    public bool? Android_reduced_imagesCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.remoteInputHistory_com.grabtaxi.passenger_1641264680")]
    public string? Android_remoteInputHistoryCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.showChronometer_com.grabtaxi.passenger_1641264680")]
    public bool? Android_showChronometerCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.showWhen_com.grabtaxi.passenger_1641264680")]
    public bool? Android_showWhenCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.subText_com.grabtaxi.passenger_1641264680")]
    public string? Android_subTextCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.template_com.grabtaxi.passenger_1641264680")]
    public string? Android_templateCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.text_com.grabtaxi.passenger_1641264680")]
    public string? Android_textCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("android.title_com.grabtaxi.passenger_1641264680")]
    public string? Android_titleCom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("androidx.core.app.extra.COMPAT_TEMPLATE_com.grabtaxi.passenger_1641264680")]
    public string? Androidx_core_app_extra_COMPATTEMPLATECom_grabtaxi_passenger1641264680 { get; init; }

    [JsonPropertyName("com.grabtaxi.passenger_1641264680_category")]
    public string? Com_grabtaxi_passenger1641264680Category { get; init; }

    [JsonPropertyName("com.grabtaxi.passenger_1641264680_channel_id")]
    public string? Com_grabtaxi_passenger1641264680ChannelId { get; init; }

    [JsonPropertyName("com.grabtaxi.passenger_1641264680_group_id")]
    public string? Com_grabtaxi_passenger1641264680GroupId { get; init; }

    [JsonPropertyName("com.grabtaxi.passenger_1641264680_is_clearable")]
    public bool? Com_grabtaxi_passenger1641264680IsClearable { get; init; }

    [JsonPropertyName("com.grabtaxi.passenger_1641264680_is_ongoing")]
    public bool? Com_grabtaxi_passenger1641264680IsOngoing { get; init; }

    [JsonPropertyName("com.grabtaxi.passenger_1641264680_post_time")]
    public double? Com_grabtaxi_passenger1641264680PostTime { get; init; }

    [JsonPropertyName("android.appInfo_com.android.providers.downloads_0")]
    public string? Android_appInfoCom_android_providers_downloads0 { get; init; }

    [JsonPropertyName("android.appInfo_com.android.providers.downloads_2147483647")]
    public string? Android_appInfoCom_android_providers_downloads2147483647 { get; init; }

    [JsonPropertyName("android.reduced.images_com.android.providers.downloads_0")]
    public bool? Android_reduced_imagesCom_android_providers_downloads0 { get; init; }

    [JsonPropertyName("android.reduced.images_com.android.providers.downloads_2147483647")]
    public bool? Android_reduced_imagesCom_android_providers_downloads2147483647 { get; init; }

    [JsonPropertyName("android.text_com.android.providers.downloads_0")]
    public string? Android_textCom_android_providers_downloads0 { get; init; }

    [JsonPropertyName("android.title_com.android.providers.downloads_0")]
    public string? Android_titleCom_android_providers_downloads0 { get; init; }

    [JsonPropertyName("com.android.providers.downloads_0_category")]
    public string? Com_android_providers_downloads0Category { get; init; }

    [JsonPropertyName("com.android.providers.downloads_0_channel_id")]
    public string? Com_android_providers_downloads0ChannelId { get; init; }

    [JsonPropertyName("com.android.providers.downloads_0_group_id")]
    public string? Com_android_providers_downloads0GroupId { get; init; }

    [JsonPropertyName("com.android.providers.downloads_0_is_clearable")]
    public bool? Com_android_providers_downloads0IsClearable { get; init; }

    [JsonPropertyName("com.android.providers.downloads_0_is_ongoing")]
    public bool? Com_android_providers_downloads0IsOngoing { get; init; }

    [JsonPropertyName("com.android.providers.downloads_0_post_time")]
    public double? Com_android_providers_downloads0PostTime { get; init; }

    [JsonPropertyName("com.android.providers.downloads_2147483647_category")]
    public string? Com_android_providers_downloads2147483647Category { get; init; }

    [JsonPropertyName("com.android.providers.downloads_2147483647_channel_id")]
    public string? Com_android_providers_downloads2147483647ChannelId { get; init; }

    [JsonPropertyName("com.android.providers.downloads_2147483647_group_id")]
    public string? Com_android_providers_downloads2147483647GroupId { get; init; }

    [JsonPropertyName("com.android.providers.downloads_2147483647_is_clearable")]
    public bool? Com_android_providers_downloads2147483647IsClearable { get; init; }

    [JsonPropertyName("com.android.providers.downloads_2147483647_is_ongoing")]
    public bool? Com_android_providers_downloads2147483647IsOngoing { get; init; }

    [JsonPropertyName("com.android.providers.downloads_2147483647_post_time")]
    public double? Com_android_providers_downloads2147483647PostTime { get; init; }

    [JsonPropertyName("server_name")]
    public string? ServerName { get; init; }

    [JsonPropertyName("server_country")]
    public string? ServerCountry { get; init; }

    [JsonPropertyName("server_id")]
    public string? ServerId { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("bytes_received")]
    public double? BytesReceived { get; init; }

    [JsonPropertyName("bytes_sent")]
    public double? BytesSent { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TagEntity : Entity<TagEntity, EntityState<TagAttributes>, TagAttributes>
{
    public TagEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TagEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TagAttributes
{
    [JsonPropertyName("tag_id")]
    public string? TagId { get; init; }

    [JsonPropertyName("last_scanned_by_device_id")]
    public string? LastScannedByDeviceId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TextEntity : Entity<TextEntity, EntityState<TextAttributes>, TextAttributes>
{
    public TextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TextAttributes
{
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("action params")]
    public string? Actionparams { get; init; }
}

public partial record TimerEntity : Entity<TimerEntity, EntityState<TimerAttributes>, TimerAttributes>, ITimerEntityCore
{
    public TimerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TimerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TimerAttributes
{
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("restore")]
    public bool? Restore { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("remaining")]
    public string? Remaining { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("display_precision")]
    public double? DisplayPrecision { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public object? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public string? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("update_percentage")]
    public double? UpdatePercentage { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record WakeWordEntity : Entity<WakeWordEntity, EntityState<WakeWordAttributes>, WakeWordAttributes>
{
    public WakeWordEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WakeWordEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WakeWordAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("uv_index")]
    public double? UvIndex { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    BermudaServices Bermuda { get; }

    BlueprintServices Blueprint { get; }

    BrowserModServices BrowserMod { get; }

    ButtonServices Button { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FluxLedServices FluxLed { get; }

    FrontendServices Frontend { get; }

    GoogleAssistantServices GoogleAssistant { get; }

    GoogleGenerativeAiConversationServices GoogleGenerativeAiConversation { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    HomekitServices Homekit { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NoderedServices Nodered { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RepairsServices Repairs { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SonoffServices Sonoff { get; }

    SpookServices Spook { get; }

    SshServices Ssh { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimeServices Time { get; }

    TimerServices Timer { get; }

    TplinkServices Tplink { get; }

    TtsServices Tts { get; }

    UniversalServices Universal { get; }

    UpdateServices Update { get; }

    UtilityMeterServices UtilityMeter { get; }

    VacuumServices Vacuum { get; }

    WakeOnLanServices WakeOnLan { get; }

    WatchmanServices Watchman { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    WebostvServices Webostv { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public BermudaServices Bermuda => new(_haContext);
    public BlueprintServices Blueprint => new(_haContext);
    public BrowserModServices BrowserMod => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FluxLedServices FluxLed => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GoogleAssistantServices GoogleAssistant => new(_haContext);
    public GoogleGenerativeAiConversationServices GoogleGenerativeAiConversation => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HomekitServices Homekit => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NoderedServices Nodered => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RepairsServices Repairs => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SonoffServices Sonoff => new(_haContext);
    public SpookServices Spook => new(_haContext);
    public SshServices Ssh => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimeServices Time => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TplinkServices Tplink => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UniversalServices Universal => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public UtilityMeterServices UtilityMeter => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WakeOnLanServices WakeOnLan => new(_haContext);
    public WatchmanServices Watchman => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public WebostvServices Webostv => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Arms the alarm in the away mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Arms the alarm in the home mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Arms the alarm in the night mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Arms the alarm in the vacation mode.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Triggers the alarm manually.</summary>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("automation", "reload", null, data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "toggle", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("automation", "turn_on", target, data);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a new backup with automatic backup settings.</summary>
    public void CreateAutomatic(object? data = null)
    {
        _haContext.CallService("backup", "create_automatic", null, data);
    }
}

public partial class BermudaServices
{
    private readonly IHaContext _haContext;
    public BermudaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Returns the internal data structure, optionally limited to the given address(es). Includes the rssi and other info from each scanner</summary>
    public void DumpDevices(BermudaDumpDevicesParameters data)
    {
        _haContext.CallService("bermuda", "dump_devices", null, data);
    }

    ///<summary>Returns the internal data structure, optionally limited to the given address(es). Includes the rssi and other info from each scanner</summary>
    ///<param name="addresses">An optional space-separated list of MAC addresses to return info on. If blank get all addresses. eg: EE:E8:37:9F:6B:54 C7:B8:C6:B0:27:11 AA:AA:AA:AA:AA:AA</param>
    ///<param name="configuredDevices">Select to include only scanners and configured devices in the output. eg: False</param>
    ///<param name="redact">Set to TRUE to ensure MAC addresses are redacted in output for privacy. eg: False</param>
    public void DumpDevices(object? addresses = null, object? configuredDevices = null, object? redact = null)
    {
        _haContext.CallService("bermuda", "dump_devices", null, new BermudaDumpDevicesParameters { Addresses = addresses, ConfiguredDevices = configuredDevices, Redact = redact });
    }

    ///<summary>Returns the internal data structure, optionally limited to the given address(es). Includes the rssi and other info from each scanner</summary>
    public Task<JsonElement?> DumpDevicesAsync(BermudaDumpDevicesParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("bermuda", "dump_devices", null, data);
    }

    ///<summary>Returns the internal data structure, optionally limited to the given address(es). Includes the rssi and other info from each scanner</summary>
    ///<param name="addresses">An optional space-separated list of MAC addresses to return info on. If blank get all addresses. eg: EE:E8:37:9F:6B:54 C7:B8:C6:B0:27:11 AA:AA:AA:AA:AA:AA</param>
    ///<param name="configuredDevices">Select to include only scanners and configured devices in the output. eg: False</param>
    ///<param name="redact">Set to TRUE to ensure MAC addresses are redacted in output for privacy. eg: False</param>
    public Task<JsonElement?> DumpDevicesAsync(object? addresses = null, object? configuredDevices = null, object? redact = null)
    {
        return _haContext.CallServiceWithResponseAsync("bermuda", "dump_devices", null, new BermudaDumpDevicesParameters { Addresses = addresses, ConfiguredDevices = configuredDevices, Redact = redact });
    }
}

public partial record BermudaDumpDevicesParameters
{
    ///<summary>An optional space-separated list of MAC addresses to return info on. If blank get all addresses. eg: EE:E8:37:9F:6B:54 C7:B8:C6:B0:27:11 AA:AA:AA:AA:AA:AA</summary>
    [JsonPropertyName("addresses")]
    public object? Addresses { get; init; }

    ///<summary>Select to include only scanners and configured devices in the output. eg: False</summary>
    [JsonPropertyName("configured_devices")]
    public object? ConfiguredDevices { get; init; }

    ///<summary>Set to TRUE to ensure MAC addresses are redacted in output for privacy. eg: False</summary>
    [JsonPropertyName("redact")]
    public object? Redact { get; init; }
}

public partial class BlueprintServices
{
    private readonly IHaContext _haContext;
    public BlueprintServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Import a blueprint.</summary>
    public void Import(BlueprintImportParameters data)
    {
        _haContext.CallService("blueprint", "import", null, data);
    }

    ///<summary>Import a blueprint.</summary>
    ///<param name="url">The URL to import the blueprint from.</param>
    public void Import(string url)
    {
        _haContext.CallService("blueprint", "import", null, new BlueprintImportParameters { Url = url });
    }
}

public partial record BlueprintImportParameters
{
    ///<summary>The URL to import the blueprint from.</summary>
    [JsonPropertyName("url")]
    public string? Url { get; init; }
}

public partial class BrowserModServices
{
    private readonly IHaContext _haContext;
    public BrowserModServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close a popup</summary>
    public void ClosePopup(BrowserModClosePopupParameters data)
    {
        _haContext.CallService("browser_mod", "close_popup", null, data);
    }

    ///<summary>Close a popup</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    public void ClosePopup(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null)
    {
        _haContext.CallService("browser_mod", "close_popup", null, new BrowserModClosePopupParameters { BrowserId = browserId, UserId = userId });
    }

    ///<summary>Print text to browser console</summary>
    public void Console(BrowserModConsoleParameters data)
    {
        _haContext.CallService("browser_mod", "console", null, data);
    }

    ///<summary>Print text to browser console</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="message">Text to print</param>
    public void Console(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, string? message = null)
    {
        _haContext.CallService("browser_mod", "console", null, new BrowserModConsoleParameters { BrowserId = browserId, UserId = userId, Message = message });
    }

    ///<summary>Wait for a time</summary>
    public void Delay(BrowserModDelayParameters data)
    {
        _haContext.CallService("browser_mod", "delay", null, data);
    }

    ///<summary>Wait for a time</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="time">Time to wait (ms)</param>
    public void Delay(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, double? time = null)
    {
        _haContext.CallService("browser_mod", "delay", null, new BrowserModDelayParameters { BrowserId = browserId, UserId = userId, Time = time });
    }

    ///<summary>Deregister a browser. Include at leaset one paremeter. Calling wiith either exclude parameter will deregister all browsers except those excluded.</summary>
    public void DeregisterBrowser(BrowserModDeregisterBrowserParameters data)
    {
        _haContext.CallService("browser_mod", "deregister_browser", null, data);
    }

    ///<summary>Deregister a browser. Include at leaset one paremeter. Calling wiith either exclude parameter will deregister all browsers except those excluded.</summary>
    ///<param name="browserId"></param>
    ///<param name="browserIdExclude">Exclude browser from deregister</param>
    ///<param name="areaIdExclude">Exclude browsers in area from deregister</param>
    public void DeregisterBrowser(IEnumerable<string>? browserId = null, IEnumerable<string>? browserIdExclude = null, IEnumerable<string>? areaIdExclude = null)
    {
        _haContext.CallService("browser_mod", "deregister_browser", null, new BrowserModDeregisterBrowserParameters { BrowserId = browserId, BrowserIdExclude = browserIdExclude, AreaIdExclude = areaIdExclude });
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    public void Javascript(BrowserModJavascriptParameters data)
    {
        _haContext.CallService("browser_mod", "javascript", null, data);
    }

    ///<summary>Run arbitrary JavaScript code</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="code">JavaScript code to run</param>
    public void Javascript(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, object? code = null)
    {
        _haContext.CallService("browser_mod", "javascript", null, new BrowserModJavascriptParameters { BrowserId = browserId, UserId = userId, Code = code });
    }

    ///<summary>Show more-info dialog</summary>
    public void MoreInfo(BrowserModMoreInfoParameters data)
    {
        _haContext.CallService("browser_mod", "more_info", null, data);
    }

    ///<summary>Show more-info dialog</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="entity"></param>
    ///<param name="large"></param>
    ///<param name="ignorePopupCard"></param>
    public void MoreInfo(string entity, IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, bool? large = null, bool? ignorePopupCard = null)
    {
        _haContext.CallService("browser_mod", "more_info", null, new BrowserModMoreInfoParameters { BrowserId = browserId, UserId = userId, Entity = entity, Large = large, IgnorePopupCard = ignorePopupCard });
    }

    ///<summary>Navigate browser to a different page</summary>
    public void Navigate(BrowserModNavigateParameters data)
    {
        _haContext.CallService("browser_mod", "navigate", null, data);
    }

    ///<summary>Navigate browser to a different page</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="path">Target path</param>
    public void Navigate(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, string? path = null)
    {
        _haContext.CallService("browser_mod", "navigate", null, new BrowserModNavigateParameters { BrowserId = browserId, UserId = userId, Path = path });
    }

    ///<summary>Display a short notification</summary>
    public void Notification(BrowserModNotificationParameters data)
    {
        _haContext.CallService("browser_mod", "notification", null, data);
    }

    ///<summary>Display a short notification</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="message">Message to display</param>
    ///<param name="duration">Time before closing (ms)</param>
    ///<param name="actionText">Text of optional action button</param>
    ///<param name="action">Action to perform when the action button is pressed</param>
    public void Notification(string message, IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, double? duration = null, string? actionText = null, object? action = null)
    {
        _haContext.CallService("browser_mod", "notification", null, new BrowserModNotificationParameters { BrowserId = browserId, UserId = userId, Message = message, Duration = duration, ActionText = actionText, Action = action });
    }

    ///<summary>Display a popup</summary>
    public void Popup(BrowserModPopupParameters data)
    {
        _haContext.CallService("browser_mod", "popup", null, data);
    }

    ///<summary>Display a popup</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="title">Popup title</param>
    ///<param name="content">Popup content (Test or lovelace card configuration)</param>
    ///<param name="size"></param>
    ///<param name="rightButton">Text of the right button</param>
    ///<param name="rightButtonAction">Action to perform when the right button is pressed</param>
    ///<param name="leftButton">Text of the left button</param>
    ///<param name="leftButtonAction">Action to perform when left button is pressed</param>
    ///<param name="dismissable">Whether the popup can be closed by the user without action</param>
    ///<param name="dismissAction">Action to perform when popup is dismissed</param>
    ///<param name="autoclose">Close the popup automatically on mouse, pointer or keyboard activity</param>
    ///<param name="timeout">Time before closing (ms)</param>
    ///<param name="timeoutAction">Action to perform when popup is closed by timeout</param>
    ///<param name="timeoutHideProgress">Hide timeout progress bar</param>
    ///<param name="allowNestedMoreInfo">Allow nested more-info dialogs to be opened from this popup</param>
    ///<param name="style">CSS code to apply to the popup window</param>
    public void Popup(object content, IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, string? title = null, object? size = null, string? rightButton = null, object? rightButtonAction = null, string? leftButton = null, object? leftButtonAction = null, bool? dismissable = null, object? dismissAction = null, bool? autoclose = null, double? timeout = null, object? timeoutAction = null, bool? timeoutHideProgress = null, bool? allowNestedMoreInfo = null, string? style = null)
    {
        _haContext.CallService("browser_mod", "popup", null, new BrowserModPopupParameters { BrowserId = browserId, UserId = userId, Title = title, Content = content, Size = size, RightButton = rightButton, RightButtonAction = rightButtonAction, LeftButton = leftButton, LeftButtonAction = leftButtonAction, Dismissable = dismissable, DismissAction = dismissAction, Autoclose = autoclose, Timeout = timeout, TimeoutAction = timeoutAction, TimeoutHideProgress = timeoutHideProgress, AllowNestedMoreInfo = allowNestedMoreInfo, Style = style });
    }

    ///<summary>Refresh page</summary>
    public void Refresh(BrowserModRefreshParameters data)
    {
        _haContext.CallService("browser_mod", "refresh", null, data);
    }

    ///<summary>Refresh page</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    public void Refresh(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null)
    {
        _haContext.CallService("browser_mod", "refresh", null, new BrowserModRefreshParameters { BrowserId = browserId, UserId = userId });
    }

    ///<summary>Run a sequence of services</summary>
    public void Sequence(BrowserModSequenceParameters data)
    {
        _haContext.CallService("browser_mod", "sequence", null, data);
    }

    ///<summary>Run a sequence of services</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="sequence">List of services to run</param>
    public void Sequence(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, object? sequence = null)
    {
        _haContext.CallService("browser_mod", "sequence", null, new BrowserModSequenceParameters { BrowserId = browserId, UserId = userId, Sequence = sequence });
    }

    ///<summary>Change the current theme</summary>
    public void SetTheme(BrowserModSetThemeParameters data)
    {
        _haContext.CallService("browser_mod", "set_theme", null, data);
    }

    ///<summary>Change the current theme</summary>
    ///<param name="browserId"></param>
    ///<param name="userId"></param>
    ///<param name="theme">Name of theme or &apos;auto&apos;</param>
    ///<param name="dark">Dark/light mode</param>
    ///<param name="primaryColor">Primary theme color</param>
    ///<param name="accentColor">Accent theme color</param>
    public void SetTheme(IEnumerable<string>? browserId = null, IEnumerable<string>? userId = null, string? theme = null, object? dark = null, IReadOnlyCollection<int>? primaryColor = null, IReadOnlyCollection<int>? accentColor = null)
    {
        _haContext.CallService("browser_mod", "set_theme", null, new BrowserModSetThemeParameters { BrowserId = browserId, UserId = userId, Theme = theme, Dark = dark, PrimaryColor = primaryColor, AccentColor = accentColor });
    }
}

public partial record BrowserModClosePopupParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }
}

public partial record BrowserModConsoleParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>Text to print</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }
}

public partial record BrowserModDelayParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>Time to wait (ms)</summary>
    [JsonPropertyName("time")]
    public double? Time { get; init; }
}

public partial record BrowserModDeregisterBrowserParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    ///<summary>Exclude browser from deregister</summary>
    [JsonPropertyName("browser_id_exclude")]
    public IEnumerable<string>? BrowserIdExclude { get; init; }

    ///<summary>Exclude browsers in area from deregister</summary>
    [JsonPropertyName("area_id_exclude")]
    public IEnumerable<string>? AreaIdExclude { get; init; }
}

public partial record BrowserModJavascriptParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>JavaScript code to run</summary>
    [JsonPropertyName("code")]
    public object? Code { get; init; }
}

public partial record BrowserModMoreInfoParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    [JsonPropertyName("entity")]
    public string? Entity { get; init; }

    [JsonPropertyName("large")]
    public bool? Large { get; init; }

    [JsonPropertyName("ignore_popup_card")]
    public bool? IgnorePopupCard { get; init; }
}

public partial record BrowserModNavigateParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>Target path</summary>
    [JsonPropertyName("path")]
    public string? Path { get; init; }
}

public partial record BrowserModNotificationParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>Message to display</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Text of optional action button</summary>
    [JsonPropertyName("action_text")]
    public string? ActionText { get; init; }

    ///<summary>Action to perform when the action button is pressed</summary>
    [JsonPropertyName("action")]
    public object? Action { get; init; }
}

public partial record BrowserModPopupParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>Popup title</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Popup content (Test or lovelace card configuration)</summary>
    [JsonPropertyName("content")]
    public object? Content { get; init; }

    [JsonPropertyName("size")]
    public object? Size { get; init; }

    ///<summary>Text of the right button</summary>
    [JsonPropertyName("right_button")]
    public string? RightButton { get; init; }

    ///<summary>Action to perform when the right button is pressed</summary>
    [JsonPropertyName("right_button_action")]
    public object? RightButtonAction { get; init; }

    ///<summary>Text of the left button</summary>
    [JsonPropertyName("left_button")]
    public string? LeftButton { get; init; }

    ///<summary>Action to perform when left button is pressed</summary>
    [JsonPropertyName("left_button_action")]
    public object? LeftButtonAction { get; init; }

    ///<summary>Whether the popup can be closed by the user without action</summary>
    [JsonPropertyName("dismissable")]
    public bool? Dismissable { get; init; }

    ///<summary>Action to perform when popup is dismissed</summary>
    [JsonPropertyName("dismiss_action")]
    public object? DismissAction { get; init; }

    ///<summary>Close the popup automatically on mouse, pointer or keyboard activity</summary>
    [JsonPropertyName("autoclose")]
    public bool? Autoclose { get; init; }

    ///<summary>Time before closing (ms)</summary>
    [JsonPropertyName("timeout")]
    public double? Timeout { get; init; }

    ///<summary>Action to perform when popup is closed by timeout</summary>
    [JsonPropertyName("timeout_action")]
    public object? TimeoutAction { get; init; }

    ///<summary>Hide timeout progress bar</summary>
    [JsonPropertyName("timeout_hide_progress")]
    public bool? TimeoutHideProgress { get; init; }

    ///<summary>Allow nested more-info dialogs to be opened from this popup</summary>
    [JsonPropertyName("allow_nested_more_info")]
    public bool? AllowNestedMoreInfo { get; init; }

    ///<summary>CSS code to apply to the popup window</summary>
    [JsonPropertyName("style")]
    public string? Style { get; init; }
}

public partial record BrowserModRefreshParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }
}

public partial record BrowserModSequenceParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>List of services to run</summary>
    [JsonPropertyName("sequence")]
    public object? Sequence { get; init; }
}

public partial record BrowserModSetThemeParameters
{
    [JsonPropertyName("browser_id")]
    public IEnumerable<string>? BrowserId { get; init; }

    [JsonPropertyName("user_id")]
    public IEnumerable<string>? UserId { get; init; }

    ///<summary>Name of theme or &apos;auto&apos;</summary>
    [JsonPropertyName("theme")]
    public string? Theme { get; init; }

    ///<summary>Dark/light mode</summary>
    [JsonPropertyName("dark")]
    public object? Dark { get; init; }

    ///<summary>Primary theme color</summary>
    [JsonPropertyName("primaryColor")]
    public IReadOnlyCollection<int>? PrimaryColor { get; init; }

    ///<summary>Accent theme color</summary>
    [JsonPropertyName("accentColor")]
    public IReadOnlyCollection<int>? AccentColor { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("button", "press", target, data);
    }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "disable_motion_detection", target, data);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "enable_motion_detection", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="filename">Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, double? duration = null, double? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="filename">Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_off", target, data);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("camera", "turn_on", target, data);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Full path to filename. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public double? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Full path to filename. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show, defaults to lovelace if not specified. eg: lovelace-cast</param>
    ///<param name="viewPath">The URL path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string viewPath, string? dashboardPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show, defaults to lovelace if not specified. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The URL path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingHorizontalMode(ServiceTarget target, ClimateSetSwingHorizontalModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public void SetSwingHorizontalMode(ServiceTarget target, string swingHorizontalMode)
    {
        _haContext.CallService("climate", "set_swing_horizontal_mode", target, new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "toggle", target, data);
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_off", target, data);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("climate", "turn_on", target, data);
    }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingHorizontalModeParameters
{
    ///<summary>Horizontal swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_horizontal_mode")]
    public string? SwingHorizontalMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: on</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>The temperature setpoint.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>The max temperature setpoint.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>The min temperature setpoint.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.</summary>
    public void RemoteConnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_connect", null, data);
    }

    ///<summary>Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.</summary>
    public void RemoteDisconnect(object? data = null)
    {
        _haContext.CallService("cloud", "remote_disconnect", null, data);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public void Process(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public Task<JsonElement?> ProcessAsync(ConversationProcessParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    ///<param name="conversationId">ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</param>
    public Task<JsonElement?> ProcessAsync(string text, string? language = null, object? agentId = null, string? conversationId = null)
    {
        return _haContext.CallServiceWithResponseAsync("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId, ConversationId = conversationId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }

    ///<summary>ID of the conversation, to be able to continue a previous conversation eg: my_conversation_1</summary>
    [JsonPropertyName("conversation_id")]
    public string? ConversationId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "decrement", target, data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "increment", target, data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("counter", "reset", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover", target, data);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "close_cover_tilt", target, data);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover", target, data);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "open_cover_tilt", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, double position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, double tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover", target, data);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target, data);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle", target, data);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target, data);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public double? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public double? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Manually update the records of a seen legacy device tracker in the known_devices.yaml file.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, double? gpsAccuracy = null, double? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public double? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public void DecreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public void IncreaseSpeed(ServiceTarget target, double? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="direction">Direction of the fan rotation.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, double percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "toggle", target, data);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("fan", "turn_off", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, double? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be decreased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Percentage step by which the speed should be increased.</summary>
    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turns oscillation on/off.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction of the fan rotation.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    ///<summary>Preset fan mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to an FFmpeg-based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FluxLedServices
{
    private readonly IHaContext _haContext;
    public FluxLedServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets a custom light effect.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCustomEffect(ServiceTarget target, FluxLedSetCustomEffectParameters data)
    {
        _haContext.CallService("flux_led", "set_custom_effect", target, data);
    }

    ///<summary>Sets a custom light effect.</summary>
    ///<param name="colors">List of colors for the custom effect (RGB). (Max 16 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="transition">Effect transition. eg: jump</param>
    public void SetCustomEffect(ServiceTarget target, object colors, long? speedPct = null, object? transition = null)
    {
        _haContext.CallService("flux_led", "set_custom_effect", target, new FluxLedSetCustomEffectParameters { Colors = colors, SpeedPct = speedPct, Transition = transition });
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMusicMode(ServiceTarget target, FluxLedSetMusicModeParameters data)
    {
        _haContext.CallService("flux_led", "set_music_mode", target, data);
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    ///<param name="sensitivity">Microphone sensitivity (0-100). eg: 80</param>
    ///<param name="brightness">Light brightness (0-100). eg: 80</param>
    ///<param name="lightScreen">Light screen mode for 2 dimensional pixels (Addressable models only).</param>
    ///<param name="effect">Effect (1-16 on Addressable models, 0-3 on RGB with MIC models). eg: 1</param>
    ///<param name="foregroundColor">The foreground RGB color. eg: [255, 100, 100]</param>
    ///<param name="backgroundColor">The background RGB color (Addressable models only). eg: [255, 100, 100]</param>
    public void SetMusicMode(ServiceTarget target, long? sensitivity = null, long? brightness = null, bool? lightScreen = null, long? effect = null, IReadOnlyCollection<int>? foregroundColor = null, IReadOnlyCollection<int>? backgroundColor = null)
    {
        _haContext.CallService("flux_led", "set_music_mode", target, new FluxLedSetMusicModeParameters { Sensitivity = sensitivity, Brightness = brightness, LightScreen = lightScreen, Effect = effect, ForegroundColor = foregroundColor, BackgroundColor = backgroundColor });
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    ///<param name="target">The target for this service call</param>
    public void SetZones(ServiceTarget target, FluxLedSetZonesParameters data)
    {
        _haContext.CallService("flux_led", "set_zones", target, data);
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    ///<param name="colors">List of colors for each zone (RGB). The length of each zone is the number of pixels per segment divided by the number of colors. (Max 2048 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] - [255,255,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="effect">Effect. eg: running_water</param>
    public void SetZones(ServiceTarget target, object colors, long? speedPct = null, object? effect = null)
    {
        _haContext.CallService("flux_led", "set_zones", target, new FluxLedSetZonesParameters { Colors = colors, SpeedPct = speedPct, Effect = effect });
    }
}

public partial record FluxLedSetCustomEffectParameters
{
    ///<summary>List of colors for the custom effect (RGB). (Max 16 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] </summary>
    [JsonPropertyName("colors")]
    public object? Colors { get; init; }

    ///<summary>The speed of the effect in % (0-100, default 50). eg: 80</summary>
    [JsonPropertyName("speed_pct")]
    public long? SpeedPct { get; init; }

    ///<summary>Effect transition. eg: jump</summary>
    [JsonPropertyName("transition")]
    public object? Transition { get; init; }
}

public partial record FluxLedSetMusicModeParameters
{
    ///<summary>Microphone sensitivity (0-100). eg: 80</summary>
    [JsonPropertyName("sensitivity")]
    public long? Sensitivity { get; init; }

    ///<summary>Light brightness (0-100). eg: 80</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Light screen mode for 2 dimensional pixels (Addressable models only).</summary>
    [JsonPropertyName("light_screen")]
    public bool? LightScreen { get; init; }

    ///<summary>Effect (1-16 on Addressable models, 0-3 on RGB with MIC models). eg: 1</summary>
    [JsonPropertyName("effect")]
    public long? Effect { get; init; }

    ///<summary>The foreground RGB color. eg: [255, 100, 100]</summary>
    [JsonPropertyName("foreground_color")]
    public IReadOnlyCollection<int>? ForegroundColor { get; init; }

    ///<summary>The background RGB color (Addressable models only). eg: [255, 100, 100]</summary>
    [JsonPropertyName("background_color")]
    public IReadOnlyCollection<int>? BackgroundColor { get; init; }
}

public partial record FluxLedSetZonesParameters
{
    ///<summary>List of colors for each zone (RGB). The length of each zone is the number of pixels per segment divided by the number of colors. (Max 2048 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] - [255,255,255] </summary>
    [JsonPropertyName("colors")]
    public object? Colors { get; init; }

    ///<summary>The speed of the effect in % (0-100, default 50). eg: 80</summary>
    [JsonPropertyName("speed_pct")]
    public long? SpeedPct { get; init; }

    ///<summary>Effect. eg: running_water</summary>
    [JsonPropertyName("effect")]
    public object? Effect { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes(object? data = null)
    {
        _haContext.CallService("frontend", "reload_themes", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GoogleAssistantServices
{
    private readonly IHaContext _haContext;
    public GoogleAssistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    public void RequestSync(GoogleAssistantRequestSyncParameters data)
    {
        _haContext.CallService("google_assistant", "request_sync", null, data);
    }

    ///<summary>Sends a request_sync command to Google.</summary>
    ///<param name="agentUserId">Only needed for automations. Specific Home Assistant user ID (not username, ID in Settings &gt; People &gt; Users &gt; under username) to sync with Google Assistant. Not needed when you use this action through Home Assistant frontend or API. Used in automation, script or other place where context.user_id is missing.</param>
    public void RequestSync(string? agentUserId = null)
    {
        _haContext.CallService("google_assistant", "request_sync", null, new GoogleAssistantRequestSyncParameters { AgentUserId = agentUserId });
    }
}

public partial record GoogleAssistantRequestSyncParameters
{
    ///<summary>Only needed for automations. Specific Home Assistant user ID (not username, ID in Settings &gt; People &gt; Users &gt; under username) to sync with Google Assistant. Not needed when you use this action through Home Assistant frontend or API. Used in automation, script or other place where context.user_id is missing.</summary>
    [JsonPropertyName("agent_user_id")]
    public string? AgentUserId { get; init; }
}

public partial class GoogleGenerativeAiConversationServices
{
    private readonly IHaContext _haContext;
    public GoogleGenerativeAiConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    public void GenerateContent(GoogleGenerativeAiConversationGenerateContentParameters data)
    {
        _haContext.CallService("google_generative_ai_conversation", "generate_content", null, data);
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    ///<param name="prompt">The prompt eg: Describe what you see in these images</param>
    ///<param name="imageFilename">Deprecated. Use filenames instead. eg: /config/www/image.jpg</param>
    ///<param name="filenames">Attachments to add to the prompt (images, PDFs, etc) eg: /config/www/image.jpg</param>
    public void GenerateContent(string prompt, object? imageFilename = null, IEnumerable<string>? filenames = null)
    {
        _haContext.CallService("google_generative_ai_conversation", "generate_content", null, new GoogleGenerativeAiConversationGenerateContentParameters { Prompt = prompt, ImageFilename = imageFilename, Filenames = filenames });
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    public Task<JsonElement?> GenerateContentAsync(GoogleGenerativeAiConversationGenerateContentParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("google_generative_ai_conversation", "generate_content", null, data);
    }

    ///<summary>Generate content from a prompt consisting of text and optionally images</summary>
    ///<param name="prompt">The prompt eg: Describe what you see in these images</param>
    ///<param name="imageFilename">Deprecated. Use filenames instead. eg: /config/www/image.jpg</param>
    ///<param name="filenames">Attachments to add to the prompt (images, PDFs, etc) eg: /config/www/image.jpg</param>
    public Task<JsonElement?> GenerateContentAsync(string prompt, object? imageFilename = null, IEnumerable<string>? filenames = null)
    {
        return _haContext.CallServiceWithResponseAsync("google_generative_ai_conversation", "generate_content", null, new GoogleGenerativeAiConversationGenerateContentParameters { Prompt = prompt, ImageFilename = imageFilename, Filenames = filenames });
    }
}

public partial record GoogleGenerativeAiConversationGenerateContentParameters
{
    ///<summary>The prompt eg: Describe what you see in these images</summary>
    [JsonPropertyName("prompt")]
    public string? Prompt { get; init; }

    ///<summary>Deprecated. Use filenames instead. eg: /config/www/image.jpg</summary>
    [JsonPropertyName("image_filename")]
    public object? ImageFilename { get; init; }

    ///<summary>Attachments to add to the prompt (images, PDFs, etc) eg: /config/www/image.jpg</summary>
    [JsonPropertyName("filenames")]
    public IEnumerable<string>? Filenames { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("group", "reload", null, data);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on to restart. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on to start. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to the add-on&apos;s standard input.</summary>
    ///<param name="addon">The add-on to write to. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on to stop. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from the backup.</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot(object? data = null)
    {
        _haContext.CallService("hassio", "host_reboot", null, data);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown(object? data = null)
    {
        _haContext.CallService("hassio", "host_shutdown", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on to restart. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on to start. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on to write to. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on to stop. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from the backup.</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to restore from the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to restore from the backup. Use the name slug of each add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds an alias to an area.</summary>
    public void AddAliasToArea(HomeassistantAddAliasToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_alias_to_area", null, data);
    }

    ///<summary>Adds an alias to an area.</summary>
    ///<param name="areaId">The ID of the area to add the alias to.</param>
    ///<param name="alias">The alias (or list of aliasses) to add to the area.</param>
    public void AddAliasToArea(string areaId, object @alias)
    {
        _haContext.CallService("homeassistant", "add_alias_to_area", null, new HomeassistantAddAliasToAreaParameters { AreaId = areaId, Alias = @alias });
    }

    ///<summary>Adds an alias to a floor.</summary>
    public void AddAliasToFloor(HomeassistantAddAliasToFloorParameters data)
    {
        _haContext.CallService("homeassistant", "add_alias_to_floor", null, data);
    }

    ///<summary>Adds an alias to a floor.</summary>
    ///<param name="floorId">The ID of the floor to add the alias to.</param>
    ///<param name="alias">The alias (or list of aliasses) to add to the floor.</param>
    public void AddAliasToFloor(object floorId, object @alias)
    {
        _haContext.CallService("homeassistant", "add_alias_to_floor", null, new HomeassistantAddAliasToFloorParameters { FloorId = floorId, Alias = @alias });
    }

    ///<summary>Adds an area to a floor. Please note, if the area is already on a floor, it will be removed from the previous floor.</summary>
    public void AddAreaToFloor(HomeassistantAddAreaToFloorParameters data)
    {
        _haContext.CallService("homeassistant", "add_area_to_floor", null, data);
    }

    ///<summary>Adds an area to a floor. Please note, if the area is already on a floor, it will be removed from the previous floor.</summary>
    ///<param name="floorId">The ID of the floor to add the area on.</param>
    ///<param name="areaId">The ID of the area(s) to add to the floor.</param>
    public void AddAreaToFloor(object floorId, IEnumerable<string> areaId)
    {
        _haContext.CallService("homeassistant", "add_area_to_floor", null, new HomeassistantAddAreaToFloorParameters { FloorId = floorId, AreaId = areaId });
    }

    ///<summary>Adds an device to an area. Please note, if the device is already in an area, it will be removed from the previous area.</summary>
    public void AddDeviceToArea(HomeassistantAddDeviceToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_device_to_area", null, data);
    }

    ///<summary>Adds an device to an area. Please note, if the device is already in an area, it will be removed from the previous area.</summary>
    ///<param name="areaId">The ID of the area to add the device to.</param>
    ///<param name="deviceId">The ID of the device(s) to add to the area.</param>
    public void AddDeviceToArea(string areaId, IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "add_device_to_area", null, new HomeassistantAddDeviceToAreaParameters { AreaId = areaId, DeviceId = deviceId });
    }

    ///<summary>Adds an entity to an area. Please note, if the enity is already in an area, it will be removed from the previous area. This will override the area the device, that provides this entity, is in.</summary>
    public void AddEntityToArea(HomeassistantAddEntityToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_entity_to_area", null, data);
    }

    ///<summary>Adds an entity to an area. Please note, if the enity is already in an area, it will be removed from the previous area. This will override the area the device, that provides this entity, is in.</summary>
    ///<param name="areaId">The ID of the area to add the entity to.</param>
    ///<param name="entityId">The ID of the entity (or entities) to add to the area.</param>
    public void AddEntityToArea(string areaId, IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "add_entity_to_area", null, new HomeassistantAddEntityToAreaParameters { AreaId = areaId, EntityId = entityId });
    }

    ///<summary>Adds a label to an area. If multiple labels or multiple areas are provided, all combinations will be added.</summary>
    public void AddLabelToArea(HomeassistantAddLabelToAreaParameters data)
    {
        _haContext.CallService("homeassistant", "add_label_to_area", null, data);
    }

    ///<summary>Adds a label to an area. If multiple labels or multiple areas are provided, all combinations will be added.</summary>
    ///<param name="labelId">The ID(s) of the label(s) to add the area(s).</param>
    ///<param name="areaId">The ID(s) of the area(s) to add the label(s) to.</param>
    public void AddLabelToArea(IEnumerable<object> labelId, IEnumerable<string> areaId)
    {
        _haContext.CallService("homeassistant", "add_label_to_area", null, new HomeassistantAddLabelToAreaParameters { LabelId = labelId, AreaId = areaId });
    }

    ///<summary>Adds a label to a device. If multiple labels or multiple devices are provided, all combinations will be added.</summary>
    public void AddLabelToDevice(HomeassistantAddLabelToDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "add_label_to_device", null, data);
    }

    ///<summary>Adds a label to a device. If multiple labels or multiple devices are provided, all combinations will be added.</summary>
    ///<param name="labelId">The ID(s) of the label(s) to add the device(s).</param>
    ///<param name="deviceId">The ID(s) of the device(s) to add the label(s) to.</param>
    public void AddLabelToDevice(IEnumerable<object> labelId, IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "add_label_to_device", null, new HomeassistantAddLabelToDeviceParameters { LabelId = labelId, DeviceId = deviceId });
    }

    ///<summary>Adds a label to an entity. If multiple labels or multiple entities are provided, all combinations will be added.</summary>
    public void AddLabelToEntity(HomeassistantAddLabelToEntityParameters data)
    {
        _haContext.CallService("homeassistant", "add_label_to_entity", null, data);
    }

    ///<summary>Adds a label to an entity. If multiple labels or multiple entities are provided, all combinations will be added.</summary>
    ///<param name="labelId">The ID(s) of the label(s) to add the entity/entities.</param>
    ///<param name="entityId">The ID(s) of the entity/entities to add the label(s) to.</param>
    public void AddLabelToEntity(IEnumerable<object> labelId, IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "add_label_to_entity", null, new HomeassistantAddLabelToEntityParameters { LabelId = labelId, EntityId = entityId });
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "check_config", null, data);
    }

    ///<summary>Creates a new area on the fly.</summary>
    public void CreateArea(HomeassistantCreateAreaParameters data)
    {
        _haContext.CallService("homeassistant", "create_area", null, data);
    }

    ///<summary>Creates a new area on the fly.</summary>
    ///<param name="name">The name of the area to create.</param>
    ///<param name="icon">Icon to use for the area.</param>
    ///<param name="aliases">A list of aliases for the area. This is useful if you want to use the area in a different language or different nickname.</param>
    public void CreateArea(string name, object? icon = null, object? aliases = null)
    {
        _haContext.CallService("homeassistant", "create_area", null, new HomeassistantCreateAreaParameters { Name = name, Icon = icon, Aliases = aliases });
    }

    ///<summary>Creates a new floor on the fly.</summary>
    public void CreateFloor(HomeassistantCreateFloorParameters data)
    {
        _haContext.CallService("homeassistant", "create_floor", null, data);
    }

    ///<summary>Creates a new floor on the fly.</summary>
    ///<param name="name">The name of the floor to create.</param>
    ///<param name="icon">Icon to use for the floor.</param>
    ///<param name="level">The level the floor is on in your home.</param>
    ///<param name="aliases">A list of aliases for the floor. This is useful if you want to use the floor in a different language or different nickname.</param>
    public void CreateFloor(string name, object? icon = null, double? level = null, object? aliases = null)
    {
        _haContext.CallService("homeassistant", "create_floor", null, new HomeassistantCreateFloorParameters { Name = name, Icon = icon, Level = level, Aliases = aliases });
    }

    ///<summary>Creates a new label on the fly.</summary>
    public void CreateLabel(HomeassistantCreateLabelParameters data)
    {
        _haContext.CallService("homeassistant", "create_label", null, data);
    }

    ///<summary>Creates a new label on the fly.</summary>
    ///<param name="name">The name of the label to create.</param>
    ///<param name="description">Description for the label.</param>
    ///<param name="icon">Icon to use for the label.</param>
    ///<param name="color">Color to use for the label. Can be a color name from the list, or a hex color code (like #FF0000).</param>
    public void CreateLabel(string name, string description, object? icon = null, object? color = null)
    {
        _haContext.CallService("homeassistant", "create_label", null, new HomeassistantCreateLabelParameters { Name = name, Description = description, Icon = icon, Color = color });
    }

    ///<summary>Deletes all orphaned entities that no longer have an integration that claim/provide them. Please note, if the integration was just removed, it might need a restart for Home Assistant to realize they are orphaned. **WARNING** Entities might have been marked orphaned because an integration is offline or not working since Home Assistant started. Calling this action will delete those entities as well.</summary>
    public void DeleteAllOrphanedEntities(object? data = null)
    {
        _haContext.CallService("homeassistant", "delete_all_orphaned_entities", null, data);
    }

    ///<summary>Deletes a new area on the fly.</summary>
    public void DeleteArea(HomeassistantDeleteAreaParameters data)
    {
        _haContext.CallService("homeassistant", "delete_area", null, data);
    }

    ///<summary>Deletes a new area on the fly.</summary>
    ///<param name="areaId">The ID of the area to delete.</param>
    public void DeleteArea(string areaId)
    {
        _haContext.CallService("homeassistant", "delete_area", null, new HomeassistantDeleteAreaParameters { AreaId = areaId });
    }

    ///<summary>Deletes a floor on the fly.</summary>
    public void DeleteFloor(HomeassistantDeleteFloorParameters data)
    {
        _haContext.CallService("homeassistant", "delete_floor", null, data);
    }

    ///<summary>Deletes a floor on the fly.</summary>
    ///<param name="floorId">The ID of the floor to delete.</param>
    public void DeleteFloor(object floorId)
    {
        _haContext.CallService("homeassistant", "delete_floor", null, new HomeassistantDeleteFloorParameters { FloorId = floorId });
    }

    ///<summary>Deletes a label on the fly.</summary>
    public void DeleteLabel(HomeassistantDeleteLabelParameters data)
    {
        _haContext.CallService("homeassistant", "delete_label", null, data);
    }

    ///<summary>Deletes a label on the fly.</summary>
    ///<param name="labelId">The ID of the label to delete.</param>
    public void DeleteLabel(object labelId)
    {
        _haContext.CallService("homeassistant", "delete_label", null, new HomeassistantDeleteLabelParameters { LabelId = labelId });
    }

    ///<summary>Disables an integration configuration entry.</summary>
    public void DisableConfigEntry(HomeassistantDisableConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "disable_config_entry", null, data);
    }

    ///<summary>Disables an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to disable.</param>
    public void DisableConfigEntry(object configEntryId)
    {
        _haContext.CallService("homeassistant", "disable_config_entry", null, new HomeassistantDisableConfigEntryParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Disables a device on the fly.</summary>
    public void DisableDevice(HomeassistantDisableDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "disable_device", null, data);
    }

    ///<summary>Disables a device on the fly.</summary>
    ///<param name="deviceId">The device to disable.</param>
    public void DisableDevice(IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "disable_device", null, new HomeassistantDisableDeviceParameters { DeviceId = deviceId });
    }

    ///<summary>Disables an entity (or entities) on the fly.</summary>
    public void DisableEntity(HomeassistantDisableEntityParameters data)
    {
        _haContext.CallService("homeassistant", "disable_entity", null, data);
    }

    ///<summary>Disables an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to disable.</param>
    public void DisableEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "disable_entity", null, new HomeassistantDisableEntityParameters { EntityId = entityId });
    }

    ///<summary>Disables polling for updates for an integration configuration entry.</summary>
    public void DisablePolling(HomeassistantDisablePollingParameters data)
    {
        _haContext.CallService("homeassistant", "disable_polling", null, data);
    }

    ///<summary>Disables polling for updates for an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to disable polling for.</param>
    public void DisablePolling(object configEntryId)
    {
        _haContext.CallService("homeassistant", "disable_polling", null, new HomeassistantDisablePollingParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Enables an integration configuration entry.</summary>
    public void EnableConfigEntry(HomeassistantEnableConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "enable_config_entry", null, data);
    }

    ///<summary>Enables an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to enable.</param>
    public void EnableConfigEntry(object configEntryId)
    {
        _haContext.CallService("homeassistant", "enable_config_entry", null, new HomeassistantEnableConfigEntryParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Enables a device on the fly.</summary>
    public void EnableDevice(HomeassistantEnableDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "enable_device", null, data);
    }

    ///<summary>Enables a device on the fly.</summary>
    ///<param name="deviceId">The device to disable.</param>
    public void EnableDevice(IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "enable_device", null, new HomeassistantEnableDeviceParameters { DeviceId = deviceId });
    }

    ///<summary>Enables an entity (or entities) on the fly.</summary>
    public void EnableEntity(HomeassistantEnableEntityParameters data)
    {
        _haContext.CallService("homeassistant", "enable_entity", null, data);
    }

    ///<summary>Enables an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to enable.</param>
    public void EnableEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "enable_entity", null, new HomeassistantEnableEntityParameters { EntityId = entityId });
    }

    ///<summary>Enables polling for updates for an integration configuration entry.</summary>
    public void EnablePolling(HomeassistantEnablePollingParameters data)
    {
        _haContext.CallService("homeassistant", "enable_polling", null, data);
    }

    ///<summary>Enables polling for updates for an integration configuration entry.</summary>
    ///<param name="configEntryId">The integration configuration entry to enable polling for.</param>
    public void EnablePolling(object configEntryId)
    {
        _haContext.CallService("homeassistant", "enable_polling", null, new HomeassistantEnablePollingParameters { ConfigEntryId = configEntryId });
    }

    ///<summary>Hides an entity (or entities) on the fly.</summary>
    public void HideEntity(HomeassistantHideEntityParameters data)
    {
        _haContext.CallService("homeassistant", "hide_entity", null, data);
    }

    ///<summary>Hides an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to hide.</param>
    public void HideEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "hide_entity", null, new HomeassistantHideEntityParameters { EntityId = entityId });
    }

    ///<summary>Ignore all currently discovered devices that are shown on the integrations dashboard. This will not ignore devices that are discovered after this.</summary>
    public void IgnoreAllDiscovered(HomeassistantIgnoreAllDiscoveredParameters data)
    {
        _haContext.CallService("homeassistant", "ignore_all_discovered", null, data);
    }

    ///<summary>Ignore all currently discovered devices that are shown on the integrations dashboard. This will not ignore devices that are discovered after this.</summary>
    ///<param name="domain">The integration domain to ignore all discovered devices for. If not provided, all domains will be considered to be ignored.</param>
    public void IgnoreAllDiscovered(string? domain = null)
    {
        _haContext.CallService("homeassistant", "ignore_all_discovered", null, new HomeassistantIgnoreAllDiscoveredParameters { Domain = domain });
    }

    ///<summary>Lists all orphaned database entities unclaimed by any integration.</summary>
    public void ListOrphanedDatabaseEntities(object? data = null)
    {
        _haContext.CallService("homeassistant", "list_orphaned_database_entities", null, data);
    }

    ///<summary>Lists all orphaned database entities unclaimed by any integration.</summary>
    public Task<JsonElement?> ListOrphanedDatabaseEntitiesAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("homeassistant", "list_orphaned_database_entities", null, data);
    }

    ///<summary>Reloads all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_all", null, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, object? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the Core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_core_config", null, data);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates(object? data = null)
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null, data);
    }

    ///<summary>Removes an alias from an area.</summary>
    public void RemoveAliasFromArea(HomeassistantRemoveAliasFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_area", null, data);
    }

    ///<summary>Removes an alias from an area.</summary>
    ///<param name="areaId">The ID of the area to remove the alias from.</param>
    ///<param name="alias">The alias (or list of aliasses) to remove from the area.</param>
    public void RemoveAliasFromArea(string areaId, object @alias)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_area", null, new HomeassistantRemoveAliasFromAreaParameters { AreaId = areaId, Alias = @alias });
    }

    ///<summary>Removes an alias from a floor.</summary>
    public void RemoveAliasFromFloor(HomeassistantRemoveAliasFromFloorParameters data)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_floor", null, data);
    }

    ///<summary>Removes an alias from a floor.</summary>
    ///<param name="floorId">The ID of the floor to remove the alias from.</param>
    ///<param name="alias">The alias (or list of aliasses) to remove from the floor.</param>
    public void RemoveAliasFromFloor(object floorId, object @alias)
    {
        _haContext.CallService("homeassistant", "remove_alias_from_floor", null, new HomeassistantRemoveAliasFromFloorParameters { FloorId = floorId, Alias = @alias });
    }

    ///<summary>Removes an area from a floor. As an area can only be on one floor, this call doesn&apos;t need to specify the floor.</summary>
    public void RemoveAreaFromFloor(HomeassistantRemoveAreaFromFloorParameters data)
    {
        _haContext.CallService("homeassistant", "remove_area_from_floor", null, data);
    }

    ///<summary>Removes an area from a floor. As an area can only be on one floor, this call doesn&apos;t need to specify the floor.</summary>
    ///<param name="areaId">The ID of the area to remove the floor from.</param>
    public void RemoveAreaFromFloor(IEnumerable<string> areaId)
    {
        _haContext.CallService("homeassistant", "remove_area_from_floor", null, new HomeassistantRemoveAreaFromFloorParameters { AreaId = areaId });
    }

    ///<summary>Removes a device from an area. As a device can only be in one area, this call doesn&apos;t need to specify the area.</summary>
    public void RemoveDeviceFromArea(HomeassistantRemoveDeviceFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_device_from_area", null, data);
    }

    ///<summary>Removes a device from an area. As a device can only be in one area, this call doesn&apos;t need to specify the area.</summary>
    ///<param name="deviceId">The ID of the device to remove the area from.</param>
    public void RemoveDeviceFromArea(IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "remove_device_from_area", null, new HomeassistantRemoveDeviceFromAreaParameters { DeviceId = deviceId });
    }

    ///<summary>Removes an entity from an area. As an entity can only be in one area, this call doesn&apos;t need to specify the area. Please note, the entity will still be in the area of the device that provides it after this call.</summary>
    public void RemoveEntityFromArea(HomeassistantRemoveEntityFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_entity_from_area", null, data);
    }

    ///<summary>Removes an entity from an area. As an entity can only be in one area, this call doesn&apos;t need to specify the area. Please note, the entity will still be in the area of the device that provides it after this call.</summary>
    ///<param name="entityId">The ID of the entity (or entities) to remove the area from.</param>
    public void RemoveEntityFromArea(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "remove_entity_from_area", null, new HomeassistantRemoveEntityFromAreaParameters { EntityId = entityId });
    }

    ///<summary>Removes a label to an area. If multiple labels or multiple areas are provided, all combinations will be removed.</summary>
    public void RemoveLabelFromArea(HomeassistantRemoveLabelFromAreaParameters data)
    {
        _haContext.CallService("homeassistant", "remove_label_from_area", null, data);
    }

    ///<summary>Removes a label to an area. If multiple labels or multiple areas are provided, all combinations will be removed.</summary>
    ///<param name="labelId">The ID(s) of the label(s) to remove from the area(s).</param>
    ///<param name="areaId">The ID(s) of the area(s) to remove the label(s) from.</param>
    public void RemoveLabelFromArea(IEnumerable<object> labelId, IEnumerable<string> areaId)
    {
        _haContext.CallService("homeassistant", "remove_label_from_area", null, new HomeassistantRemoveLabelFromAreaParameters { LabelId = labelId, AreaId = areaId });
    }

    ///<summary>Removes a label from a device. If multiple labels or multiple devices are provided, all combinations will be removed.</summary>
    public void RemoveLabelFromDevice(HomeassistantRemoveLabelFromDeviceParameters data)
    {
        _haContext.CallService("homeassistant", "remove_label_from_device", null, data);
    }

    ///<summary>Removes a label from a device. If multiple labels or multiple devices are provided, all combinations will be removed.</summary>
    ///<param name="labelId">The ID(s) of the label(s) to remove from the device(s).</param>
    ///<param name="deviceId">The ID(s) of the device(s) to remove the label(s) from.</param>
    public void RemoveLabelFromDevice(IEnumerable<object> labelId, IEnumerable<string> deviceId)
    {
        _haContext.CallService("homeassistant", "remove_label_from_device", null, new HomeassistantRemoveLabelFromDeviceParameters { LabelId = labelId, DeviceId = deviceId });
    }

    ///<summary>Removes a label from an entity. If multiple labels or multiple entities are provided, all combinations will be removed.</summary>
    public void RemoveLabelFromEntity(HomeassistantRemoveLabelFromEntityParameters data)
    {
        _haContext.CallService("homeassistant", "remove_label_from_entity", null, data);
    }

    ///<summary>Removes a label from an entity. If multiple labels or multiple entities are provided, all combinations will be removed.</summary>
    ///<param name="labelId">The ID(s) of the label(s) to remove from the entity/entities.</param>
    ///<param name="entityId">The ID(s) of the entity/entities to remove the label(s) from.</param>
    public void RemoveLabelFromEntity(IEnumerable<object> labelId, IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "remove_label_from_entity", null, new HomeassistantRemoveLabelFromEntityParameters { LabelId = labelId, EntityId = entityId });
    }

    ///<summary>Restart the Home Assistant action.</summary>
    public void Restart(HomeassistantRestartParameters data)
    {
        _haContext.CallService("homeassistant", "restart", null, data);
    }

    ///<summary>Restart the Home Assistant action.</summary>
    ///<param name="safeMode">If the restart should be done in safe mode. This will disable all custom integrations and frontend modules.</param>
    ///<param name="force">Force the restart. WARNING! This will not gracefully shutdown Home Assistant, it will skip configuration checks and ignore running database migrations. Only use this if you know what you are doing.</param>
    public void Restart(bool? safeMode = null, bool? force = null)
    {
        _haContext.CallService("homeassistant", "restart", null, new HomeassistantRestartParameters { SafeMode = safeMode, Force = force });
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates(object? data = null)
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null, data);
    }

    ///<summary>Sets aliases for an area. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    public void SetAreaAliases(HomeassistantSetAreaAliasesParameters data)
    {
        _haContext.CallService("homeassistant", "set_area_aliases", null, data);
    }

    ///<summary>Sets aliases for an area. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    ///<param name="areaId">The ID of the area to set the aliases for.</param>
    ///<param name="aliases">The aliases to set for the area.</param>
    public void SetAreaAliases(string areaId, object aliases)
    {
        _haContext.CallService("homeassistant", "set_area_aliases", null, new HomeassistantSetAreaAliasesParameters { AreaId = areaId, Aliases = aliases });
    }

    ///<summary>Sets aliases for a floor. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    public void SetFloorAliases(HomeassistantSetFloorAliasesParameters data)
    {
        _haContext.CallService("homeassistant", "set_floor_aliases", null, data);
    }

    ///<summary>Sets aliases for a floor. Overwrite and removed any existing aliases, fully replacing them with the new ones.</summary>
    ///<param name="floorId">The ID of the floor to set the aliases for.</param>
    ///<param name="aliases">The aliases to set for the floor.</param>
    public void SetFloorAliases(object floorId, object aliases)
    {
        _haContext.CallService("homeassistant", "set_floor_aliases", null, new HomeassistantSetFloorAliasesParameters { FloorId = floorId, Aliases = aliases });
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location above sea level. eg: 120</param>
    public void SetLocation(double latitude, double longitude, double? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop(object? data = null)
    {
        _haContext.CallService("homeassistant", "stop", null, data);
    }

    ///<summary>Generic action to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "toggle", target, data);
    }

    ///<summary>Generic action to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_off", target, data);
    }

    ///<summary>Generic action to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homeassistant", "turn_on", target, data);
    }

    ///<summary>Unhides an entity (or entities) on the fly.</summary>
    public void UnhideEntity(HomeassistantUnhideEntityParameters data)
    {
        _haContext.CallService("homeassistant", "unhide_entity", null, data);
    }

    ///<summary>Unhides an entity (or entities) on the fly.</summary>
    ///<param name="entityId">The entity/entities to unhide.</param>
    public void UnhideEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "unhide_entity", null, new HomeassistantUnhideEntityParameters { EntityId = entityId });
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    public void UpdateEntity(HomeassistantUpdateEntityParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity", null, data);
    }

    ///<summary>Forces one or more entities to update their data.</summary>
    ///<param name="entityId">List of entities to force update.</param>
    public void UpdateEntity(IEnumerable<string> entityId)
    {
        _haContext.CallService("homeassistant", "update_entity", null, new HomeassistantUpdateEntityParameters { EntityId = entityId });
    }

    ///<summary>Updates an entity&apos;s ID on the fly.</summary>
    public void UpdateEntityId(HomeassistantUpdateEntityIdParameters data)
    {
        _haContext.CallService("homeassistant", "update_entity_id", null, data);
    }

    ///<summary>Updates an entity&apos;s ID on the fly.</summary>
    ///<param name="entityId">The entity/entities to update.</param>
    ///<param name="newEntityId">The new ID for the entity</param>
    public void UpdateEntityId(string entityId, string newEntityId)
    {
        _haContext.CallService("homeassistant", "update_entity_id", null, new HomeassistantUpdateEntityIdParameters { EntityId = entityId, NewEntityId = newEntityId });
    }
}

public partial record HomeassistantAddAliasToAreaParameters
{
    ///<summary>The ID of the area to add the alias to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The alias (or list of aliasses) to add to the area.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantAddAliasToFloorParameters
{
    ///<summary>The ID of the floor to add the alias to.</summary>
    [JsonPropertyName("floor_id")]
    public object? FloorId { get; init; }

    ///<summary>The alias (or list of aliasses) to add to the floor.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantAddAreaToFloorParameters
{
    ///<summary>The ID of the floor to add the area on.</summary>
    [JsonPropertyName("floor_id")]
    public object? FloorId { get; init; }

    ///<summary>The ID of the area(s) to add to the floor.</summary>
    [JsonPropertyName("area_id")]
    public IEnumerable<string>? AreaId { get; init; }
}

public partial record HomeassistantAddDeviceToAreaParameters
{
    ///<summary>The ID of the area to add the device to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The ID of the device(s) to add to the area.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantAddEntityToAreaParameters
{
    ///<summary>The ID of the area to add the entity to.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The ID of the entity (or entities) to add to the area.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantAddLabelToAreaParameters
{
    ///<summary>The ID(s) of the label(s) to add the area(s).</summary>
    [JsonPropertyName("label_id")]
    public IEnumerable<object>? LabelId { get; init; }

    ///<summary>The ID(s) of the area(s) to add the label(s) to.</summary>
    [JsonPropertyName("area_id")]
    public IEnumerable<string>? AreaId { get; init; }
}

public partial record HomeassistantAddLabelToDeviceParameters
{
    ///<summary>The ID(s) of the label(s) to add the device(s).</summary>
    [JsonPropertyName("label_id")]
    public IEnumerable<object>? LabelId { get; init; }

    ///<summary>The ID(s) of the device(s) to add the label(s) to.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantAddLabelToEntityParameters
{
    ///<summary>The ID(s) of the label(s) to add the entity/entities.</summary>
    [JsonPropertyName("label_id")]
    public IEnumerable<object>? LabelId { get; init; }

    ///<summary>The ID(s) of the entity/entities to add the label(s) to.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantCreateAreaParameters
{
    ///<summary>The name of the area to create.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Icon to use for the area.</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>A list of aliases for the area. This is useful if you want to use the area in a different language or different nickname.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantCreateFloorParameters
{
    ///<summary>The name of the floor to create.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Icon to use for the floor.</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The level the floor is on in your home.</summary>
    [JsonPropertyName("level")]
    public double? Level { get; init; }

    ///<summary>A list of aliases for the floor. This is useful if you want to use the floor in a different language or different nickname.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantCreateLabelParameters
{
    ///<summary>The name of the label to create.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Description for the label.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>Icon to use for the label.</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>Color to use for the label. Can be a color name from the list, or a hex color code (like #FF0000).</summary>
    [JsonPropertyName("color")]
    public object? Color { get; init; }
}

public partial record HomeassistantDeleteAreaParameters
{
    ///<summary>The ID of the area to delete.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }
}

public partial record HomeassistantDeleteFloorParameters
{
    ///<summary>The ID of the floor to delete.</summary>
    [JsonPropertyName("floor_id")]
    public object? FloorId { get; init; }
}

public partial record HomeassistantDeleteLabelParameters
{
    ///<summary>The ID of the label to delete.</summary>
    [JsonPropertyName("label_id")]
    public object? LabelId { get; init; }
}

public partial record HomeassistantDisableConfigEntryParameters
{
    ///<summary>The integration configuration entry to disable.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantDisableDeviceParameters
{
    ///<summary>The device to disable.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantDisableEntityParameters
{
    ///<summary>The entity/entities to disable.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantDisablePollingParameters
{
    ///<summary>The integration configuration entry to disable polling for.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantEnableConfigEntryParameters
{
    ///<summary>The integration configuration entry to enable.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantEnableDeviceParameters
{
    ///<summary>The device to disable.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantEnableEntityParameters
{
    ///<summary>The entity/entities to enable.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantEnablePollingParameters
{
    ///<summary>The integration configuration entry to enable polling for.</summary>
    [JsonPropertyName("config_entry_id")]
    public object? ConfigEntryId { get; init; }
}

public partial record HomeassistantHideEntityParameters
{
    ///<summary>The entity/entities to hide.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantIgnoreAllDiscoveredParameters
{
    ///<summary>The integration domain to ignore all discovered devices for. If not provided, all domains will be considered to be ignored.</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public object? EntryId { get; init; }
}

public partial record HomeassistantRemoveAliasFromAreaParameters
{
    ///<summary>The ID of the area to remove the alias from.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The alias (or list of aliasses) to remove from the area.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantRemoveAliasFromFloorParameters
{
    ///<summary>The ID of the floor to remove the alias from.</summary>
    [JsonPropertyName("floor_id")]
    public object? FloorId { get; init; }

    ///<summary>The alias (or list of aliasses) to remove from the floor.</summary>
    [JsonPropertyName("alias")]
    public object? Alias { get; init; }
}

public partial record HomeassistantRemoveAreaFromFloorParameters
{
    ///<summary>The ID of the area to remove the floor from.</summary>
    [JsonPropertyName("area_id")]
    public IEnumerable<string>? AreaId { get; init; }
}

public partial record HomeassistantRemoveDeviceFromAreaParameters
{
    ///<summary>The ID of the device to remove the area from.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantRemoveEntityFromAreaParameters
{
    ///<summary>The ID of the entity (or entities) to remove the area from.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantRemoveLabelFromAreaParameters
{
    ///<summary>The ID(s) of the label(s) to remove from the area(s).</summary>
    [JsonPropertyName("label_id")]
    public IEnumerable<object>? LabelId { get; init; }

    ///<summary>The ID(s) of the area(s) to remove the label(s) from.</summary>
    [JsonPropertyName("area_id")]
    public IEnumerable<string>? AreaId { get; init; }
}

public partial record HomeassistantRemoveLabelFromDeviceParameters
{
    ///<summary>The ID(s) of the label(s) to remove from the device(s).</summary>
    [JsonPropertyName("label_id")]
    public IEnumerable<object>? LabelId { get; init; }

    ///<summary>The ID(s) of the device(s) to remove the label(s) from.</summary>
    [JsonPropertyName("device_id")]
    public IEnumerable<string>? DeviceId { get; init; }
}

public partial record HomeassistantRemoveLabelFromEntityParameters
{
    ///<summary>The ID(s) of the label(s) to remove from the entity/entities.</summary>
    [JsonPropertyName("label_id")]
    public IEnumerable<object>? LabelId { get; init; }

    ///<summary>The ID(s) of the entity/entities to remove the label(s) from.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantRestartParameters
{
    ///<summary>If the restart should be done in safe mode. This will disable all custom integrations and frontend modules.</summary>
    [JsonPropertyName("safe_mode")]
    public bool? SafeMode { get; init; }

    ///<summary>Force the restart. WARNING! This will not gracefully shutdown Home Assistant, it will skip configuration checks and ignore running database migrations. Only use this if you know what you are doing.</summary>
    [JsonPropertyName("force")]
    public bool? Force { get; init; }
}

public partial record HomeassistantSetAreaAliasesParameters
{
    ///<summary>The ID of the area to set the aliases for.</summary>
    [JsonPropertyName("area_id")]
    public string? AreaId { get; init; }

    ///<summary>The aliases to set for the area.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantSetFloorAliasesParameters
{
    ///<summary>The ID of the floor to set the aliases for.</summary>
    [JsonPropertyName("floor_id")]
    public object? FloorId { get; init; }

    ///<summary>The aliases to set for the floor.</summary>
    [JsonPropertyName("aliases")]
    public object? Aliases { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Elevation of your location above sea level. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }
}

public partial record HomeassistantUnhideEntityParameters
{
    ///<summary>The entity/entities to unhide.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantUpdateEntityParameters
{
    ///<summary>List of entities to force update.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record HomeassistantUpdateEntityIdParameters
{
    ///<summary>The entity/entities to update.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The new ID for the entity</summary>
    [JsonPropertyName("new_entity_id")]
    public string? NewEntityId { get; init; }
}

public partial class HomekitServices
{
    private readonly IHaContext _haContext;
    public HomekitServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads HomeKit and re-processes the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("homekit", "reload", null, data);
    }

    ///<summary>Resets a HomeKit accessory.</summary>
    ///<param name="target">The target for this service call</param>
    public void ResetAccessory(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homekit", "reset_accessory", target, data);
    }

    ///<summary>Forcefully removes all pairings from an accessory to allow re-pairing. Use this action if the accessory is no longer responsive, and you want to avoid deleting and re-adding the entry. Room locations, and accessory preferences will be lost.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unpair(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("homekit", "unpair", target, data);
    }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, double humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="mode">Operation mode. For example, &quot;normal&quot;, &quot;eco&quot;, or &quot;away&quot;. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "toggle", target, data);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_off", target, data);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("humidifier", "turn_on", target, data);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, &quot;normal&quot;, &quot;eco&quot;, or &quot;away&quot;. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_boolean", "reload", null, data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "toggle", target, data);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_off", target, data);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_boolean", "turn_on", target, data);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_button", "press", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_button", "reload", null, data);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_datetime", "reload", null, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, TimeOnly? time = null, string? datetime = null, double? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public double? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, InputNumberDecrementParameters data)
    {
        _haContext.CallService("input_number", "decrement", target, data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public void Decrement(ServiceTarget target, double? amount = null)
    {
        _haContext.CallService("input_number", "decrement", target, new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, InputNumberIncrementParameters data)
    {
        _haContext.CallService("input_number", "increment", target, data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public void Increment(ServiceTarget target, double? amount = null)
    {
        _haContext.CallService("input_number", "increment", target, new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Max(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "max", target, data);
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Min(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_number", "min", target, data);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_number", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberDecrementParameters
{
    ///<summary>The amount to decrease the input number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public double? Amount { get; init; }
}

public partial record InputNumberIncrementParameters
{
    ///<summary>The amount to increase the input number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public double? Amount { get; init; }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Random(ServiceTarget target, InputSelectRandomParameters data)
    {
        _haContext.CallService("input_select", "random", target, data);
    }

    ///<summary>Select an random option for an input_select entity.</summary>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public void Random(ServiceTarget target, object? options = null)
    {
        _haContext.CallService("input_select", "random", target, new InputSelectRandomParameters { Options = options });
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_select", "reload", null, data);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, IEnumerable<string> options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Shuffles the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void Shuffle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "shuffle", target, data);
    }

    ///<summary>Sorts the list of selectable options for an `input_select` entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.</summary>
    ///<param name="target">The target for this service call</param>
    public void Sort(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("input_select", "sort", target, data);
    }
}

public partial record InputSelectRandomParameters
{
    ///<summary>Limits the options to select from. If not provided, all options will be considered.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public IEnumerable<string>? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("input_text", "reload", null, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void Toggle(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public void TurnOff(ServiceTarget target, double? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public void TurnOn(ServiceTarget target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public IReadOnlyCollection<int>? RgbColor { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public double? BrightnessPct { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public double? BrightnessStepPct { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    ///<summary> eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary> eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary> eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary> eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("brightness_step")]
    public double? BrightnessStep { get; init; }

    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary> eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using the &apos;Entity ID&apos; field. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel(object? data = null)
    {
        _haContext.CallService("logger", "set_level", null, data);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public void BrowseMedia(ServiceTarget target, MediaPlayerBrowseMediaParameters data)
    {
        _haContext.CallService("media_player", "browse_media", target, data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public void BrowseMedia(ServiceTarget target, string? mediaContentType = null, string? mediaContentId = null)
    {
        _haContext.CallService("media_player", "browse_media", target, new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> BrowseMediaAsync(ServiceTarget target, MediaPlayerBrowseMediaParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "browse_media", target, data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public Task<JsonElement?> BrowseMediaAsync(ServiceTarget target, string? mediaContentType = null, string? mediaContentId = null)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "browse_media", target, new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "clear_playlist", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_next_track", target, data);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_pause", target, data);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play", target, data);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_play_pause", target, data);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_previous_track", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "media_stop", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public void SearchMedia(ServiceTarget target, MediaPlayerSearchMediaParameters data)
    {
        _haContext.CallService("media_player", "search_media", target, data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public void SearchMedia(ServiceTarget target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        _haContext.CallService("media_player", "search_media", target, new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> SearchMediaAsync(ServiceTarget target, MediaPlayerSearchMediaParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "search_media", target, data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public Task<JsonElement?> SearchMediaAsync(ServiceTarget target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        return _haContext.CallServiceWithResponseAsync("media_player", "search_media", target, new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "toggle", target, data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_off", target, data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "turn_on", target, data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "unjoin", target, data);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_down", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("media_player", "volume_up", target, data);
    }
}

public partial record MediaPlayerBrowseMediaParameters
{
    ///<summary>The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Whether the media (one or all) should be played in a loop or not.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSearchMediaParameters
{
    ///<summary>The term to search for. eg: Beatles</summary>
    [JsonPropertyName("search_query")]
    public string? SearchQuery { get; init; }

    ///<summary>The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</summary>
    [JsonPropertyName("media_filter_classes")]
    public IEnumerable<string>? MediaFilterClasses { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether the media should be played in randomized order or not.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, double? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="evaluatePayload">If &apos;Payload&apos; is a Python bytes literal, evaluate the bytes literal and publish the raw data.</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, object? payload = null, bool? evaluatePayload = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, EvaluatePayload = evaluatePayload, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("mqtt", "reload", null, data);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public double? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. Publishes an empty message if not provided. eg: The temperature is {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }

    ///<summary>If &apos;Payload&apos; is a Python bytes literal, evaluate the bytes literal and publish the raw data.</summary>
    [JsonPropertyName("evaluate_payload")]
    public bool? EvaluatePayload { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NoderedServices
{
    private readonly IHaContext _haContext;
    public NoderedServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send a message to a Node-RED flow that has been exposed to Home Assistant.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, NoderedTriggerParameters data)
    {
        _haContext.CallService("nodered", "trigger", target, data);
    }

    ///<summary>Send a message to a Node-RED flow that has been exposed to Home Assistant.</summary>
    ///<param name="outputPath">Comma separated list of paths to send the message to. Zero is used to send the message to all paths. eg: 1,2</param>
    ///<param name="message">The message object that will be sent to the next node.</param>
    public void Trigger(ServiceTarget target, string? outputPath = null, object? message = null)
    {
        _haContext.CallService("nodered", "trigger", target, new NoderedTriggerParameters { OutputPath = outputPath, Message = message });
    }
}

public partial record NoderedTriggerParameters
{
    ///<summary>Comma separated list of paths to send the message to. Zero is used to send the message to all paths. eg: 1,2</summary>
    [JsonPropertyName("output_path")]
    public string? OutputPath { get; init; }

    ///<summary>The message object that will be sent to the next node.</summary>
    [JsonPropertyName("message")]
    public object? Message { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the lg_webos_smart_tv service.</summary>
    public void LgWebosSmartTv(NotifyLgWebosSmartTvParameters data)
    {
        _haContext.CallService("notify", "lg_webos_smart_tv", null, data);
    }

    ///<summary>Sends a notification message using the lg_webos_smart_tv service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void LgWebosSmartTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "lg_webos_smart_tv", null, new NotifyLgWebosSmartTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_21051182c integration.</summary>
    public void MobileApp21051182c(NotifyMobileApp21051182cParameters data)
    {
        _haContext.CallService("notify", "mobile_app_21051182c", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_21051182c integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileApp21051182c(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_21051182c", null, new NotifyMobileApp21051182cParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_aenics integration.</summary>
    public void MobileAppAenics(NotifyMobileAppAenicsParameters data)
    {
        _haContext.CallService("notify", "mobile_app_aenics", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_aenics integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppAenics(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_aenics", null, new NotifyMobileAppAenicsParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_ipad integration.</summary>
    public void MobileAppIpad(NotifyMobileAppIpadParameters data)
    {
        _haContext.CallService("notify", "mobile_app_ipad", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_ipad integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppIpad(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_ipad", null, new NotifyMobileAppIpadParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_poco_f4_gt integration.</summary>
    public void MobileAppPocoF4Gt(NotifyMobileAppPocoF4GtParameters data)
    {
        _haContext.CallService("notify", "mobile_app_poco_f4_gt", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_poco_f4_gt integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppPocoF4Gt(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_poco_f4_gt", null, new NotifyMobileAppPocoF4GtParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_smart_tv_pro integration.</summary>
    public void MobileAppSmartTvPro(NotifyMobileAppSmartTvProParameters data)
    {
        _haContext.CallService("notify", "mobile_app_smart_tv_pro", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_smart_tv_pro integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppSmartTvPro(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_smart_tv_pro", null, new NotifyMobileAppSmartTvProParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendMessage(ServiceTarget target, NotifySendMessageParameters data)
    {
        _haContext.CallService("notify", "send_message", target, data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public void SendMessage(ServiceTarget target, string message, string? title = null)
    {
        _haContext.CallService("notify", "send_message", target, new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public partial record NotifyLgWebosSmartTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileApp21051182cParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppAenicsParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppIpadParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppPocoF4GtParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppSmartTvProParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality via this field. For more information, refer to the integration documentation. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifySendMessageParameters
{
    ///<summary>Your notification message.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification message.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target, NumberDecrementParameters data)
    {
        _haContext.CallService("number", "decrement", target, data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public void Decrement(ServiceTarget target, double? amount = null)
    {
        _haContext.CallService("number", "decrement", target, new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target, NumberIncrementParameters data)
    {
        _haContext.CallService("number", "increment", target, data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public void Increment(ServiceTarget target, double? amount = null)
    {
        _haContext.CallService("number", "increment", target, new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Max(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("number", "max", target, data);
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    ///<param name="target">The target for this service call</param>
    public void Min(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("number", "min", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberDecrementParameters
{
    ///<summary>The amount to decrease the number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public double? Amount { get; init; }
}

public partial record NumberIncrementParameters
{
    ///<summary>The amount to increase the number with. If not provided, the step of the number entity will be used.</summary>
    [JsonPropertyName("amount")]
    public double? Amount { get; init; }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the notifications panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Deletes a notification from the notifications panel.</summary>
    ///<param name="notificationId">ID of the notification to be deleted. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Deletes all notifications from the notifications panel.</summary>
    public void DismissAll(object? data = null)
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null, data);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be deleted. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a device tracker to a person.</summary>
    public void AddDeviceTracker(PersonAddDeviceTrackerParameters data)
    {
        _haContext.CallService("person", "add_device_tracker", null, data);
    }

    ///<summary>Add a device tracker to a person.</summary>
    ///<param name="entityId">The person entity ID to add the device tracker to.</param>
    ///<param name="deviceTracker">The device tracker entity ID to add to the person.</param>
    public void AddDeviceTracker(string entityId, IEnumerable<string> deviceTracker)
    {
        _haContext.CallService("person", "add_device_tracker", null, new PersonAddDeviceTrackerParameters { EntityId = entityId, DeviceTracker = deviceTracker });
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("person", "reload", null, data);
    }

    ///<summary>Remove a device tracker from a person.</summary>
    public void RemoveDeviceTracker(PersonRemoveDeviceTrackerParameters data)
    {
        _haContext.CallService("person", "remove_device_tracker", null, data);
    }

    ///<summary>Remove a device tracker from a person.</summary>
    ///<param name="entityId">The person entity ID to remove the device tracker from.</param>
    ///<param name="deviceTracker">The device tracker entity ID to remove from the person.</param>
    public void RemoveDeviceTracker(string entityId, IEnumerable<string> deviceTracker)
    {
        _haContext.CallService("person", "remove_device_tracker", null, new PersonRemoveDeviceTrackerParameters { EntityId = entityId, DeviceTracker = deviceTracker });
    }
}

public partial record PersonAddDeviceTrackerParameters
{
    ///<summary>The person entity ID to add the device tracker to.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The device tracker entity ID to add to the person.</summary>
    [JsonPropertyName("device_tracker")]
    public IEnumerable<string>? DeviceTracker { get; init; }
}

public partial record PersonRemoveDeviceTrackerParameters
{
    ///<summary>The person entity ID to remove the device tracker from.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The device tracker entity ID to remove from the person.</summary>
    [JsonPropertyName("device_tracker")]
    public IEnumerable<string>? DeviceTracker { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable(object? data = null)
    {
        _haContext.CallService("recorder", "disable", null, data);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable(object? data = null)
    {
        _haContext.CallService("recorder", "enable", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    public void GetStatistics(RecorderGetStatisticsParameters data)
    {
        _haContext.CallService("recorder", "get_statistics", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    ///<param name="startTime">The start time for the statistics query. eg: 2025-01-01 00:00:00</param>
    ///<param name="endTime">The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</param>
    ///<param name="statisticIds">The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</param>
    ///<param name="period">The time period to group statistics by. eg: hour</param>
    ///<param name="types">The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</param>
    ///<param name="units">Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</param>
    public void GetStatistics(DateTime startTime, IEnumerable<object> statisticIds, object period, IEnumerable<object> types, DateTime? endTime = null, object? units = null)
    {
        _haContext.CallService("recorder", "get_statistics", null, new RecorderGetStatisticsParameters { StartTime = startTime, EndTime = endTime, StatisticIds = statisticIds, Period = period, Types = types, Units = units });
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    public Task<JsonElement?> GetStatisticsAsync(RecorderGetStatisticsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("recorder", "get_statistics", null, data);
    }

    ///<summary>Retrieves statistics data for entities within a specific time period.</summary>
    ///<param name="startTime">The start time for the statistics query. eg: 2025-01-01 00:00:00</param>
    ///<param name="endTime">The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</param>
    ///<param name="statisticIds">The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</param>
    ///<param name="period">The time period to group statistics by. eg: hour</param>
    ///<param name="types">The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</param>
    ///<param name="units">Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</param>
    public Task<JsonElement?> GetStatisticsAsync(DateTime startTime, IEnumerable<object> statisticIds, object period, IEnumerable<object> types, DateTime? endTime = null, object? units = null)
    {
        return _haContext.CallServiceWithResponseAsync("recorder", "get_statistics", null, new RecorderGetStatisticsParameters { StartTime = startTime, EndTime = endTime, StatisticIds = statisticIds, Period = period, Types = types, Units = units });
    }

    ///<summary>Import long-term statistics.</summary>
    public void ImportStatistics(RecorderImportStatisticsParameters data)
    {
        _haContext.CallService("recorder", "import_statistics", null, data);
    }

    ///<summary>Import long-term statistics.</summary>
    ///<param name="statisticId">The statistics ID (entity ID) to import for.</param>
    ///<param name="name">The name of the statistics.</param>
    ///<param name="source">The source of the statistics data.</param>
    ///<param name="unitOfMeasurement">The unit of measurement of the statistics.</param>
    ///<param name="hasMean">If the statistics has a mean value.</param>
    ///<param name="hasSum">If the statistics has a sum value.</param>
    ///<param name="stats">A list of mappings/dictionaries with statistics to import. The dictionaries must contain a &quot;start&quot; key with a datetime string other valid options are &quot;mean&quot;, &quot;sum&quot;, &quot;min&quot;, &quot;max&quot;, &quot;last_reset&quot;, and &quot;state&quot;. All of those are optional and either an integer or a float, except for &quot;last_reset&quot; which is a datetime string.</param>
    public void ImportStatistics(string statisticId, string source, bool hasMean, bool hasSum, object stats, string? name = null, string? unitOfMeasurement = null)
    {
        _haContext.CallService("recorder", "import_statistics", null, new RecorderImportStatisticsParameters { StatisticId = statisticId, Name = name, Source = source, UnitOfMeasurement = unitOfMeasurement, HasMean = hasMean, HasSum = hasSum, Stats = stats });
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(double? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    public void PurgeEntities(RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", null, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="entityId">List of entities for which the data is to be removed from the Recorder database.</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the Recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(IEnumerable<string>? entityId = null, object? domains = null, object? entityGlobs = null, double? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", null, new RecorderPurgeEntitiesParameters { EntityId = entityId, Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderGetStatisticsParameters
{
    ///<summary>The start time for the statistics query. eg: 2025-01-01 00:00:00</summary>
    [JsonPropertyName("start_time")]
    public DateTime? StartTime { get; init; }

    ///<summary>The end time for the statistics query. If omitted, returns all statistics from start time onward. eg: 2025-01-02 00:00:00</summary>
    [JsonPropertyName("end_time")]
    public DateTime? EndTime { get; init; }

    ///<summary>The entity IDs or statistic IDs to return statistics for. eg: [&quot;sensor.energy_consumption&quot;,&quot;sensor.temperature&quot;]</summary>
    [JsonPropertyName("statistic_ids")]
    public IEnumerable<object>? StatisticIds { get; init; }

    ///<summary>The time period to group statistics by. eg: hour</summary>
    [JsonPropertyName("period")]
    public object? Period { get; init; }

    ///<summary>The types of statistics values to return. eg: [&quot;mean&quot;,&quot;sum&quot;]</summary>
    [JsonPropertyName("types")]
    public IEnumerable<object>? Types { get; init; }

    ///<summary>Optional unit conversion mapping. eg: {&quot;energy&quot;:&quot;kWh&quot;,&quot;temperature&quot;:&quot;°C&quot;}</summary>
    [JsonPropertyName("units")]
    public object? Units { get; init; }
}

public partial record RecorderImportStatisticsParameters
{
    ///<summary>The statistics ID (entity ID) to import for.</summary>
    [JsonPropertyName("statistic_id")]
    public string? StatisticId { get; init; }

    ///<summary>The name of the statistics.</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>The source of the statistics data.</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }

    ///<summary>The unit of measurement of the statistics.</summary>
    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    ///<summary>If the statistics has a mean value.</summary>
    [JsonPropertyName("has_mean")]
    public bool? HasMean { get; init; }

    ///<summary>If the statistics has a sum value.</summary>
    [JsonPropertyName("has_sum")]
    public bool? HasSum { get; init; }

    ///<summary>A list of mappings/dictionaries with statistics to import. The dictionaries must contain a &quot;start&quot; key with a datetime string other valid options are &quot;mean&quot;, &quot;sum&quot;, &quot;min&quot;, &quot;max&quot;, &quot;last_reset&quot;, and &quot;state&quot;. All of those are optional and either an integer or a float, except for &quot;last_reset&quot; which is a datetime string.</summary>
    [JsonPropertyName("stats")]
    public object? Stats { get; init; }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of entities for which the data is to be removed from the Recorder database.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>List of domains for which the data needs to be removed from the Recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the Recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public double? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "toggle", target, data);
    }

    ///<summary>Sends the turn off command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("remote", "turn_off", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public double? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RepairsServices
{
    private readonly IHaContext _haContext;
    public RepairsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Manually create and raise a issue in Home Assistant repairs.</summary>
    public void Create(RepairsCreateParameters data)
    {
        _haContext.CallService("repairs", "create", null, data);
    }

    ///<summary>Manually create and raise a issue in Home Assistant repairs.</summary>
    ///<param name="title">The title of the issue.</param>
    ///<param name="description">The description of the issue. Supports Markdown.</param>
    ///<param name="issueId">The issue can have an identifier, which allows you to cancel it later with that ID if needed. It also prevent duplicate issues to be created. If not provided, a random ID will be generated.</param>
    ///<param name="domain">This field can be used to set the domain of the issue. For example, by default (if not set), it will use &quot;spook&quot;. This causes Spook to be shown in the logo/image of the issue. If you set it to &quot;homeassistant&quot;, the Home Assistant logo will be used, or use &quot;hue&quot;, &quot;zwave_js&quot;, &quot;mqtt&quot;, etc. to use the logo of that integration.</param>
    ///<param name="severity">The severity of the issue. This will be used to determine the priority of the issue. If not set, &quot;warning&quot; will be used</param>
    ///<param name="persistent">If the issue should be persistent, which means it will survive restarts of Home Assistant. By default, issues are not persistent.</param>
    public void Create(string title, string description, string? issueId = null, string? domain = null, object? severity = null, bool? persistent = null)
    {
        _haContext.CallService("repairs", "create", null, new RepairsCreateParameters { Title = title, Description = description, IssueId = issueId, Domain = domain, Severity = severity, Persistent = persistent });
    }

    ///<summary>Ignore all issues currently raised in Home Assistant Repairs.</summary>
    public void IgnoreAll(object? data = null)
    {
        _haContext.CallService("repairs", "ignore_all", null, data);
    }

    ///<summary>Removes a manually created Home Assistant repairs issue. This action can only remove issues created with the `repairs_create` action.</summary>
    public void Remove(RepairsRemoveParameters data)
    {
        _haContext.CallService("repairs", "remove", null, data);
    }

    ///<summary>Removes a manually created Home Assistant repairs issue. This action can only remove issues created with the `repairs_create` action.</summary>
    ///<param name="issueId">The issue ID to remove.</param>
    public void Remove(string issueId)
    {
        _haContext.CallService("repairs", "remove", null, new RepairsRemoveParameters { IssueId = issueId });
    }

    ///<summary>Unignore all issues currently raised in Home Assistant Repairs.</summary>
    public void UnignoreAll(object? data = null)
    {
        _haContext.CallService("repairs", "unignore_all", null, data);
    }
}

public partial record RepairsCreateParameters
{
    ///<summary>The title of the issue.</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>The description of the issue. Supports Markdown.</summary>
    [JsonPropertyName("description")]
    public string? Description { get; init; }

    ///<summary>The issue can have an identifier, which allows you to cancel it later with that ID if needed. It also prevent duplicate issues to be created. If not provided, a random ID will be generated.</summary>
    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }

    ///<summary>This field can be used to set the domain of the issue. For example, by default (if not set), it will use &quot;spook&quot;. This causes Spook to be shown in the logo/image of the issue. If you set it to &quot;homeassistant&quot;, the Home Assistant logo will be used, or use &quot;hue&quot;, &quot;zwave_js&quot;, &quot;mqtt&quot;, etc. to use the logo of that integration.</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }

    ///<summary>The severity of the issue. This will be used to determine the priority of the issue. If not set, &quot;warning&quot; will be used</summary>
    [JsonPropertyName("severity")]
    public object? Severity { get; init; }

    ///<summary>If the issue should be persistent, which means it will survive restarts of Home Assistant. By default, issues are not persistent.</summary>
    [JsonPropertyName("persistent")]
    public bool? Persistent { get; init; }
}

public partial record RepairsRemoveParameters
{
    ///<summary>The issue ID to remove.</summary>
    [JsonPropertyName("issue_id")]
    public string? IssueId { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, double? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void Delete(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("scene", "delete", target, data);
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("scene", "reload", null, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, double? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use &apos;Entities snapshot&apos; instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine &apos;Entities snapshot&apos; with &apos;Entity states&apos;. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public double? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetSchedule(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("schedule", "get_schedule", target, data);
    }

    ///<summary>Retrieves the configured time ranges of one or multiple schedules.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetScheduleAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("schedule", "get_schedule", target, data);
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("schedule", "reload", null, data);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void _1714535235439(object? data = null)
    {
        _haContext.CallService("script", "1714535235439", null, data);
    }

    public Task<JsonElement?> _1714535235439Async(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "1714535235439", null, data);
    }

    public void LaunchHlkRadarTool(object? data = null)
    {
        _haContext.CallService("script", "launch_hlk_radar_tool", null, data);
    }

    public Task<JsonElement?> LaunchHlkRadarToolAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "launch_hlk_radar_tool", null, data);
    }

    public void LaunchMoonlightOnMiPad5(object? data = null)
    {
        _haContext.CallService("script", "launch_moonlight_on_mi_pad_5", null, data);
    }

    public Task<JsonElement?> LaunchMoonlightOnMiPad5Async(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "launch_moonlight_on_mi_pad_5", null, data);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("script", "reload", null, data);
    }

    public void SendTvNotification(object? data = null)
    {
        _haContext.CallService("script", "send_tv_notification", null, data);
    }

    public Task<JsonElement?> SendTvNotificationAsync(object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("script", "send_tv_notification", null, data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "toggle", target, data);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_off", target, data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("script", "turn_on", target, data);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Random(ServiceTarget target, SelectRandomParameters data)
    {
        _haContext.CallService("select", "random", target, data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public void Random(ServiceTarget target, object? options = null)
    {
        _haContext.CallService("select", "random", target, new SelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_first", target, data);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("select", "select_last", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectRandomParameters
{
    ///<summary>Limits the options to select from. If not provided, all options will be considered.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "toggle", target, data);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("siren", "turn_off", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SonoffServices
{
    private readonly IHaContext _haContext;
    public SonoffServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a command to a device.</summary>
    public void SendCommand(SonoffSendCommandParameters data)
    {
        _haContext.CallService("sonoff", "send_command", null, data);
    }

    ///<summary>Sends a command to a device.</summary>
    ///<param name="device">Device ID to send command to. eg: 1000123456</param>
    ///<param name="cmd">A single command to send. eg: switch</param>
    public void SendCommand(object? device = null, object? cmd = null)
    {
        _haContext.CallService("sonoff", "send_command", null, new SonoffSendCommandParameters { Device = device, Cmd = cmd });
    }
}

public partial record SonoffSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 1000123456</summary>
    [JsonPropertyName("device")]
    public object? Device { get; init; }

    ///<summary>A single command to send. eg: switch</summary>
    [JsonPropertyName("cmd")]
    public object? Cmd { get; init; }
}

public partial class SpookServices
{
    private readonly IHaContext _haContext;
    public SpookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calling this action spooks Home Assistant. Performing this action will always fail.</summary>
    public void Boo(object? data = null)
    {
        _haContext.CallService("spook", "boo", null, data);
    }

    ///<summary>Performing this action will randomly fail.</summary>
    public void RandomFail(object? data = null)
    {
        _haContext.CallService("spook", "random_fail", null, data);
    }
}

public partial class SshServices
{
    private readonly IHaContext _haContext;
    public SshServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Execute a command on the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    public void ExecuteCommand(ServiceTarget target, SshExecuteCommandParameters data)
    {
        _haContext.CallService("ssh", "execute_command", target, data);
    }

    ///<summary>Execute a command on the selected devices.</summary>
    ///<param name="command">The command to execute.</param>
    ///<param name="timeout">The timeout of the command.</param>
    ///<param name="variables">Variables to pass to the command. Example: A variable `name` can be used inside the command as `@{name}`.</param>
    public void ExecuteCommand(ServiceTarget target, string command, double? timeout = null, object? variables = null)
    {
        _haContext.CallService("ssh", "execute_command", target, new SshExecuteCommandParameters { Command = command, Timeout = timeout, Variables = variables });
    }

    ///<summary>Execute a command on the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> ExecuteCommandAsync(ServiceTarget target, SshExecuteCommandParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "execute_command", target, data);
    }

    ///<summary>Execute a command on the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">The command to execute.</param>
    ///<param name="timeout">The timeout of the command.</param>
    ///<param name="variables">Variables to pass to the command. Example: A variable `name` can be used inside the command as `@{name}`.</param>
    public Task<JsonElement?> ExecuteCommandAsync(ServiceTarget target, string command, double? timeout = null, object? variables = null)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "execute_command", target, new SshExecuteCommandParameters { Command = command, Timeout = timeout, Variables = variables });
    }

    ///<summary>Poll one or more sensors.</summary>
    ///<param name="target">The target for this service call</param>
    public void PollSensor(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("ssh", "poll_sensor", target, data);
    }

    ///<summary>Poll one or more sensors.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> PollSensorAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "poll_sensor", target, data);
    }

    ///<summary>Restart the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    public void Restart(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("ssh", "restart", target, data);
    }

    ///<summary>Restart the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> RestartAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "restart", target, data);
    }

    ///<summary>Run an action on the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    public void RunAction(ServiceTarget target, SshRunActionParameters data)
    {
        _haContext.CallService("ssh", "run_action", target, data);
    }

    ///<summary>Run an action on the selected devices.</summary>
    ///<param name="key">The key of the action command.</param>
    ///<param name="variables">Variables to pass to the command.</param>
    public void RunAction(ServiceTarget target, string key, object? variables = null)
    {
        _haContext.CallService("ssh", "run_action", target, new SshRunActionParameters { Key = key, Variables = variables });
    }

    ///<summary>Run an action on the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> RunActionAsync(ServiceTarget target, SshRunActionParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "run_action", target, data);
    }

    ///<summary>Run an action on the selected devices.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="key">The key of the action command.</param>
    ///<param name="variables">Variables to pass to the command.</param>
    public Task<JsonElement?> RunActionAsync(ServiceTarget target, string key, object? variables = null)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "run_action", target, new SshRunActionParameters { Key = key, Variables = variables });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, SshSetValueParameters data)
    {
        _haContext.CallService("ssh", "set_value", target, data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="values">Values in the same order as the target entities.</param>
    public void SetValue(ServiceTarget target, object values)
    {
        _haContext.CallService("ssh", "set_value", target, new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> SetValueAsync(ServiceTarget target, SshSetValueParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "set_value", target, data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public Task<JsonElement?> SetValueAsync(ServiceTarget target, object values)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "set_value", target, new SshSetValueParameters { Values = values });
    }

    ///<summary>Turn the selected devices off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("ssh", "turn_off", target, data);
    }

    ///<summary>Turn the selected devices off.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> TurnOffAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "turn_off", target, data);
    }

    ///<summary>Turn the selected devices on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("ssh", "turn_on", target, data);
    }

    ///<summary>Turn the selected devices on.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> TurnOnAsync(ServiceTarget target, object? data = null)
    {
        return _haContext.CallServiceWithResponseAsync("ssh", "turn_on", target, data);
    }
}

public partial record SshExecuteCommandParameters
{
    ///<summary>The command to execute.</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>The timeout of the command.</summary>
    [JsonPropertyName("timeout")]
    public double? Timeout { get; init; }

    ///<summary>Variables to pass to the command. Example: A variable `name` can be used inside the command as `@{name}`.</summary>
    [JsonPropertyName("variables")]
    public object? Variables { get; init; }
}

public partial record SshRunActionParameters
{
    ///<summary>The key of the action command.</summary>
    [JsonPropertyName("key")]
    public string? Key { get; init; }

    ///<summary>Variables to pass to the command.</summary>
    [JsonPropertyName("variables")]
    public object? Variables { get; init; }
}

public partial record SshSetValueParameters
{
    ///<summary>Values in the same order as the target entities.</summary>
    [JsonPropertyName("values")]
    public object? Values { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "toggle", target, data);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_off", target, data);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("switch", "turn_on", target, data);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes all log entries.</summary>
    public void Clear(object? data = null)
    {
        _haContext.CallService("system_log", "clear", null, data);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("template", "reload", null, data);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimeServices
{
    private readonly IHaContext _haContext;
    public TimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TimeSetValueParameters data)
    {
        _haContext.CallService("time", "set_value", target, data);
    }

    ///<summary>Sets the time.</summary>
    ///<param name="time">The time to set. eg: 22:15</param>
    public void SetValue(ServiceTarget target, TimeOnly time)
    {
        _haContext.CallService("time", "set_value", target, new TimeSetValueParameters { Time = time });
    }
}

public partial record TimeSetValueParameters
{
    ///<summary>The time to set. eg: 22:15</summary>
    [JsonPropertyName("time")]
    public TimeOnly? Time { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "cancel", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "finish", target, data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("timer", "pause", target, data);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("timer", "reload", null, data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDuration(ServiceTarget target, TimerSetDurationParameters data)
    {
        _haContext.CallService("timer", "set_duration", target, data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="duration">New duration for the timer, as a timedelta string. eg: 00:01:00, 60</param>
    public void SetDuration(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "set_duration", target, new TimerSetDurationParameters { Duration = duration });
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerSetDurationParameters
{
    ///<summary>New duration for the timer, as a timedelta string. eg: 00:01:00, 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Custom duration to restart the timer with. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TplinkServices
{
    private readonly IHaContext _haContext;
    public TplinkServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets a random effect.</summary>
    ///<param name="target">The target for this service call</param>
    public void RandomEffect(ServiceTarget target, TplinkRandomEffectParameters data)
    {
        _haContext.CallService("tplink", "random_effect", target, data);
    }

    ///<summary>Sets a random effect.</summary>
    ///<param name="initStates">Initial HSV sequence. eg: [199,99,96]</param>
    ///<param name="backgrounds">List of HSV sequences (Max 16). eg: - [199, 89, 50] - [160, 50, 50] - [180, 100, 50] </param>
    ///<param name="segments">List of segments (0 for all). eg: 0, 2, 4, 6, 8</param>
    ///<param name="brightness">Initial brightness. eg: 90</param>
    ///<param name="duration">Duration. eg: 0</param>
    ///<param name="transition">Transition. eg: 2000</param>
    ///<param name="fadeoff">Fade off. eg: 2000</param>
    ///<param name="hueRange">Range of hue. eg: 340, 360</param>
    ///<param name="saturationRange">Range of saturation. eg: 40, 95</param>
    ///<param name="brightnessRange">Range of brightness. eg: 90, 100</param>
    ///<param name="transitionRange">Range of transition. eg: 2000, 6000</param>
    ///<param name="randomSeed">Random seed. eg: 80</param>
    public void RandomEffect(ServiceTarget target, object initStates, object? backgrounds = null, object? segments = null, long? brightness = null, long? duration = null, long? transition = null, long? fadeoff = null, object? hueRange = null, object? saturationRange = null, object? brightnessRange = null, object? transitionRange = null, long? randomSeed = null)
    {
        _haContext.CallService("tplink", "random_effect", target, new TplinkRandomEffectParameters { InitStates = initStates, Backgrounds = backgrounds, Segments = segments, Brightness = brightness, Duration = duration, Transition = transition, Fadeoff = fadeoff, HueRange = hueRange, SaturationRange = saturationRange, BrightnessRange = brightnessRange, TransitionRange = transitionRange, RandomSeed = randomSeed });
    }

    ///<summary>Sets a sequence effect.</summary>
    ///<param name="target">The target for this service call</param>
    public void SequenceEffect(ServiceTarget target, TplinkSequenceEffectParameters data)
    {
        _haContext.CallService("tplink", "sequence_effect", target, data);
    }

    ///<summary>Sets a sequence effect.</summary>
    ///<param name="sequence">List of HSV sequences (Max 16). eg: - [340, 20, 50] - [20, 50, 50] - [0, 100, 50] </param>
    ///<param name="segments">List of segments (0 for all). eg: 0, 2, 4, 6, 8</param>
    ///<param name="brightness">Initial brightness. eg: 80</param>
    ///<param name="duration">Duration. eg: 0</param>
    ///<param name="repeatTimes">Repetitions (0 for continuous). eg: 0</param>
    ///<param name="transition">Transition. eg: 2000</param>
    ///<param name="spread">Speed of spread. eg: 1</param>
    ///<param name="direction">Direction. eg: 1</param>
    public void SequenceEffect(ServiceTarget target, object sequence, object? segments = null, long? brightness = null, long? duration = null, long? repeatTimes = null, long? transition = null, long? spread = null, long? direction = null)
    {
        _haContext.CallService("tplink", "sequence_effect", target, new TplinkSequenceEffectParameters { Sequence = sequence, Segments = segments, Brightness = brightness, Duration = duration, RepeatTimes = repeatTimes, Transition = transition, Spread = spread, Direction = direction });
    }
}

public partial record TplinkRandomEffectParameters
{
    ///<summary>Initial HSV sequence. eg: [199,99,96]</summary>
    [JsonPropertyName("init_states")]
    public object? InitStates { get; init; }

    ///<summary>List of HSV sequences (Max 16). eg: - [199, 89, 50] - [160, 50, 50] - [180, 100, 50] </summary>
    [JsonPropertyName("backgrounds")]
    public object? Backgrounds { get; init; }

    ///<summary>List of segments (0 for all). eg: 0, 2, 4, 6, 8</summary>
    [JsonPropertyName("segments")]
    public object? Segments { get; init; }

    ///<summary>Initial brightness. eg: 90</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Duration. eg: 0</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Transition. eg: 2000</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Fade off. eg: 2000</summary>
    [JsonPropertyName("fadeoff")]
    public long? Fadeoff { get; init; }

    ///<summary>Range of hue. eg: 340, 360</summary>
    [JsonPropertyName("hue_range")]
    public object? HueRange { get; init; }

    ///<summary>Range of saturation. eg: 40, 95</summary>
    [JsonPropertyName("saturation_range")]
    public object? SaturationRange { get; init; }

    ///<summary>Range of brightness. eg: 90, 100</summary>
    [JsonPropertyName("brightness_range")]
    public object? BrightnessRange { get; init; }

    ///<summary>Range of transition. eg: 2000, 6000</summary>
    [JsonPropertyName("transition_range")]
    public object? TransitionRange { get; init; }

    ///<summary>Random seed. eg: 80</summary>
    [JsonPropertyName("random_seed")]
    public long? RandomSeed { get; init; }
}

public partial record TplinkSequenceEffectParameters
{
    ///<summary>List of HSV sequences (Max 16). eg: - [340, 20, 50] - [20, 50, 50] - [0, 100, 50] </summary>
    [JsonPropertyName("sequence")]
    public object? Sequence { get; init; }

    ///<summary>List of segments (0 for all). eg: 0, 2, 4, 6, 8</summary>
    [JsonPropertyName("segments")]
    public object? Segments { get; init; }

    ///<summary>Initial brightness. eg: 80</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Duration. eg: 0</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Repetitions (0 for continuous). eg: 0</summary>
    [JsonPropertyName("repeat_times")]
    public long? RepeatTimes { get; init; }

    ///<summary>Transition. eg: 2000</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Speed of spread. eg: 1</summary>
    [JsonPropertyName("spread")]
    public long? Spread { get; init; }

    ///<summary>Direction. eg: 1</summary>
    [JsonPropertyName("direction")]
    public long? Direction { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache(object? data = null)
    {
        _haContext.CallService("tts", "clear_cache", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UniversalServices
{
    private readonly IHaContext _haContext;
    public UniversalServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads universal media players from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("universal", "reload", null, data);
    }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "clear_skipped", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("update", "skip", target, data);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class UtilityMeterServices
{
    private readonly IHaContext _haContext;
    public UtilityMeterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The target for this service call</param>
    public void Calibrate(ServiceTarget target, UtilityMeterCalibrateParameters data)
    {
        _haContext.CallService("utility_meter", "calibrate", target, data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public void Calibrate(ServiceTarget target, string value)
    {
        _haContext.CallService("utility_meter", "calibrate", target, new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("utility_meter", "reset", target, data);
    }
}

public partial record UtilityMeterCalibrateParameters
{
    ///<summary>Value to which set the meter. eg: 100</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "clean_spot", target, data);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "locate", target, data);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "pause", target, data);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "return_to_base", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "start", target, data);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("vacuum", "stop", target, data);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WakeOnLanServices
{
    private readonly IHaContext _haContext;
    public WakeOnLanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    public void SendMagicPacket(WakeOnLanSendMagicPacketParameters data)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, data);
    }

    ///<summary>Sends a &apos;magic packet&apos; to wake up a device with &apos;Wake-On-LAN&apos; capabilities.</summary>
    ///<param name="mac">MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</param>
    ///<param name="broadcastAddress">The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</param>
    ///<param name="broadcastPort">The port to send the magic packet to. Defaults to `9` and is normally not changed.</param>
    public void SendMagicPacket(string mac, string? broadcastAddress = null, double? broadcastPort = null)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, new WakeOnLanSendMagicPacketParameters { Mac = mac, BroadcastAddress = broadcastAddress, BroadcastPort = broadcastPort });
    }
}

public partial record WakeOnLanSendMagicPacketParameters
{
    ///<summary>MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>The IP address of the host to send the magic packet to. Defaults to `255.255.255.255` and is normally not changed. eg: 192.168.255.255</summary>
    [JsonPropertyName("broadcast_address")]
    public string? BroadcastAddress { get; init; }

    ///<summary>The port to send the magic packet to. Defaults to `9` and is normally not changed.</summary>
    [JsonPropertyName("broadcast_port")]
    public double? BroadcastPort { get; init; }
}

public partial class WatchmanServices
{
    private readonly IHaContext _haContext;
    public WatchmanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Run the Watchman report</summary>
    public void Report(WatchmanReportParameters data)
    {
        _haContext.CallService("watchman", "report", null, data);
    }

    ///<summary>Run the Watchman report</summary>
    ///<param name="parseConfig">Parse configuration files before generating the report. Usually, this is done automatically by Watchman, so this flag is typically not required. eg: True</param>
    ///<param name="advancedOptions"></param>
    public void Report(bool? parseConfig = null, object? advancedOptions = null)
    {
        _haContext.CallService("watchman", "report", null, new WatchmanReportParameters { ParseConfig = parseConfig, AdvancedOptions = advancedOptions });
    }
}

public partial record WatchmanReportParameters
{
    ///<summary>Parse configuration files before generating the report. Usually, this is done automatically by Watchman, so this flag is typically not required. eg: True</summary>
    [JsonPropertyName("parse_config")]
    public bool? ParseConfig { get; init; }

    [JsonPropertyName("advanced_options")]
    public object? AdvancedOptions { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_off", target, data);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, object? data = null)
    {
        _haContext.CallService("water_heater", "turn_on", target, data);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecasts(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        _haContext.CallService("weather", "get_forecasts", target, data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="type">The scope of the weather forecast.</param>
    public void GetForecasts(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, WeatherGetForecastsParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public Task<JsonElement?> GetForecastsAsync(ServiceTarget target, object @type)
    {
        return _haContext.CallServiceWithResponseAsync("weather", "get_forecasts", target, new WeatherGetForecastsParameters { Type = @type });
    }
}

public partial record WeatherGetForecastsParameters
{
    ///<summary>The scope of the weather forecast.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class WebostvServices
{
    private readonly IHaContext _haContext;
    public WebostvServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a button press command.</summary>
    public void Button(WebostvButtonParameters data)
    {
        _haContext.CallService("webostv", "button", null, data);
    }

    ///<summary>Sends a button press command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="button">Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</param>
    public void Button(string entityId, string button)
    {
        _haContext.CallService("webostv", "button", null, new WebostvButtonParameters { EntityId = entityId, Button = button });
    }

    ///<summary>Sends a command.</summary>
    public void Command(WebostvCommandParameters data)
    {
        _haContext.CallService("webostv", "command", null, data);
    }

    ///<summary>Sends a command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</param>
    public void Command(string entityId, string command, object? payload = null)
    {
        _haContext.CallService("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Sends a command.</summary>
    public Task<JsonElement?> CommandAsync(WebostvCommandParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "command", null, data);
    }

    ///<summary>Sends a command.</summary>
    ///<param name="entityId">Name(s) of the webostv entities where to run the API method.</param>
    ///<param name="command">Endpoint of the command. eg: system.launcher/open</param>
    ///<param name="payload">An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</param>
    public Task<JsonElement?> CommandAsync(string entityId, string command, object? payload = null)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "command", null, new WebostvCommandParameters { EntityId = entityId, Command = command, Payload = payload });
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    public void SelectSoundOutput(WebostvSelectSoundOutputParameters data)
    {
        _haContext.CallService("webostv", "select_sound_output", null, data);
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webostv entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public void SelectSoundOutput(string entityId, string soundOutput)
    {
        _haContext.CallService("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    public Task<JsonElement?> SelectSoundOutputAsync(WebostvSelectSoundOutputParameters data)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "select_sound_output", null, data);
    }

    ///<summary>Sends the TV the command to change sound output.</summary>
    ///<param name="entityId">Name(s) of the webostv entities to change sound output on.</param>
    ///<param name="soundOutput">Name of the sound output to switch to. eg: external_speaker</param>
    public Task<JsonElement?> SelectSoundOutputAsync(string entityId, string soundOutput)
    {
        return _haContext.CallServiceWithResponseAsync("webostv", "select_sound_output", null, new WebostvSelectSoundOutputParameters { EntityId = entityId, SoundOutput = soundOutput });
    }
}

public partial record WebostvButtonParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. eg: LEFT</summary>
    [JsonPropertyName("button")]
    public string? Button { get; init; }
}

public partial record WebostvCommandParameters
{
    ///<summary>Name(s) of the webostv entities where to run the API method.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Endpoint of the command. eg: system.launcher/open</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>An optional payload to provide to the endpoint in the format of key value pair(s). eg: target: https://www.google.com</summary>
    [JsonPropertyName("payload")]
    public object? Payload { get; init; }
}

public partial record WebostvSelectSoundOutputParameters
{
    ///<summary>Name(s) of the webostv entities to change sound output on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the sound output to switch to. eg: external_speaker</summary>
    [JsonPropertyName("sound_output")]
    public string? SoundOutput { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a new zone in Home Assistant on the fly.</summary>
    public void Create(ZoneCreateParameters data)
    {
        _haContext.CallService("zone", "create", null, data);
    }

    ///<summary>Create a new zone in Home Assistant on the fly.</summary>
    ///<param name="name">Name of the zone</param>
    ///<param name="icon">Icon to use for the zone</param>
    ///<param name="latitude">Latitude of the zone</param>
    ///<param name="longitude">Longitude of the zone</param>
    ///<param name="radius">Radius of the zone</param>
    public void Create(string name, double latitude, double longitude, object? icon = null, double? radius = null)
    {
        _haContext.CallService("zone", "create", null, new ZoneCreateParameters { Name = name, Icon = icon, Latitude = latitude, Longitude = longitude, Radius = radius });
    }

    ///<summary>Delete a zone. This works only with zones created and managed via the UI. Zones created and managed in YAML cannot be managed by Spook.</summary>
    public void Delete(ZoneDeleteParameters data)
    {
        _haContext.CallService("zone", "delete", null, data);
    }

    ///<summary>Delete a zone. This works only with zones created and managed via the UI. Zones created and managed in YAML cannot be managed by Spook.</summary>
    ///<param name="entityId">The ID of the entity (or entities) to remove.</param>
    public void Delete(IEnumerable<string> entityId)
    {
        _haContext.CallService("zone", "delete", null, new ZoneDeleteParameters { EntityId = entityId });
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload(object? data = null)
    {
        _haContext.CallService("zone", "reload", null, data);
    }

    ///<summary>Update properties of a zone on the fly.</summary>
    public void Update(ZoneUpdateParameters data)
    {
        _haContext.CallService("zone", "update", null, data);
    }

    ///<summary>Update properties of a zone on the fly.</summary>
    ///<param name="entityId">The ID of the entity (or entities) to update.</param>
    ///<param name="name">Name of the zone</param>
    ///<param name="icon">Icon to use for the zone</param>
    ///<param name="latitude">Latitude of the zone</param>
    ///<param name="longitude">Longitude of the zone</param>
    ///<param name="radius">Radius of the zone</param>
    public void Update(string entityId, string? name = null, object? icon = null, double? latitude = null, double? longitude = null, double? radius = null)
    {
        _haContext.CallService("zone", "update", null, new ZoneUpdateParameters { EntityId = entityId, Name = name, Icon = icon, Latitude = latitude, Longitude = longitude, Radius = radius });
    }
}

public partial record ZoneCreateParameters
{
    ///<summary>Name of the zone</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Icon to use for the zone</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>Latitude of the zone</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of the zone</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Radius of the zone</summary>
    [JsonPropertyName("radius")]
    public double? Radius { get; init; }
}

public partial record ZoneDeleteParameters
{
    ///<summary>The ID of the entity (or entities) to remove.</summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }
}

public partial record ZoneUpdateParameters
{
    ///<summary>The ID of the entity (or entities) to update.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Name of the zone</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Icon to use for the zone</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>Latitude of the zone</summary>
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    ///<summary>Longitude of the zone</summary>
    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    ///<summary>Radius of the zone</summary>
    [JsonPropertyName("radius")]
    public double? Radius { get; init; }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IClimateEntityCore target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IClimateEntityCore target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<IClimateEntityCore> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IClimateEntityCore target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IClimateEntityCore target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="humidity">Target humidity.</param>
    public static void SetHumidity(this IEnumerable<IClimateEntityCore> target, double humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IClimateEntityCore target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IClimateEntityCore target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetHvacMode(this IEnumerable<IClimateEntityCore> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IClimateEntityCore target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IClimateEntityCore target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<IClimateEntityCore> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingHorizontalModeParameters data)
    {
        target.CallService("set_swing_horizontal_mode", data);
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IClimateEntityCore target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets horizontal swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingHorizontalMode">Horizontal swing operation mode. eg: on</param>
    public static void SetSwingHorizontalMode(this IEnumerable<IClimateEntityCore> target, string swingHorizontalMode)
    {
        target.CallService("set_swing_horizontal_mode", new ClimateSetSwingHorizontalModeParameters { SwingHorizontalMode = swingHorizontalMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IClimateEntityCore target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IClimateEntityCore target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="swingMode">Swing operation mode. eg: on</param>
    public static void SetSwingMode(this IEnumerable<IClimateEntityCore> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IClimateEntityCore target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IClimateEntityCore to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IClimateEntityCore target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Sets the temperature setpoint.</summary>
    ///<param name="target">The IEnumerable&lt;IClimateEntityCore&gt; to call this service for</param>
    ///<param name="temperature">The temperature setpoint.</param>
    ///<param name="targetTempHigh">The max temperature setpoint.</param>
    ///<param name="targetTempLow">The min temperature setpoint.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public static void SetTemperature(this IEnumerable<IClimateEntityCore> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles climate device, from on to off, or off to on.</summary>
    public static void Toggle(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device off.</summary>
    public static void TurnOff(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IClimateEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns climate device on.</summary>
    public static void TurnOn(this IEnumerable<IClimateEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class CounterEntityExtensionMethods
{
    ///<summary>Decrements a counter by its step size.</summary>
    public static void Decrement(this CounterEntity target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrements a counter by its step size.</summary>
    public static void Decrement(this IEnumerable<CounterEntity> target, object? data = null)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    public static void Increment(this CounterEntity target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increments a counter by its step size.</summary>
    public static void Increment(this IEnumerable<CounterEntity> target, object? data = null)
    {
        target.CallService("increment", data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    public static void Reset(this CounterEntity target, object? data = null)
    {
        target.CallService("reset", data);
    }

    ///<summary>Resets a counter to its initial value.</summary>
    public static void Reset(this IEnumerable<CounterEntity> target, object? data = null)
    {
        target.CallService("reset", data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    public static void SetValue(this CounterEntity target, CounterSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    public static void SetValue(this IEnumerable<CounterEntity> target, CounterSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The CounterEntity to call this service for</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public static void SetValue(this CounterEntity target, double value)
    {
        target.CallService("set_value", new CounterSetValueParameters { Value = value });
    }

    ///<summary>Sets the counter to a specific value.</summary>
    ///<param name="target">The IEnumerable&lt;CounterEntity&gt; to call this service for</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public static void SetValue(this IEnumerable<CounterEntity> target, double value)
    {
        target.CallService("set_value", new CounterSetValueParameters { Value = value });
    }
}

public static class FanEntityExtensionMethods
{
    ///<summary>Decreases the speed of a fan.</summary>
    public static void DecreaseSpeed(this FanEntity target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public static void DecreaseSpeed(this FanEntity target, double? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Decreases the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be decreased.</param>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, double? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    public static void IncreaseSpeed(this FanEntity target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public static void IncreaseSpeed(this FanEntity target, double? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentageStep">Percentage step by which the speed should be increased.</param>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, double? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    public static void Oscillate(this FanEntity target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    public static void Oscillate(this IEnumerable<FanEntity> target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public static void Oscillate(this FanEntity target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Controls the oscillation of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="oscillating">Turns oscillation on/off.</param>
    public static void Oscillate(this IEnumerable<FanEntity> target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    public static void SetDirection(this FanEntity target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    public static void SetDirection(this IEnumerable<FanEntity> target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public static void SetDirection(this FanEntity target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets a fan&apos;s rotation direction.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="direction">Direction of the fan rotation.</param>
    public static void SetDirection(this IEnumerable<FanEntity> target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the speed of a fan.</summary>
    public static void SetPercentage(this FanEntity target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    public static void SetPercentage(this IEnumerable<FanEntity> target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this FanEntity target, double percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets the speed of a fan.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    public static void SetPercentage(this IEnumerable<FanEntity> target, double percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset fan mode.</summary>
    public static void SetPresetMode(this FanEntity target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset fan mode.</summary>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void SetPresetMode(this FanEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets preset fan mode.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles a fan on/off.</summary>
    public static void Toggle(this FanEntity target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a fan on/off.</summary>
    public static void Toggle(this IEnumerable<FanEntity> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this FanEntity target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns fan off.</summary>
    public static void TurnOff(this IEnumerable<FanEntity> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this FanEntity target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    public static void TurnOn(this IEnumerable<FanEntity> target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void TurnOn(this FanEntity target, double? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The IEnumerable&lt;FanEntity&gt; to call this service for</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset fan mode. eg: auto</param>
    public static void TurnOn(this IEnumerable<FanEntity> target, double? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public static class FluxLedEntityExtensionMethods
{
    ///<summary>Sets a custom light effect.</summary>
    public static void SetCustomEffect(this ILightEntityCore target, FluxLedSetCustomEffectParameters data)
    {
        target.CallService("set_custom_effect", data);
    }

    ///<summary>Sets a custom light effect.</summary>
    public static void SetCustomEffect(this IEnumerable<ILightEntityCore> target, FluxLedSetCustomEffectParameters data)
    {
        target.CallService("set_custom_effect", data);
    }

    ///<summary>Sets a custom light effect.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="colors">List of colors for the custom effect (RGB). (Max 16 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="transition">Effect transition. eg: jump</param>
    public static void SetCustomEffect(this ILightEntityCore target, object colors, long? speedPct = null, object? transition = null)
    {
        target.CallService("set_custom_effect", new FluxLedSetCustomEffectParameters { Colors = colors, SpeedPct = speedPct, Transition = transition });
    }

    ///<summary>Sets a custom light effect.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="colors">List of colors for the custom effect (RGB). (Max 16 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="transition">Effect transition. eg: jump</param>
    public static void SetCustomEffect(this IEnumerable<ILightEntityCore> target, object colors, long? speedPct = null, object? transition = null)
    {
        target.CallService("set_custom_effect", new FluxLedSetCustomEffectParameters { Colors = colors, SpeedPct = speedPct, Transition = transition });
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    public static void SetMusicMode(this ILightEntityCore target, FluxLedSetMusicModeParameters data)
    {
        target.CallService("set_music_mode", data);
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    public static void SetMusicMode(this IEnumerable<ILightEntityCore> target, FluxLedSetMusicModeParameters data)
    {
        target.CallService("set_music_mode", data);
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="sensitivity">Microphone sensitivity (0-100). eg: 80</param>
    ///<param name="brightness">Light brightness (0-100). eg: 80</param>
    ///<param name="lightScreen">Light screen mode for 2 dimensional pixels (Addressable models only).</param>
    ///<param name="effect">Effect (1-16 on Addressable models, 0-3 on RGB with MIC models). eg: 1</param>
    ///<param name="foregroundColor">The foreground RGB color. eg: [255, 100, 100]</param>
    ///<param name="backgroundColor">The background RGB color (Addressable models only). eg: [255, 100, 100]</param>
    public static void SetMusicMode(this ILightEntityCore target, long? sensitivity = null, long? brightness = null, bool? lightScreen = null, long? effect = null, IReadOnlyCollection<int>? foregroundColor = null, IReadOnlyCollection<int>? backgroundColor = null)
    {
        target.CallService("set_music_mode", new FluxLedSetMusicModeParameters { Sensitivity = sensitivity, Brightness = brightness, LightScreen = lightScreen, Effect = effect, ForegroundColor = foregroundColor, BackgroundColor = backgroundColor });
    }

    ///<summary>Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="sensitivity">Microphone sensitivity (0-100). eg: 80</param>
    ///<param name="brightness">Light brightness (0-100). eg: 80</param>
    ///<param name="lightScreen">Light screen mode for 2 dimensional pixels (Addressable models only).</param>
    ///<param name="effect">Effect (1-16 on Addressable models, 0-3 on RGB with MIC models). eg: 1</param>
    ///<param name="foregroundColor">The foreground RGB color. eg: [255, 100, 100]</param>
    ///<param name="backgroundColor">The background RGB color (Addressable models only). eg: [255, 100, 100]</param>
    public static void SetMusicMode(this IEnumerable<ILightEntityCore> target, long? sensitivity = null, long? brightness = null, bool? lightScreen = null, long? effect = null, IReadOnlyCollection<int>? foregroundColor = null, IReadOnlyCollection<int>? backgroundColor = null)
    {
        target.CallService("set_music_mode", new FluxLedSetMusicModeParameters { Sensitivity = sensitivity, Brightness = brightness, LightScreen = lightScreen, Effect = effect, ForegroundColor = foregroundColor, BackgroundColor = backgroundColor });
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    public static void SetZones(this ILightEntityCore target, FluxLedSetZonesParameters data)
    {
        target.CallService("set_zones", data);
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    public static void SetZones(this IEnumerable<ILightEntityCore> target, FluxLedSetZonesParameters data)
    {
        target.CallService("set_zones", data);
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="colors">List of colors for each zone (RGB). The length of each zone is the number of pixels per segment divided by the number of colors. (Max 2048 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] - [255,255,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="effect">Effect. eg: running_water</param>
    public static void SetZones(this ILightEntityCore target, object colors, long? speedPct = null, object? effect = null)
    {
        target.CallService("set_zones", new FluxLedSetZonesParameters { Colors = colors, SpeedPct = speedPct, Effect = effect });
    }

    ///<summary>Sets strip zones for Addressable v3 controllers (0xA3).</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="colors">List of colors for each zone (RGB). The length of each zone is the number of pixels per segment divided by the number of colors. (Max 2048 Colors). eg: - [255,0,0] - [0,255,0] - [0,0,255] - [255,255,255] </param>
    ///<param name="speedPct">The speed of the effect in % (0-100, default 50). eg: 80</param>
    ///<param name="effect">Effect. eg: running_water</param>
    public static void SetZones(this IEnumerable<ILightEntityCore> target, object colors, long? speedPct = null, object? effect = null)
    {
        target.CallService("set_zones", new FluxLedSetZonesParameters { Colors = colors, SpeedPct = speedPct, Effect = effect });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IInputButtonEntityCore target, object? data = null)
    {
        target.CallService("press", data);
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IEnumerable<IInputButtonEntityCore> target, object? data = null)
    {
        target.CallService("press", data);
    }
}

public static class InputNumberEntityExtensionMethods
{
    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    public static void Decrement(this IInputNumberEntityCore target, InputNumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, InputNumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IInputNumberEntityCore target, double? amount = null)
    {
        target.CallService("decrement", new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Decrease an input number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to decrease the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IEnumerable<IInputNumberEntityCore> target, double? amount = null)
    {
        target.CallService("decrement", new InputNumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    public static void Increment(this IInputNumberEntityCore target, InputNumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, InputNumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IInputNumberEntityCore target, double? amount = null)
    {
        target.CallService("increment", new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Increase an input number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to increase the input number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IEnumerable<IInputNumberEntityCore> target, double? amount = null)
    {
        target.CallService("increment", new InputNumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    public static void Max(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("max", data);
    }

    ///<summary>Set an input number entity to its maximum value.</summary>
    public static void Max(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("max", data);
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    public static void Min(this IInputNumberEntityCore target, object? data = null)
    {
        target.CallService("min", data);
    }

    ///<summary>Set an input number entity to its minimum value.</summary>
    public static void Min(this IEnumerable<IInputNumberEntityCore> target, object? data = null)
    {
        target.CallService("min", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputNumberEntityCore target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, InputNumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputNumberEntityCore to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IInputNumberEntityCore target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputNumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value.</param>
    public static void SetValue(this IEnumerable<IInputNumberEntityCore> target, double value)
    {
        target.CallService("set_value", new InputNumberSetValueParameters { Value = value });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Toggles one or more lights, from on to off, or off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this ILightEntityCore target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash"></param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, double? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this ILightEntityCore target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }

    ///<summary>Turns on one or more lights and adjusts their properties, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorTempKelvin">Color temperature in Kelvin.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="effect">Light effect.</param>
    ///<param name="rgbwColor"> eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor"> eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName"></param>
    ///<param name="hsColor"> eg: [300, 70]</param>
    ///<param name="xyColor"> eg: [0.52, 0.43]</param>
    ///<param name="colorTemp"></param>
    ///<param name="brightness"></param>
    ///<param name="brightnessStep"></param>
    ///<param name="white"></param>
    ///<param name="profile"> eg: relax</param>
    ///<param name="flash"></param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, double? transition = null, IReadOnlyCollection<int>? rgbColor = null, object? colorTempKelvin = null, double? brightnessPct = null, double? brightnessStepPct = null, string? effect = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, double? brightness = null, double? brightnessStep = null, object? white = null, string? profile = null, object? flash = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, ColorTempKelvin = colorTempKelvin, BrightnessPct = brightnessPct, BrightnessStepPct = brightnessStepPct, Effect = effect, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Brightness = brightness, BrightnessStep = brightnessStep, White = white, Profile = profile, Flash = flash });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Locks a lock.</summary>
    public static void Lock(this ILockEntityCore target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    public static void Lock(this IEnumerable<ILockEntityCore> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this ILockEntityCore target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this IEnumerable<ILockEntityCore> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this ILockEntityCore target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this ILockEntityCore target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Browses the available media.</summary>
    public static Task<JsonElement?> BrowseMediaAsync(this IMediaPlayerEntityCore target, MediaPlayerBrowseMediaParameters data)
    {
        return target.CallServiceWithResponseAsync("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static Task<JsonElement?> BrowseMediaAsync(this IMediaPlayerEntityCore target, string? mediaContentType = null, string? mediaContentId = null)
    {
        return target.CallServiceWithResponseAsync("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerBrowseMediaParameters data)
    {
        target.CallService("browse_media", data);
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IMediaPlayerEntityCore target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Browses the available media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    public static void BrowseMedia(this IEnumerable<IMediaPlayerEntityCore> target, string? mediaContentType = null, string? mediaContentId = null)
    {
        target.CallService("browse_media", new MediaPlayerBrowseMediaParameters { MediaContentType = mediaContentType, MediaContentId = mediaContentId });
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Removes all items from the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("clear_playlist", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in &apos;Targets&apos;. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_next_track", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_pause", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_play_pause", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_previous_track", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("media_stop", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Sets the repeat mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Whether the media (one or all) should be played in a loop or not.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Searches the available media.</summary>
    public static Task<JsonElement?> SearchMediaAsync(this IMediaPlayerEntityCore target, MediaPlayerSearchMediaParameters data)
    {
        return target.CallServiceWithResponseAsync("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static Task<JsonElement?> SearchMediaAsync(this IMediaPlayerEntityCore target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        return target.CallServiceWithResponseAsync("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    public static void SearchMedia(this IMediaPlayerEntityCore target, MediaPlayerSearchMediaParameters data)
    {
        target.CallService("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    public static void SearchMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSearchMediaParameters data)
    {
        target.CallService("search_media", data);
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static void SearchMedia(this IMediaPlayerEntityCore target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        target.CallService("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Searches the available media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="searchQuery">The term to search for. eg: Beatles</param>
    ///<param name="mediaContentType">The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="mediaContentId">The ID of the content to browse. Integration dependent. eg: A:ALBUMARTIST/Beatles</param>
    ///<param name="mediaFilterClasses">List of media classes to filter the search results by. eg: [&quot;album&quot;,&quot;artist&quot;]</param>
    public static void SearchMedia(this IEnumerable<IMediaPlayerEntityCore> target, string searchQuery, string? mediaContentType = null, string? mediaContentId = null, IEnumerable<string>? mediaFilterClasses = null)
    {
        target.CallService("search_media", new MediaPlayerSearchMediaParameters { SearchQuery = searchQuery, MediaContentType = mediaContentType, MediaContentId = mediaContentId, MediaFilterClasses = mediaFilterClasses });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Enables or disables the shuffle mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether the media should be played in randomized order or not.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("unjoin", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_down", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target, object? data = null)
    {
        target.CallService("volume_up", data);
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target, object? data = null)
    {
        target.CallService("volume_up", data);
    }
}

public static class NoderedEntityExtensionMethods
{
    ///<summary>Send a message to a Node-RED flow that has been exposed to Home Assistant.</summary>
    public static void Trigger(this ISwitchEntityCore target, NoderedTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Send a message to a Node-RED flow that has been exposed to Home Assistant.</summary>
    public static void Trigger(this IEnumerable<ISwitchEntityCore> target, NoderedTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Send a message to a Node-RED flow that has been exposed to Home Assistant.</summary>
    ///<param name="target">The ISwitchEntityCore to call this service for</param>
    ///<param name="outputPath">Comma separated list of paths to send the message to. Zero is used to send the message to all paths. eg: 1,2</param>
    ///<param name="message">The message object that will be sent to the next node.</param>
    public static void Trigger(this ISwitchEntityCore target, string? outputPath = null, object? message = null)
    {
        target.CallService("trigger", new NoderedTriggerParameters { OutputPath = outputPath, Message = message });
    }

    ///<summary>Send a message to a Node-RED flow that has been exposed to Home Assistant.</summary>
    ///<param name="target">The IEnumerable&lt;ISwitchEntityCore&gt; to call this service for</param>
    ///<param name="outputPath">Comma separated list of paths to send the message to. Zero is used to send the message to all paths. eg: 1,2</param>
    ///<param name="message">The message object that will be sent to the next node.</param>
    public static void Trigger(this IEnumerable<ISwitchEntityCore> target, string? outputPath = null, object? message = null)
    {
        target.CallService("trigger", new NoderedTriggerParameters { OutputPath = outputPath, Message = message });
    }
}

public static class NotifyEntityExtensionMethods
{
    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this NotifyEntity target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, NotifySendMessageParameters data)
    {
        target.CallService("send_message", data);
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The NotifyEntity to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this NotifyEntity target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }

    ///<summary>Sends a notification message.</summary>
    ///<param name="target">The IEnumerable&lt;NotifyEntity&gt; to call this service for</param>
    ///<param name="message">Your notification message.</param>
    ///<param name="title">Title for your notification message.</param>
    public static void SendMessage(this IEnumerable<NotifyEntity> target, string message, string? title = null)
    {
        target.CallService("send_message", new NotifySendMessageParameters { Message = message, Title = title });
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Decrease a number entity value by a certain amount.</summary>
    public static void Decrement(this INumberEntityCore target, NumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    public static void Decrement(this IEnumerable<INumberEntityCore> target, NumberDecrementParameters data)
    {
        target.CallService("decrement", data);
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this INumberEntityCore target, double? amount = null)
    {
        target.CallService("decrement", new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Decrease a number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to decrease the number with. If not provided, the step of the number entity will be used.</param>
    public static void Decrement(this IEnumerable<INumberEntityCore> target, double? amount = null)
    {
        target.CallService("decrement", new NumberDecrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    public static void Increment(this INumberEntityCore target, NumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    public static void Increment(this IEnumerable<INumberEntityCore> target, NumberIncrementParameters data)
    {
        target.CallService("increment", data);
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this INumberEntityCore target, double? amount = null)
    {
        target.CallService("increment", new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Increase a number entity value by a certain amount.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="amount">The amount to increase the number with. If not provided, the step of the number entity will be used.</param>
    public static void Increment(this IEnumerable<INumberEntityCore> target, double? amount = null)
    {
        target.CallService("increment", new NumberIncrementParameters { Amount = amount });
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    public static void Max(this INumberEntityCore target, object? data = null)
    {
        target.CallService("max", data);
    }

    ///<summary>Set a number entity to its maximum value.</summary>
    public static void Max(this IEnumerable<INumberEntityCore> target, object? data = null)
    {
        target.CallService("max", data);
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    public static void Min(this INumberEntityCore target, object? data = null)
    {
        target.CallService("min", data);
    }

    ///<summary>Set a number entity to its minimum value.</summary>
    public static void Min(this IEnumerable<INumberEntityCore> target, object? data = null)
    {
        target.CallService("min", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string value)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, double? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the toggle command.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IRemoteEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn off command.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the turn on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this ISceneEntityCore target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Deletes a dynamically created scene.</summary>
    public static void Delete(this IEnumerable<ISceneEntityCore> target, object? data = null)
    {
        target.CallService("delete", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this ISceneEntityCore target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The ISceneEntityCore to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this ISceneEntityCore target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The IEnumerable&lt;ISceneEntityCore&gt; to call this service for</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public static void TurnOn(this IEnumerable<ISceneEntityCore> target, double? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters { Transition = transition });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Starts a script if it isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Select an random option for a select entity.</summary>
    public static void Random(this ISelectEntityCore target, SelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    public static void Random(this IEnumerable<ISelectEntityCore> target, SelectRandomParameters data)
    {
        target.CallService("random", data);
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this ISelectEntityCore target, object? options = null)
    {
        target.CallService("random", new SelectRandomParameters { Options = options });
    }

    ///<summary>Select an random option for a select entity.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="options">Limits the options to select from. If not provided, all options will be considered.</param>
    public static void Random(this IEnumerable<ISelectEntityCore> target, object? options = null)
    {
        target.CallService("random", new SelectRandomParameters { Options = options });
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_first", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("select_last", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SshEntityExtensionMethods
{
    ///<summary>Poll one or more sensors.</summary>
    public static Task<JsonElement?> PollSensorAsync(this IBinarySensorEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IBinarySensorEntityCore target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IEnumerable<IBinarySensorEntityCore> target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static Task<JsonElement?> PollSensorAsync(this INumberEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this INumberEntityCore target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IEnumerable<INumberEntityCore> target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static Task<JsonElement?> PollSensorAsync(this ISelectEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static Task<JsonElement?> PollSensorAsync(this ISensorEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this ISensorEntityCore target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IEnumerable<ISensorEntityCore> target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static Task<JsonElement?> PollSensorAsync(this ISwitchEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static Task<JsonElement?> PollSensorAsync(this TextEntity target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this TextEntity target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IEnumerable<TextEntity> target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static Task<JsonElement?> PollSensorAsync(this IUpdateEntityCore target, object? data = null)
    {
        return target.CallServiceWithResponseAsync("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Poll one or more sensors.</summary>
    public static void PollSensor(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("poll_sensor", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static Task<JsonElement?> SetValueAsync(this INumberEntityCore target, SshSetValueParameters data)
    {
        return target.CallServiceWithResponseAsync("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static Task<JsonElement?> SetValueAsync(this INumberEntityCore target, object values)
    {
        return target.CallServiceWithResponseAsync("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this INumberEntityCore target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this INumberEntityCore target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static Task<JsonElement?> SetValueAsync(this ISelectEntityCore target, SshSetValueParameters data)
    {
        return target.CallServiceWithResponseAsync("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static Task<JsonElement?> SetValueAsync(this ISelectEntityCore target, object values)
    {
        return target.CallServiceWithResponseAsync("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this ISelectEntityCore target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this IEnumerable<ISelectEntityCore> target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this ISelectEntityCore target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this IEnumerable<ISelectEntityCore> target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static Task<JsonElement?> SetValueAsync(this ISwitchEntityCore target, SshSetValueParameters data)
    {
        return target.CallServiceWithResponseAsync("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The ISwitchEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static Task<JsonElement?> SetValueAsync(this ISwitchEntityCore target, object values)
    {
        return target.CallServiceWithResponseAsync("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this ISwitchEntityCore target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this IEnumerable<ISwitchEntityCore> target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The ISwitchEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this ISwitchEntityCore target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The IEnumerable&lt;ISwitchEntityCore&gt; to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this IEnumerable<ISwitchEntityCore> target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static Task<JsonElement?> SetValueAsync(this TextEntity target, SshSetValueParameters data)
    {
        return target.CallServiceWithResponseAsync("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The TextEntity to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static Task<JsonElement?> SetValueAsync(this TextEntity target, object values)
    {
        return target.CallServiceWithResponseAsync("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this TextEntity target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this IEnumerable<TextEntity> target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The TextEntity to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this TextEntity target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The IEnumerable&lt;TextEntity&gt; to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this IEnumerable<TextEntity> target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static Task<JsonElement?> SetValueAsync(this IUpdateEntityCore target, SshSetValueParameters data)
    {
        return target.CallServiceWithResponseAsync("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static Task<JsonElement?> SetValueAsync(this IUpdateEntityCore target, object values)
    {
        return target.CallServiceWithResponseAsync("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this IUpdateEntityCore target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    public static void SetValue(this IEnumerable<IUpdateEntityCore> target, SshSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this IUpdateEntityCore target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }

    ///<summary>Set the value of one or more controllable sensors.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="values">Values in the same order as the target entities.</param>
    public static void SetValue(this IEnumerable<IUpdateEntityCore> target, object values)
    {
        target.CallService("set_value", new SshSetValueParameters { Values = values });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target, object? data = null)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target, object? data = null)
    {
        target.CallService("turn_on", data);
    }
}

public static class TextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this TextEntity target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<TextEntity> target, TextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The TextEntity to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this TextEntity target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;TextEntity&gt; to call this service for</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public static void SetValue(this IEnumerable<TextEntity> target, string value)
    {
        target.CallService("set_value", new TextSetValueParameters { Value = value });
    }
}

public static class TimerEntityExtensionMethods
{
    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    public static void Cancel(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("cancel", data);
    }

    ///<summary>Resets a timer&apos;s duration to the last known initial value without firing the timer finished event.</summary>
    public static void Cancel(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("cancel", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    public static void Change(this ITimerEntityCore target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    public static void Change(this IEnumerable<ITimerEntityCore> target, TimerChangeParameters data)
    {
        target.CallService("change", data);
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this ITimerEntityCore target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Changes a timer by adding or subtracting a given duration.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration to add to or subtract from the running timer. eg: 00:01:00, 60 or -60</param>
    public static void Change(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("change", new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    public static void Finish(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("finish", data);
    }

    ///<summary>Finishes a running timer earlier than scheduled.</summary>
    public static void Finish(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("finish", data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    public static void Pause(this ITimerEntityCore target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Pauses a running timer, retaining the remaining duration for later continuation.</summary>
    public static void Pause(this IEnumerable<ITimerEntityCore> target, object? data = null)
    {
        target.CallService("pause", data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    public static void SetDuration(this ITimerEntityCore target, TimerSetDurationParameters data)
    {
        target.CallService("set_duration", data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    public static void SetDuration(this IEnumerable<ITimerEntityCore> target, TimerSetDurationParameters data)
    {
        target.CallService("set_duration", data);
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">New duration for the timer, as a timedelta string. eg: 00:01:00, 60</param>
    public static void SetDuration(this ITimerEntityCore target, string duration)
    {
        target.CallService("set_duration", new TimerSetDurationParameters { Duration = duration });
    }

    ///<summary>Set duration for an existing timer.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">New duration for the timer, as a timedelta string. eg: 00:01:00, 60</param>
    public static void SetDuration(this IEnumerable<ITimerEntityCore> target, string duration)
    {
        target.CallService("set_duration", new TimerSetDurationParameters { Duration = duration });
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    public static void Start(this ITimerEntityCore target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    public static void Start(this IEnumerable<ITimerEntityCore> target, TimerStartParameters data)
    {
        target.CallService("start", data);
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The ITimerEntityCore to call this service for</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public static void Start(this ITimerEntityCore target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }

    ///<summary>Starts a timer or restarts it with a provided duration.</summary>
    ///<param name="target">The IEnumerable&lt;ITimerEntityCore&gt; to call this service for</param>
    ///<param name="duration">Custom duration to restart the timer with. eg: 00:01:00 or 60</param>
    public static void Start(this IEnumerable<ITimerEntityCore> target, string? duration = null)
    {
        target.CallService("start", new TimerStartParameters { Duration = duration });
    }
}

public static class TplinkEntityExtensionMethods
{
    ///<summary>Sets a random effect.</summary>
    public static void RandomEffect(this ILightEntityCore target, TplinkRandomEffectParameters data)
    {
        target.CallService("random_effect", data);
    }

    ///<summary>Sets a random effect.</summary>
    public static void RandomEffect(this IEnumerable<ILightEntityCore> target, TplinkRandomEffectParameters data)
    {
        target.CallService("random_effect", data);
    }

    ///<summary>Sets a random effect.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="initStates">Initial HSV sequence. eg: [199,99,96]</param>
    ///<param name="backgrounds">List of HSV sequences (Max 16). eg: - [199, 89, 50] - [160, 50, 50] - [180, 100, 50] </param>
    ///<param name="segments">List of segments (0 for all). eg: 0, 2, 4, 6, 8</param>
    ///<param name="brightness">Initial brightness. eg: 90</param>
    ///<param name="duration">Duration. eg: 0</param>
    ///<param name="transition">Transition. eg: 2000</param>
    ///<param name="fadeoff">Fade off. eg: 2000</param>
    ///<param name="hueRange">Range of hue. eg: 340, 360</param>
    ///<param name="saturationRange">Range of saturation. eg: 40, 95</param>
    ///<param name="brightnessRange">Range of brightness. eg: 90, 100</param>
    ///<param name="transitionRange">Range of transition. eg: 2000, 6000</param>
    ///<param name="randomSeed">Random seed. eg: 80</param>
    public static void RandomEffect(this ILightEntityCore target, object initStates, object? backgrounds = null, object? segments = null, long? brightness = null, long? duration = null, long? transition = null, long? fadeoff = null, object? hueRange = null, object? saturationRange = null, object? brightnessRange = null, object? transitionRange = null, long? randomSeed = null)
    {
        target.CallService("random_effect", new TplinkRandomEffectParameters { InitStates = initStates, Backgrounds = backgrounds, Segments = segments, Brightness = brightness, Duration = duration, Transition = transition, Fadeoff = fadeoff, HueRange = hueRange, SaturationRange = saturationRange, BrightnessRange = brightnessRange, TransitionRange = transitionRange, RandomSeed = randomSeed });
    }

    ///<summary>Sets a random effect.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="initStates">Initial HSV sequence. eg: [199,99,96]</param>
    ///<param name="backgrounds">List of HSV sequences (Max 16). eg: - [199, 89, 50] - [160, 50, 50] - [180, 100, 50] </param>
    ///<param name="segments">List of segments (0 for all). eg: 0, 2, 4, 6, 8</param>
    ///<param name="brightness">Initial brightness. eg: 90</param>
    ///<param name="duration">Duration. eg: 0</param>
    ///<param name="transition">Transition. eg: 2000</param>
    ///<param name="fadeoff">Fade off. eg: 2000</param>
    ///<param name="hueRange">Range of hue. eg: 340, 360</param>
    ///<param name="saturationRange">Range of saturation. eg: 40, 95</param>
    ///<param name="brightnessRange">Range of brightness. eg: 90, 100</param>
    ///<param name="transitionRange">Range of transition. eg: 2000, 6000</param>
    ///<param name="randomSeed">Random seed. eg: 80</param>
    public static void RandomEffect(this IEnumerable<ILightEntityCore> target, object initStates, object? backgrounds = null, object? segments = null, long? brightness = null, long? duration = null, long? transition = null, long? fadeoff = null, object? hueRange = null, object? saturationRange = null, object? brightnessRange = null, object? transitionRange = null, long? randomSeed = null)
    {
        target.CallService("random_effect", new TplinkRandomEffectParameters { InitStates = initStates, Backgrounds = backgrounds, Segments = segments, Brightness = brightness, Duration = duration, Transition = transition, Fadeoff = fadeoff, HueRange = hueRange, SaturationRange = saturationRange, BrightnessRange = brightnessRange, TransitionRange = transitionRange, RandomSeed = randomSeed });
    }

    ///<summary>Sets a sequence effect.</summary>
    public static void SequenceEffect(this ILightEntityCore target, TplinkSequenceEffectParameters data)
    {
        target.CallService("sequence_effect", data);
    }

    ///<summary>Sets a sequence effect.</summary>
    public static void SequenceEffect(this IEnumerable<ILightEntityCore> target, TplinkSequenceEffectParameters data)
    {
        target.CallService("sequence_effect", data);
    }

    ///<summary>Sets a sequence effect.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="sequence">List of HSV sequences (Max 16). eg: - [340, 20, 50] - [20, 50, 50] - [0, 100, 50] </param>
    ///<param name="segments">List of segments (0 for all). eg: 0, 2, 4, 6, 8</param>
    ///<param name="brightness">Initial brightness. eg: 80</param>
    ///<param name="duration">Duration. eg: 0</param>
    ///<param name="repeatTimes">Repetitions (0 for continuous). eg: 0</param>
    ///<param name="transition">Transition. eg: 2000</param>
    ///<param name="spread">Speed of spread. eg: 1</param>
    ///<param name="direction">Direction. eg: 1</param>
    public static void SequenceEffect(this ILightEntityCore target, object sequence, object? segments = null, long? brightness = null, long? duration = null, long? repeatTimes = null, long? transition = null, long? spread = null, long? direction = null)
    {
        target.CallService("sequence_effect", new TplinkSequenceEffectParameters { Sequence = sequence, Segments = segments, Brightness = brightness, Duration = duration, RepeatTimes = repeatTimes, Transition = transition, Spread = spread, Direction = direction });
    }

    ///<summary>Sets a sequence effect.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="sequence">List of HSV sequences (Max 16). eg: - [340, 20, 50] - [20, 50, 50] - [0, 100, 50] </param>
    ///<param name="segments">List of segments (0 for all). eg: 0, 2, 4, 6, 8</param>
    ///<param name="brightness">Initial brightness. eg: 80</param>
    ///<param name="duration">Duration. eg: 0</param>
    ///<param name="repeatTimes">Repetitions (0 for continuous). eg: 0</param>
    ///<param name="transition">Transition. eg: 2000</param>
    ///<param name="spread">Speed of spread. eg: 1</param>
    ///<param name="direction">Direction. eg: 1</param>
    public static void SequenceEffect(this IEnumerable<ILightEntityCore> target, object sequence, object? segments = null, long? brightness = null, long? duration = null, long? repeatTimes = null, long? transition = null, long? spread = null, long? direction = null)
    {
        target.CallService("sequence_effect", new TplinkSequenceEffectParameters { Sequence = sequence, Segments = segments, Brightness = brightness, Duration = duration, RepeatTimes = repeatTimes, Transition = transition, Spread = spread, Direction = direction });
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("clear_skipped", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for a device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update.</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target, object? data = null)
    {
        target.CallService("skip", data);
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target, object? data = null)
    {
        target.CallService("skip", data);
    }
}

public static class UtilityMeterEntityExtensionMethods
{
    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this ISensorEntityCore target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, UtilityMeterCalibrateParameters data)
    {
        target.CallService("calibrate", data);
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this ISensorEntityCore target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Calibrates a utility meter sensor.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">Value to which set the meter. eg: 100</param>
    public static void Calibrate(this IEnumerable<ISensorEntityCore> target, string value)
    {
        target.CallService("calibrate", new UtilityMeterCalibrateParameters { Value = value });
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this ISelectEntityCore target, object? data = null)
    {
        target.CallService("reset", data);
    }

    ///<summary>Resets all counters of a utility meter.</summary>
    public static void Reset(this IEnumerable<ISelectEntityCore> target, object? data = null)
    {
        target.CallService("reset", data);
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static Task<JsonElement?> GetForecastsAsync(this IWeatherEntityCore target, object @type)
    {
        return target.CallServiceWithResponseAsync("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IWeatherEntityCore target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastsParameters data)
    {
        target.CallService("get_forecasts", data);
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }

    ///<summary>Retrieves the forecast from selected weather services.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">The scope of the weather forecast.</param>
    public static void GetForecasts(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecasts", new WeatherGetForecastsParameters { Type = @type });
    }
}