{
  "homeassistant": {
    "save_persistent_states": {
      "name": "Save persistent states",
      "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
      "fields": {}
    },
    "turn_off": {
      "name": "Generic turn off",
      "description": "Generic action to turn devices off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "turn_on": {
      "name": "Generic turn on",
      "description": "Generic action to turn devices on under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "toggle": {
      "name": "Generic toggle",
      "description": "Generic action to toggle devices on/off under any domain.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops Home Assistant.",
      "fields": {}
    },
    "check_config": {
      "name": "Check configuration",
      "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
      "fields": {}
    },
    "update_entity": {
      "name": "Update entity",
      "description": "Forces one or more entities to update their data.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to update",
          "description": "List of entities to force update."
        }
      }
    },
    "reload_core_config": {
      "name": "Reload Core configuration",
      "description": "Reloads the Core configuration from the YAML-configuration.",
      "fields": {}
    },
    "set_location": {
      "name": "Set location",
      "description": "Updates the Home Assistant location.",
      "fields": {
        "latitude": {
          "required": true,
          "example": 32.87336,
          "selector": {
            "number": {
              "mode": "box",
              "min": -90,
              "max": 90,
              "step": "any"
            }
          },
          "name": "Latitude",
          "description": "Latitude of your location."
        },
        "longitude": {
          "required": true,
          "example": 117.22743,
          "selector": {
            "number": {
              "mode": "box",
              "min": -180,
              "max": 180,
              "step": "any"
            }
          },
          "name": "Longitude",
          "description": "Longitude of your location."
        },
        "elevation": {
          "required": false,
          "example": 120,
          "selector": {
            "number": {
              "mode": "box",
              "step": "any"
            }
          },
          "name": "Elevation",
          "description": "Elevation of your location above sea level."
        }
      }
    },
    "reload_custom_templates": {
      "name": "Reload custom Jinja2 templates",
      "description": "Reloads Jinja2 templates found in the \u0060custom_templates\u0060 folder in your config. New values will be applied on the next render of the template.",
      "fields": {}
    },
    "reload_config_entry": {
      "name": "Reload config entry",
      "description": "Reloads the specified config entry.",
      "fields": {
        "entry_id": {
          "advanced": true,
          "required": false,
          "example": "8955375327824e14ba89e4b29cc3ec9a",
          "selector": {
            "config_entry": null
          },
          "name": "Config entry ID",
          "description": "The configuration entry ID of the entry to be reloaded."
        }
      },
      "target": {
        "entity": [
          {}
        ],
        "device": [
          {}
        ]
      }
    },
    "reload_all": {
      "name": "Reload all",
      "description": "Reloads all YAML configuration that can be reloaded without restarting Home Assistant.",
      "fields": {}
    },
    "add_alias_to_floor": {
      "name": "Add an alias to a floor \uD83D\uDC7B",
      "description": "Adds an alias to a floor.",
      "fields": {
        "floor_id": {
          "name": "Floor ID",
          "description": "The ID of the floor to add the alias to.",
          "required": true,
          "selector": {
            "floor": null
          }
        },
        "alias": {
          "name": "Alias",
          "description": "The alias (or list of aliasses) to add to the floor.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "add_label_to_area": {
      "name": "Add a label to an area \uD83D\uDC7B",
      "description": "Adds a label to an area. If multiple labels or multiple areas are provided, all combinations will be added.",
      "fields": {
        "label_id": {
          "name": "Label ID",
          "description": "The ID(s) of the label(s) to add the area(s).",
          "required": true,
          "selector": {
            "label": {
              "multiple": true
            }
          }
        },
        "area_id": {
          "name": "Area ID",
          "description": "The ID(s) of the area(s) to add the label(s) to.",
          "required": true,
          "selector": {
            "area": {
              "multiple": true
            }
          }
        }
      }
    },
    "restart": {
      "name": "Restart \uD83D\uDC7B",
      "description": "Restart the Home Assistant action.",
      "fields": {
        "safe_mode": {
          "name": "Safe mode",
          "description": "If the restart should be done in safe mode. This will disable all custom integrations and frontend modules.",
          "required": false,
          "selector": {
            "boolean": null
          }
        },
        "force": {
          "name": "Force restart",
          "description": "Force the restart. WARNING! This will not gracefully shutdown Home Assistant, it will skip configuration checks and ignore running database migrations. Only use this if you know what you are doing.",
          "required": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "enable_config_entry": {
      "name": "Enable an integration \uD83D\uDC7B",
      "description": "Enables an integration configuration entry.",
      "fields": {
        "config_entry_id": {
          "name": "Config entry",
          "description": "The integration configuration entry to enable.",
          "required": true,
          "selector": {
            "config_entry": null
          }
        }
      }
    },
    "enable_entity": {
      "name": "Enable an entity \uD83D\uDC7B",
      "description": "Enables an entity (or entities) on the fly.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "The entity/entities to enable.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "list_orphaned_database_entities": {
      "name": "List all orphaned database entities \uD83D\uDC7B",
      "description": "Lists all orphaned database entities unclaimed by any integration.",
      "fields": {},
      "response": {
        "optional": false
      }
    },
    "remove_label_from_entity": {
      "name": "Remove a label from an entity \uD83D\uDC7B",
      "description": "Removes a label from an entity. If multiple labels or multiple entities are provided, all combinations will be removed.",
      "fields": {
        "label_id": {
          "name": "Label ID",
          "description": "The ID(s) of the label(s) to remove from the entity/entities.",
          "required": true,
          "selector": {
            "label": {
              "multiple": true
            }
          }
        },
        "entity_id": {
          "name": "Entity ID",
          "description": "The ID(s) of the entity/entities to remove the label(s) from.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "create_floor": {
      "name": "Create a floor \uD83D\uDC7B",
      "description": "Creates a new floor on the fly.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "The name of the floor to create.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "icon": {
          "name": "Icon",
          "description": "Icon to use for the floor.",
          "required": false,
          "selector": {
            "icon": {
              "placeholder": "mdi:texture-box"
            }
          }
        },
        "level": {
          "name": "Level",
          "description": "The level the floor is on in your home.",
          "required": false,
          "selector": {
            "number": null
          }
        },
        "aliases": {
          "name": "Aliases",
          "description": "A list of aliases for the floor. This is useful if you want to use the floor in a different language or different nickname.",
          "selector": {
            "object": null
          }
        }
      }
    },
    "remove_alias_from_area": {
      "name": "Remove an alias from an area \uD83D\uDC7B",
      "description": "Removes an alias from an area.",
      "fields": {
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area to remove the alias from.",
          "required": true,
          "selector": {
            "area": null
          }
        },
        "alias": {
          "name": "Alias",
          "description": "The alias (or list of aliasses) to remove from the area.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "add_label_to_device": {
      "name": "Add a label to a device \uD83D\uDC7B",
      "description": "Adds a label to a device. If multiple labels or multiple devices are provided, all combinations will be added.",
      "fields": {
        "label_id": {
          "name": "Label ID",
          "description": "The ID(s) of the label(s) to add the device(s).",
          "required": true,
          "selector": {
            "label": {
              "multiple": true
            }
          }
        },
        "device_id": {
          "name": "Device ID",
          "description": "The ID(s) of the device(s) to add the label(s) to.",
          "required": true,
          "selector": {
            "device": {
              "multiple": true
            }
          }
        }
      }
    },
    "remove_alias_from_floor": {
      "name": "Remove an alias from a floor \uD83D\uDC7B",
      "description": "Removes an alias from a floor.",
      "fields": {
        "floor_id": {
          "name": "Floor ID",
          "description": "The ID of the floor to remove the alias from.",
          "required": true,
          "selector": {
            "floor": null
          }
        },
        "alias": {
          "name": "Alias",
          "description": "The alias (or list of aliasses) to remove from the floor.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "disable_polling": {
      "name": "Disable polling for updates \uD83D\uDC7B",
      "description": "Disables polling for updates for an integration configuration entry.",
      "fields": {
        "config_entry_id": {
          "name": "Config entry",
          "description": "The integration configuration entry to disable polling for.",
          "required": true,
          "selector": {
            "config_entry": null
          }
        }
      }
    },
    "disable_device": {
      "name": "Disable a device \uD83D\uDC7B",
      "description": "Disables a device on the fly.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "The device to disable.",
          "required": true,
          "selector": {
            "device": {
              "multiple": true
            }
          }
        }
      }
    },
    "hide_entity": {
      "name": "Hide an entity \uD83D\uDC7B",
      "description": "Hides an entity (or entities) on the fly.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "The entity/entities to hide.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "remove_entity_from_area": {
      "name": "Remove an entity from an area \uD83D\uDC7B",
      "description": "Removes an entity from an area. As an entity can only be in one area, this call doesn\u0027t need to specify the area. Please note, the entity will still be in the area of the device that provides it after this call.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "The ID of the entity (or entities) to remove the area from.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "disable_entity": {
      "name": "Disable an entity \uD83D\uDC7B",
      "description": "Disables an entity (or entities) on the fly.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "The entity/entities to disable.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "add_entity_to_area": {
      "name": "Add an entity to an area \uD83D\uDC7B",
      "description": "Adds an entity to an area. Please note, if the enity is already in an area, it will be removed from the previous area. This will override the area the device, that provides this entity, is in.",
      "fields": {
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area to add the entity to.",
          "required": true,
          "selector": {
            "area": null
          }
        },
        "entity_id": {
          "name": "Entity ID",
          "description": "The ID of the entity (or entities) to add to the area.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "remove_label_from_device": {
      "name": "Remove a label from a device \uD83D\uDC7B",
      "description": "Removes a label from a device. If multiple labels or multiple devices are provided, all combinations will be removed.",
      "fields": {
        "label_id": {
          "name": "Label ID",
          "description": "The ID(s) of the label(s) to remove from the device(s).",
          "required": true,
          "selector": {
            "label": {
              "multiple": true
            }
          }
        },
        "device_id": {
          "name": "Device ID",
          "description": "The ID(s) of the device(s) to remove the label(s) from.",
          "required": true,
          "selector": {
            "device": {
              "multiple": true
            }
          }
        }
      }
    },
    "delete_area": {
      "name": "Delete an area \uD83D\uDC7B",
      "description": "Deletes a new area on the fly.",
      "fields": {
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area to delete.",
          "required": true,
          "selector": {
            "area": null
          }
        }
      }
    },
    "delete_floor": {
      "name": "Delete a floor \uD83D\uDC7B",
      "description": "Deletes a floor on the fly.",
      "fields": {
        "floor_id": {
          "name": "Floor ID",
          "description": "The ID of the floor to delete.",
          "required": true,
          "selector": {
            "floor": null
          }
        }
      }
    },
    "disable_config_entry": {
      "name": "Disable an integration \uD83D\uDC7B",
      "description": "Disables an integration configuration entry.",
      "fields": {
        "config_entry_id": {
          "name": "Config entry",
          "description": "The integration configuration entry to disable.",
          "required": true,
          "selector": {
            "config_entry": null
          }
        }
      }
    },
    "set_floor_aliases": {
      "name": "Sets aliases for a floor \uD83D\uDC7B",
      "description": "Sets aliases for a floor. Overwrite and removed any existing aliases, fully replacing them with the new ones.",
      "fields": {
        "floor_id": {
          "name": "Floor ID",
          "description": "The ID of the floor to set the aliases for.",
          "required": true,
          "selector": {
            "floor": null
          }
        },
        "aliases": {
          "name": "Aliases",
          "description": "The aliases to set for the floor.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "remove_label_from_area": {
      "name": "Remove a label from an area \uD83D\uDC7B",
      "description": "Removes a label to an area. If multiple labels or multiple areas are provided, all combinations will be removed.",
      "fields": {
        "label_id": {
          "name": "Label ID",
          "description": "The ID(s) of the label(s) to remove from the area(s).",
          "required": true,
          "selector": {
            "label": {
              "multiple": true
            }
          }
        },
        "area_id": {
          "name": "Area ID",
          "description": "The ID(s) of the area(s) to remove the label(s) from.",
          "required": true,
          "selector": {
            "area": {
              "multiple": true
            }
          }
        }
      }
    },
    "enable_polling": {
      "name": "Enable polling for updates \uD83D\uDC7B",
      "description": "Enables polling for updates for an integration configuration entry.",
      "fields": {
        "config_entry_id": {
          "name": "Config entry",
          "description": "The integration configuration entry to enable polling for.",
          "required": true,
          "selector": {
            "config_entry": null
          }
        }
      }
    },
    "enable_device": {
      "name": "Enable a device \uD83D\uDC7B",
      "description": "Enables a device on the fly.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "The device to disable.",
          "required": true,
          "selector": {
            "device": {
              "multiple": true
            }
          }
        }
      }
    },
    "remove_area_from_floor": {
      "name": "Remove an area from a floor \uD83D\uDC7B",
      "description": "Removes an area from a floor. As an area can only be on one floor, this call doesn\u0027t need to specify the floor.",
      "fields": {
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area to remove the floor from.",
          "required": true,
          "selector": {
            "area": {
              "multiple": true
            }
          }
        }
      }
    },
    "add_label_to_entity": {
      "name": "Add a label to an entity \uD83D\uDC7B",
      "description": "Adds a label to an entity. If multiple labels or multiple entities are provided, all combinations will be added.",
      "fields": {
        "label_id": {
          "name": "Label ID",
          "description": "The ID(s) of the label(s) to add the entity/entities.",
          "required": true,
          "selector": {
            "label": {
              "multiple": true
            }
          }
        },
        "entity_id": {
          "name": "Entity ID",
          "description": "The ID(s) of the entity/entities to add the label(s) to.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "add_device_to_area": {
      "name": "Add a device to an area \uD83D\uDC7B",
      "description": "Adds an device to an area. Please note, if the device is already in an area, it will be removed from the previous area.",
      "fields": {
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area to add the device to.",
          "required": true,
          "selector": {
            "area": null
          }
        },
        "device_id": {
          "name": "Device ID",
          "description": "The ID of the device(s) to add to the area.",
          "required": true,
          "selector": {
            "device": {
              "multiple": true
            }
          }
        }
      }
    },
    "add_area_to_floor": {
      "name": "Add an area to a floor \uD83D\uDC7B",
      "description": "Adds an area to a floor. Please note, if the area is already on a floor, it will be removed from the previous floor.",
      "fields": {
        "floor_id": {
          "name": "Floor ID",
          "description": "The ID of the floor to add the area on.",
          "required": true,
          "selector": {
            "floor": null
          }
        },
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area(s) to add to the floor.",
          "required": true,
          "selector": {
            "area": {
              "multiple": true
            }
          }
        }
      }
    },
    "delete_label": {
      "name": "Delete a label \uD83D\uDC7B",
      "description": "Deletes a label on the fly.",
      "fields": {
        "label_id": {
          "name": "Label ID",
          "description": "The ID of the label to delete.",
          "required": true,
          "selector": {
            "label": null
          }
        }
      }
    },
    "unhide_entity": {
      "name": "Unhide an entity \uD83D\uDC7B",
      "description": "Unhides an entity (or entities) on the fly.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "The entity/entities to unhide.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true
            }
          }
        }
      }
    },
    "remove_device_from_area": {
      "name": "Remove a device from an area \uD83D\uDC7B",
      "description": "Removes a device from an area. As a device can only be in one area, this call doesn\u0027t need to specify the area.",
      "fields": {
        "device_id": {
          "name": "Device ID",
          "description": "The ID of the device to remove the area from.",
          "required": true,
          "selector": {
            "device": {
              "multiple": true
            }
          }
        }
      }
    },
    "delete_all_orphaned_entities": {
      "name": "Delete all orphaned entities \uD83D\uDC7B",
      "description": "Deletes all orphaned entities that no longer have an integration that claim/provide them. Please note, if the integration was just removed, it might need a restart for Home Assistant to realize they are orphaned.\n**WARNING** Entities might have been marked orphaned because an integration is offline or not working since Home Assistant started. Calling this action will delete those entities as well.",
      "fields": {}
    },
    "add_alias_to_area": {
      "name": "Add an alias to an area \uD83D\uDC7B",
      "description": "Adds an alias to an area.",
      "fields": {
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area to add the alias to.",
          "required": true,
          "selector": {
            "area": null
          }
        },
        "alias": {
          "name": "Alias",
          "description": "The alias (or list of aliasses) to add to the area.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "set_area_aliases": {
      "name": "Sets aliases for an area \uD83D\uDC7B",
      "description": "Sets aliases for an area. Overwrite and removed any existing aliases, fully replacing them with the new ones.",
      "fields": {
        "area_id": {
          "name": "Area ID",
          "description": "The ID of the area to set the aliases for.",
          "required": true,
          "selector": {
            "area": null
          }
        },
        "aliases": {
          "name": "Aliases",
          "description": "The aliases to set for the area.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    },
    "ignore_all_discovered": {
      "name": "Ignore all currently discovered devices \uD83D\uDC7B",
      "description": "Ignore all currently discovered devices that are shown on the integrations dashboard. This will not ignore devices that are discovered after this.",
      "fields": {
        "domain": {
          "name": "Integration domain",
          "description": "The integration domain to ignore all discovered devices for. If not provided, all domains will be considered to be ignored.",
          "required": false,
          "selector": {
            "text": null
          }
        }
      }
    },
    "update_entity_id": {
      "name": "Update an entity\u0027s ID \uD83D\uDC7B",
      "description": "Updates an entity\u0027s ID on the fly.",
      "fields": {
        "entity_id": {
          "name": "Entity",
          "description": "The entity/entities to update.",
          "required": true,
          "selector": {
            "entity": null
          }
        },
        "new_entity_id": {
          "name": "New Entity ID",
          "description": "The new ID for the entity",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "create_area": {
      "name": "Create an area \uD83D\uDC7B",
      "description": "Creates a new area on the fly.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "The name of the area to create.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "icon": {
          "name": "Icon",
          "description": "Icon to use for the area.",
          "required": false,
          "selector": {
            "icon": {
              "placeholder": "mdi:texture-box"
            }
          }
        },
        "aliases": {
          "name": "Aliases",
          "description": "A list of aliases for the area. This is useful if you want to use the area in a different language or different nickname.",
          "selector": {
            "object": null
          }
        }
      }
    },
    "create_label": {
      "name": "Create a label \uD83D\uDC7B",
      "description": "Creates a new label on the fly.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "The name of the label to create.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "Description for the label.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "icon": {
          "name": "Icon",
          "description": "Icon to use for the label.",
          "required": false,
          "selector": {
            "icon": {
              "placeholder": "mdi:tag"
            }
          }
        },
        "color": {
          "name": "Color",
          "description": "Color to use for the label. Can be a color name from the list, or a hex color code (like #FF0000).",
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Primary theme color",
                  "value": "primary"
                },
                {
                  "label": "Accent theme color",
                  "value": "accent"
                },
                {
                  "label": "Disabled theme color",
                  "value": "disabled"
                },
                {
                  "label": "Red",
                  "value": "red"
                },
                {
                  "label": "Pink",
                  "value": "pink"
                },
                {
                  "label": "Purple",
                  "value": "purple"
                },
                {
                  "label": "Deep purple",
                  "value": "deep_purple"
                },
                {
                  "label": "Indigo",
                  "value": "indigo"
                },
                {
                  "label": "Blue",
                  "value": "blue"
                },
                {
                  "label": "Light blue",
                  "value": "light_blue"
                },
                {
                  "label": "Cyan",
                  "value": "cyan"
                },
                {
                  "label": "Teal",
                  "value": "teal"
                },
                {
                  "label": "Green",
                  "value": "green"
                },
                {
                  "label": "Light green",
                  "value": "light_green"
                },
                {
                  "label": "Lime",
                  "value": "lime"
                },
                {
                  "label": "Yellow",
                  "value": "yellow"
                },
                {
                  "label": "Orange",
                  "value": "orange"
                },
                {
                  "label": "Deep orange",
                  "value": "deep_orange"
                },
                {
                  "label": "Brown",
                  "value": "brown"
                },
                {
                  "label": "Grey",
                  "value": "grey"
                },
                {
                  "label": "Blue grey",
                  "value": "blue_grey"
                },
                {
                  "label": "Black",
                  "value": "black"
                },
                {
                  "label": "White",
                  "value": "white"
                }
              ]
            }
          }
        }
      }
    }
  },
  "persistent_notification": {
    "create": {
      "name": "Create",
      "description": "Shows a notification on the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "Please check your configuration.yaml.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Test notification",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Optional title of the notification."
        },
        "notification_id": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
        }
      }
    },
    "dismiss": {
      "name": "Dismiss",
      "description": "Deletes a notification from the notifications panel.",
      "fields": {
        "notification_id": {
          "required": true,
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Notification ID",
          "description": "ID of the notification to be deleted."
        }
      }
    },
    "dismiss_all": {
      "name": "Dismiss all",
      "description": "Deletes all notifications from the notifications panel.",
      "fields": {}
    }
  },
  "system_log": {
    "clear": {
      "name": "Clear",
      "description": "Deletes all log entries.",
      "fields": {}
    },
    "write": {
      "name": "Write",
      "description": "Write log entry.",
      "fields": {
        "message": {
          "required": true,
          "example": "Something went wrong",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message to log."
        },
        "level": {
          "default": "error",
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Log level."
        },
        "logger": {
          "example": "mycomponent.myplatform",
          "selector": {
            "text": null
          },
          "name": "Logger",
          "description": "Logger name under which to log the message. Defaults to \u0060system_log.external\u0060."
        }
      }
    }
  },
  "logger": {
    "set_default_level": {
      "name": "Set default level",
      "description": "Sets the default log level for integrations.",
      "fields": {
        "level": {
          "selector": {
            "select": {
              "options": [
                "debug",
                "info",
                "warning",
                "error",
                "fatal",
                "critical"
              ],
              "translation_key": "level"
            }
          },
          "name": "Level",
          "description": "Default severity level for all integrations."
        }
      }
    },
    "set_level": {
      "name": "Set level",
      "description": "Sets the log level for one or more integrations.",
      "fields": {}
    }
  },
  "frontend": {
    "set_theme": {
      "name": "Set the default theme",
      "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
      "fields": {
        "name": {
          "required": true,
          "example": "default",
          "selector": {
            "theme": {
              "include_default": true
            }
          },
          "name": "Theme",
          "description": "Name of a theme."
        },
        "mode": {
          "default": "light",
          "selector": {
            "select": {
              "options": [
                "dark",
                "light"
              ],
              "translation_key": "mode"
            }
          },
          "name": "Mode",
          "description": "Theme mode."
        }
      }
    },
    "reload_themes": {
      "name": "Reload themes",
      "description": "Reloads themes from the YAML-configuration.",
      "fields": {}
    }
  },
  "recorder": {
    "purge": {
      "name": "Purge",
      "description": "Starts purge task - to clean up old data from your database.",
      "fields": {
        "keep_days": {
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged."
        },
        "repack": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Repack",
          "description": "Attempt to save disk space by rewriting the entire database file."
        },
        "apply_filter": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Apply filter",
          "description": "Apply \u0060entity_id\u0060 and \u0060event_type\u0060 filters in addition to time-based purge."
        }
      }
    },
    "purge_entities": {
      "name": "Purge entities",
      "description": "Starts a purge task to remove the data related to specific entities from your database.",
      "fields": {
        "entity_id": {
          "required": false,
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities to remove",
          "description": "List of entities for which the data is to be removed from the Recorder database."
        },
        "domains": {
          "example": "sun",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Domains to remove",
          "description": "List of domains for which the data needs to be removed from the Recorder database."
        },
        "entity_globs": {
          "example": "domain*.object_id*",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Entity globs to remove",
          "description": "List of glob patterns used to select the entities for which the data is to be removed from the Recorder database."
        },
        "keep_days": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 365,
              "unit_of_measurement": "days"
            }
          },
          "name": "Days to keep",
          "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of \u00607\u0060 means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
        }
      }
    },
    "enable": {
      "name": "Enable",
      "description": "Starts the recording of events and state changes.",
      "fields": {}
    },
    "disable": {
      "name": "Disable",
      "description": "Stops the recording of events and state changes.",
      "fields": {}
    },
    "get_statistics": {
      "name": "Get statistics",
      "description": "Retrieves statistics data for entities within a specific time period.",
      "fields": {
        "start_time": {
          "required": true,
          "example": "2025-01-01 00:00:00",
          "selector": {
            "datetime": null
          },
          "name": "Start time",
          "description": "The start time for the statistics query."
        },
        "end_time": {
          "required": false,
          "example": "2025-01-02 00:00:00",
          "selector": {
            "datetime": null
          },
          "name": "End time",
          "description": "The end time for the statistics query. If omitted, returns all statistics from start time onward."
        },
        "statistic_ids": {
          "required": true,
          "example": [
            "sensor.energy_consumption",
            "sensor.temperature"
          ],
          "selector": {
            "statistic": {
              "multiple": true
            }
          },
          "name": "Statistic IDs",
          "description": "The entity IDs or statistic IDs to return statistics for."
        },
        "period": {
          "required": true,
          "example": "hour",
          "selector": {
            "select": {
              "options": [
                "5minute",
                "hour",
                "day",
                "week",
                "month"
              ]
            }
          },
          "name": "Period",
          "description": "The time period to group statistics by."
        },
        "types": {
          "required": true,
          "example": [
            "mean",
            "sum"
          ],
          "selector": {
            "select": {
              "options": [
                "change",
                "last_reset",
                "max",
                "mean",
                "min",
                "state",
                "sum"
              ],
              "multiple": true
            }
          },
          "name": "Types",
          "description": "The types of statistics values to return."
        },
        "units": {
          "required": false,
          "example": {
            "energy": "kWh",
            "temperature": "\u00B0C"
          },
          "selector": {
            "object": null
          },
          "name": "Units",
          "description": "Optional unit conversion mapping."
        }
      },
      "response": {
        "optional": false
      }
    },
    "import_statistics": {
      "name": "Import statistics \uD83D\uDC7B",
      "description": "Import long-term statistics.",
      "fields": {
        "statistic_id": {
          "name": "Statistics ID",
          "description": "The statistics ID (entity ID) to import for.",
          "required": true,
          "selector": {
            "entity": null
          }
        },
        "name": {
          "name": "Name",
          "description": "The name of the statistics.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "source": {
          "name": "Source",
          "description": "The source of the statistics data.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "unit_of_measurement": {
          "name": "Unit of measurement",
          "description": "The unit of measurement of the statistics.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "has_mean": {
          "name": "Has a mean",
          "description": "If the statistics has a mean value.",
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "has_sum": {
          "name": "Has a sum",
          "description": "If the statistics has a sum value.",
          "required": true,
          "selector": {
            "boolean": null
          }
        },
        "stats": {
          "name": "Statistics",
          "description": "A list of mappings/dictionaries with statistics to import. The dictionaries must contain a \u0022start\u0022 key with a datetime string other valid options are \u0022mean\u0022, \u0022sum\u0022, \u0022min\u0022, \u0022max\u0022, \u0022last_reset\u0022, and \u0022state\u0022. All of those are optional and either an integer or a float, except for \u0022last_reset\u0022 which is a datetime string.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "universal": {
    "reload": {
      "name": "Reload",
      "description": "Reloads universal media players from the YAML-configuration.",
      "fields": {}
    }
  },
  "media_player": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the power of the media player.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a media player on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              384
            ]
          }
        ]
      }
    },
    "volume_up": {
      "name": "Turn up volume",
      "description": "Turns up the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "volume_down": {
      "name": "Turn down volume",
      "description": "Turns down the volume.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4,
              1024
            ]
          }
        ]
      }
    },
    "media_play_pause": {
      "name": "Play/Pause",
      "description": "Toggles play/pause.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16385
            ]
          }
        ]
      }
    },
    "media_play": {
      "name": "Play",
      "description": "Starts playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16384
            ]
          }
        ]
      }
    },
    "media_pause": {
      "name": "Pause",
      "description": "Pauses.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "media_stop": {
      "name": "Stop",
      "description": "Stops playing.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4096
            ]
          }
        ]
      }
    },
    "media_next_track": {
      "name": "Next",
      "description": "Selects the next track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "media_previous_track": {
      "name": "Previous",
      "description": "Selects the previous track.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clear_playlist": {
      "name": "Clear playlist",
      "description": "Removes all items from the playlist.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "volume_set": {
      "name": "Set volume",
      "description": "Sets the volume level.",
      "fields": {
        "volume_level": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "name": "Level",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "volume_mute": {
      "name": "Mute/unmute volume",
      "description": "Mutes or unmutes the media player.",
      "fields": {
        "is_volume_muted": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Muted",
          "description": "Defines whether or not it is muted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "media_seek": {
      "name": "Seek",
      "description": "Allows you to go to a different part of the media that is currently playing.",
      "fields": {
        "seek_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.01,
              "mode": "box"
            }
          },
          "name": "Position",
          "description": "Target position in the currently playing media. The format is platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "join": {
      "name": "Join",
      "description": "Groups media players together for synchronous playback. Only works on supported multiroom audio systems.",
      "fields": {
        "group_members": {
          "required": true,
          "example": "- media_player.multiroom_player2\n- media_player.multiroom_player3\n",
          "selector": {
            "entity": {
              "multiple": true,
              "domain": "media_player"
            }
          },
          "name": "Group members",
          "description": "The players which will be synced with the playback specified in \u0027Targets\u0027."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "select_source": {
      "name": "Select source",
      "description": "Sends the media player the command to change input source.",
      "fields": {
        "source": {
          "required": true,
          "example": "video1",
          "selector": {
            "text": null
          },
          "name": "Source",
          "description": "Name of the source to switch to. Platform dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              2048
            ]
          }
        ]
      }
    },
    "select_sound_mode": {
      "name": "Select sound mode",
      "description": "Selects a specific sound mode.",
      "fields": {
        "sound_mode": {
          "example": "Music",
          "selector": {
            "text": null
          },
          "name": "Sound mode",
          "description": "Name of the sound mode to switch to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              65536
            ]
          }
        ]
      }
    },
    "play_media": {
      "name": "Play media",
      "description": "Starts playing specified media.",
      "fields": {
        "media_content_id": {
          "required": true,
          "example": "https://home-assistant.io/images/cast/splash.png",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to play. Platform dependent."
        },
        "media_content_type": {
          "required": true,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to play, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "enqueue": {
          "filter": {
            "supported_features": [
              2097152
            ]
          },
          "required": false,
          "selector": {
            "select": {
              "options": [
                "play",
                "next",
                "add",
                "replace"
              ],
              "translation_key": "enqueue"
            }
          },
          "name": "Enqueue",
          "description": "If the content should be played now or be added to the queue."
        },
        "announce": {
          "filter": {
            "supported_features": [
              1048576
            ]
          },
          "required": false,
          "example": "true",
          "selector": {
            "boolean": null
          },
          "name": "Announce",
          "description": "If the media should be played as an announcement."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "browse_media": {
      "name": "Browse media",
      "description": "Browses the available media.",
      "fields": {
        "media_content_type": {
          "required": false,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "media_content_id": {
          "required": false,
          "example": "A:ALBUMARTIST/Beatles",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to browse. Integration dependent."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              131072
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "search_media": {
      "name": "Search media",
      "description": "Searches the available media.",
      "fields": {
        "search_query": {
          "required": true,
          "example": "Beatles",
          "selector": {
            "text": null
          },
          "name": "Search query",
          "description": "The term to search for."
        },
        "media_content_type": {
          "required": false,
          "example": "music",
          "selector": {
            "text": null
          },
          "name": "Content type",
          "description": "The type of the content to browse, such as image, music, tv show, video, episode, channel, or playlist."
        },
        "media_content_id": {
          "required": false,
          "example": "A:ALBUMARTIST/Beatles",
          "selector": {
            "text": null
          },
          "name": "Content ID",
          "description": "The ID of the content to browse. Integration dependent."
        },
        "media_filter_classes": {
          "required": false,
          "example": [
            "album",
            "artist"
          ],
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Media class filter",
          "description": "List of media classes to filter the search results by."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              4194304
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    },
    "shuffle_set": {
      "name": "Set shuffle",
      "description": "Enables or disables the shuffle mode.",
      "fields": {
        "shuffle": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Shuffle mode",
          "description": "Whether the media should be played in randomized order or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              32768
            ]
          }
        ]
      }
    },
    "unjoin": {
      "name": "Unjoin",
      "description": "Removes the player from a group. Only works on platforms which support player groups.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              524288
            ]
          }
        ]
      }
    },
    "repeat_set": {
      "name": "Set repeat",
      "description": "Sets the repeat mode.",
      "fields": {
        "repeat": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "off",
                "all",
                "one"
              ],
              "translation_key": "repeat"
            }
          },
          "name": "Repeat mode",
          "description": "Whether the media (one or all) should be played in a loop or not."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "media_player"
            ],
            "supported_features": [
              262144
            ]
          }
        ]
      }
    }
  },
  "hassio": {
    "addon_start": {
      "name": "Start add-on",
      "description": "Starts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to start."
        }
      }
    },
    "addon_stop": {
      "name": "Stop add-on",
      "description": "Stops an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to stop."
        }
      }
    },
    "addon_restart": {
      "name": "Restart add-on",
      "description": "Restarts an add-on.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to restart."
        }
      }
    },
    "addon_stdin": {
      "name": "Write data to add-on stdin",
      "description": "Writes data to the add-on\u0027s standard input.",
      "fields": {
        "addon": {
          "required": true,
          "example": "core_ssh",
          "selector": {
            "addon": null
          },
          "name": "Add-on",
          "description": "The add-on to write to."
        }
      }
    },
    "host_shutdown": {
      "name": "Power off the host system",
      "description": "Powers off the host system.",
      "fields": {}
    },
    "host_reboot": {
      "name": "Reboot the host system",
      "description": "Reboots the host system.",
      "fields": {}
    },
    "backup_full": {
      "name": "Create a full backup",
      "description": "Creates a full backup.",
      "fields": {
        "name": {
          "example": "Backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        }
      }
    },
    "backup_partial": {
      "name": "Create a partial backup",
      "description": "Creates a partial backup.",
      "fields": {
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Includes Home Assistant settings in the backup."
        },
        "homeassistant_exclude_database": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant exclude database",
          "description": "Exclude the Home Assistant database file from the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to include in the backup. Use the name slug of each add-on."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to include in the backup."
        },
        "name": {
          "example": "Partial backup 1",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Optional (default = current date and time)."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Password to protect the backup with."
        },
        "compressed": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Compressed",
          "description": "Compresses the backup files."
        },
        "location": {
          "example": "my_backup_mount",
          "selector": {
            "backup_location": null
          },
          "name": "Location",
          "description": "Name of a backup network storage to host backups."
        }
      }
    },
    "restore_full": {
      "name": "Restore from full backup",
      "description": "Restores from full backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    },
    "restore_partial": {
      "name": "Restore from partial backup",
      "description": "Restores from a partial backup.",
      "fields": {
        "slug": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Slug",
          "description": "Slug of backup to restore from."
        },
        "homeassistant": {
          "selector": {
            "boolean": null
          },
          "name": "Home Assistant settings",
          "description": "Restores Home Assistant."
        },
        "folders": {
          "example": [
            "homeassistant",
            "share"
          ],
          "selector": {
            "object": null
          },
          "name": "Folders",
          "description": "List of directories to restore from the backup."
        },
        "addons": {
          "example": [
            "core_ssh",
            "core_samba",
            "core_mosquitto"
          ],
          "selector": {
            "object": null
          },
          "name": "Add-ons",
          "description": "List of add-ons to restore from the backup. Use the name slug of each add-on."
        },
        "password": {
          "example": "password",
          "selector": {
            "text": null
          },
          "name": "Password",
          "description": "Optional password."
        }
      }
    }
  },
  "ffmpeg": {
    "start": {
      "name": "Start",
      "description": "Sends a start command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will start. Platform dependent."
        }
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Sends a stop command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will stop. Platform dependent."
        }
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Sends a restart command to an FFmpeg-based sensor.",
      "fields": {
        "entity_id": {
          "selector": {
            "entity": {
              "integration": "ffmpeg",
              "domain": "binary_sensor"
            }
          },
          "name": "Entity",
          "description": "Name of entity that will restart. Platform dependent."
        }
      }
    }
  },
  "update": {
    "install": {
      "name": "Install update",
      "description": "Installs an update for a device or service.",
      "fields": {
        "version": {
          "required": false,
          "example": "1.0.0",
          "selector": {
            "text": null
          },
          "name": "Version",
          "description": "The version to install. If omitted, the latest version will be installed."
        },
        "backup": {
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Backup",
          "description": "If supported by the integration, this creates a backup before starting the update."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "skip": {
      "name": "Skip update",
      "description": "Marks currently available update as skipped.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    },
    "clear_skipped": {
      "name": "Clear skipped update",
      "description": "Removes the skipped version marker from an update.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "update"
            ]
          }
        ]
      }
    }
  },
  "backup": {
    "create_automatic": {
      "name": "Create automatic backup",
      "description": "Creates a new backup with automatic backup settings.",
      "fields": {}
    }
  },
  "camera": {
    "enable_motion_detection": {
      "name": "Enable motion detection",
      "description": "Enables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "disable_motion_detection": {
      "name": "Disable motion detection",
      "description": "Disables the motion detection.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the camera.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "snapshot": {
      "name": "Take snapshot",
      "description": "Takes a snapshot from a camera.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "play_stream": {
      "name": "Play stream",
      "description": "Plays the camera stream on a supported media player.",
      "fields": {
        "media_player": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player",
          "description": "Media players to stream to."
        },
        "format": {
          "default": "hls",
          "selector": {
            "select": {
              "options": [
                "hls"
              ]
            }
          },
          "name": "Format",
          "description": "Stream format supported by the media player."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    },
    "record": {
      "name": "Record",
      "description": "Creates a recording of a live camera feed.",
      "fields": {
        "filename": {
          "required": true,
          "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
          "selector": {
            "text": null
          },
          "name": "Filename",
          "description": "Full path to filename. Must be mp4."
        },
        "duration": {
          "default": 30,
          "selector": {
            "number": {
              "min": 1,
              "max": 3600,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "Planned duration of the recording. The actual duration may vary."
        },
        "lookback": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Lookback",
          "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "camera"
            ]
          }
        ]
      }
    }
  },
  "conversation": {
    "process": {
      "name": "Process",
      "description": "Launches a conversation from a transcribed text.",
      "fields": {
        "text": {
          "example": "Turn all lights on",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Text",
          "description": "Transcribed text input."
        },
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language of text. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
        },
        "conversation_id": {
          "example": "my_conversation_1",
          "selector": {
            "text": null
          },
          "name": "Conversation ID",
          "description": "ID of the conversation, to be able to continue a previous conversation"
        }
      },
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the intent configuration.",
      "fields": {
        "language": {
          "example": "NL",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to clear cached intents for. Defaults to server language."
        },
        "agent_id": {
          "example": "homeassistant",
          "selector": {
            "conversation_agent": null
          },
          "name": "Agent",
          "description": "Conversation agent to reload."
        }
      }
    }
  },
  "tts": {
    "speak": {
      "name": "Speak",
      "description": "Speaks something using text-to-speech on a media player.",
      "fields": {
        "media_player_entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          },
          "name": "Media player entity",
          "description": "Media players to play the message."
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "The text you want to convert into speech so that you can listen to it on your device."
        },
        "cache": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cache",
          "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          },
          "name": "Language",
          "description": "Language to use for speech generation."
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Options",
          "description": "A dictionary containing integration-specific options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "tts"
            ]
          }
        ]
      }
    },
    "clear_cache": {
      "name": "Clear TTS cache",
      "description": "Removes all cached text-to-speech files and purges the memory.",
      "fields": {}
    },
    "cloud_say": {
      "name": "Say a TTS message with cloud",
      "description": "Say something using text-to-speech on a media player with cloud.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "domain": "media_player"
            }
          }
        },
        "message": {
          "example": "My name is hanna",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "cache": {
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "language": {
          "example": "ru",
          "selector": {
            "text": null
          }
        },
        "options": {
          "advanced": true,
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "google_assistant": {
    "request_sync": {
      "name": "Request sync",
      "description": "Sends a request_sync command to Google.",
      "fields": {
        "agent_user_id": {
          "selector": {
            "text": null
          },
          "name": "Agent user ID",
          "description": "Only needed for automations. Specific Home Assistant user ID (not username, ID in Settings \u003E People \u003E Users \u003E under username) to sync with Google Assistant. Not needed when you use this action through Home Assistant frontend or API. Used in automation, script or other place where context.user_id is missing."
        }
      }
    }
  },
  "button": {
    "press": {
      "name": "Press",
      "description": "Press the button entity.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "button"
            ]
          }
        ]
      }
    }
  },
  "cloud": {
    "remote_connect": {
      "name": "Enable remote access",
      "description": "Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.",
      "fields": {}
    },
    "remote_disconnect": {
      "name": "Disable remote access",
      "description": "Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.",
      "fields": {}
    }
  },
  "scene": {
    "reload": {
      "name": "Reload",
      "description": "Reloads the scenes from the YAML-configuration.",
      "fields": {}
    },
    "apply": {
      "name": "Apply",
      "description": "Activates a scene with configuration.",
      "fields": {
        "entities": {
          "required": true,
          "example": "light.kitchen: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 80\n",
          "selector": {
            "object": null
          },
          "name": "Entities state",
          "description": "List of entities and their target state."
        },
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      }
    },
    "create": {
      "name": "Create",
      "description": "Creates a new scene.",
      "fields": {
        "scene_id": {
          "required": true,
          "example": "all_lights",
          "selector": {
            "text": null
          },
          "name": "Scene entity ID",
          "description": "The entity ID of the new scene."
        },
        "entities": {
          "advanced": true,
          "example": "light.tv_back_light: \u0022on\u0022\nlight.ceiling:\n  state: \u0022on\u0022\n  brightness: 200\n",
          "selector": {
            "object": null
          },
          "name": "Entity states",
          "description": "List of entities and their target state. If your entities are already in the target state right now, use \u0027Entities snapshot\u0027 instead."
        },
        "snapshot_entities": {
          "example": "- light.ceiling\n- light.kitchen\n",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities snapshot",
          "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine \u0027Entities snapshot\u0027 with \u0027Entity states\u0027."
        }
      }
    },
    "delete": {
      "name": "Delete",
      "description": "Deletes a dynamically created scene.",
      "fields": {},
      "target": {
        "entity": [
          {
            "integration": "homeassistant",
            "domain": [
              "scene"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Activate",
      "description": "Activates a scene.",
      "fields": {
        "transition": {
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Time it takes the devices to transition into the states defined in the scene."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "scene"
            ]
          }
        ]
      }
    }
  },
  "select": {
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    },
    "random": {
      "name": "Select random option \uD83D\uDC7B",
      "description": "Select an random option for a select entity.",
      "fields": {
        "options": {
          "name": "Options",
          "description": "Limits the options to select from. If not provided, all options will be considered.",
          "required": false,
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ]
          }
        ]
      }
    }
  },
  "number": {
    "set_value": {
      "name": "Set",
      "description": "Sets the value of a number.",
      "fields": {
        "value": {
          "example": 42,
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    },
    "min": {
      "name": "Set minimum value \uD83D\uDC7B",
      "description": "Set a number entity to its minimum value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increase value \uD83D\uDC7B",
      "description": "Increase a number entity value by a certain amount.",
      "fields": {
        "amount": {
          "name": "Amount",
          "description": "The amount to increase the number with. If not provided, the step of the number entity will be used.",
          "required": false,
          "selector": {
            "number": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    },
    "max": {
      "name": "Set maximum value \uD83D\uDC7B",
      "description": "Set a number entity to its maximum value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrease value \uD83D\uDC7B",
      "description": "Decrease a number entity value by a certain amount.",
      "fields": {
        "amount": {
          "name": "Amount",
          "description": "The amount to decrease the number with. If not provided, the step of the number entity will be used.",
          "required": false,
          "selector": {
            "number": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "number"
            ]
          }
        ]
      }
    }
  },
  "logbook": {
    "log": {
      "name": "Log",
      "description": "Creates a custom entry in the logbook.",
      "fields": {
        "name": {
          "required": true,
          "example": "Kitchen",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Custom name for an entity, can be referenced using the \u0027Entity ID\u0027 field."
        },
        "message": {
          "required": true,
          "example": "is being used",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message of the logbook entry."
        },
        "entity_id": {
          "selector": {
            "entity": null
          },
          "name": "Entity ID",
          "description": "Entity to reference in the logbook entry."
        },
        "domain": {
          "example": "light",
          "selector": {
            "text": null
          },
          "name": "Domain",
          "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
        }
      }
    }
  },
  "group": {
    "reload": {
      "name": "Reload",
      "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
      "fields": {}
    },
    "set": {
      "name": "Set",
      "description": "Creates/Updates a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "text": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        },
        "name": {
          "example": "My test group",
          "selector": {
            "text": null
          },
          "name": "Name",
          "description": "Name of the group."
        },
        "icon": {
          "example": "mdi:camera",
          "selector": {
            "icon": null
          },
          "name": "Icon",
          "description": "Name of the icon for the group."
        },
        "entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Entities",
          "description": "List of all members in the group. Cannot be used in combination with \u0060Add entities\u0060 or \u0060Remove entities\u0060."
        },
        "add_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Add entities",
          "description": "List of members to be added to the group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Remove entities\u0060."
        },
        "remove_entities": {
          "example": "domain.entity_id1, domain.entity_id2",
          "selector": {
            "entity": {
              "multiple": true
            }
          },
          "name": "Remove entities",
          "description": "List of members to be removed from a group. Cannot be used in combination with \u0060Entities\u0060 or \u0060Add entities\u0060."
        },
        "all": {
          "selector": {
            "boolean": null
          },
          "name": "All",
          "description": "Enable this option if the group should only be used when all entities are in state \u0060on\u0060."
        }
      }
    },
    "remove": {
      "name": "Remove",
      "description": "Removes a group.",
      "fields": {
        "object_id": {
          "required": true,
          "example": "test_group",
          "selector": {
            "object": null
          },
          "name": "Object ID",
          "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
        }
      }
    }
  },
  "light": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on one or more lights and adjusts their properties, even when they are turned on already.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "color_temp_kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "brightness_step_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": -100,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness step",
          "description": "Change brightness by a percentage."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "brightness_step": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": -225,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "translation_key": "flash",
                  "options": [
                    "long",
                    "short"
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off one or more lights.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "translation_key": "flash",
                  "options": [
                    "long",
                    "short"
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles one or more lights, from on to off, or off to on, based on their current state.",
      "fields": {
        "transition": {
          "filter": {
            "supported_features": [
              32
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Transition",
          "description": "Duration it takes to get to next state."
        },
        "rgb_color": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "example": "[255, 100, 100]",
          "selector": {
            "color_rgb": null
          },
          "name": "Color",
          "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
        },
        "color_temp_kelvin": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "color_temp": {
              "unit": "kelvin",
              "min": 2000,
              "max": 6500
            }
          },
          "name": "Color temperature",
          "description": "Color temperature in Kelvin."
        },
        "brightness_pct": {
          "filter": {
            "attribute": {
              "supported_color_modes": [
                "brightness",
                "color_temp",
                "hs",
                "xy",
                "rgb",
                "rgbw",
                "rgbww"
              ]
            }
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
        },
        "effect": {
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Effect",
          "description": "Light effect."
        },
        "advanced_fields": {
          "collapsed": true,
          "fields": {
            "rgbw_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50]",
              "selector": {
                "object": null
              }
            },
            "rgbww_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[255, 100, 100, 50, 70]",
              "selector": {
                "object": null
              }
            },
            "color_name": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "select": {
                  "translation_key": "color_name",
                  "options": [
                    "homeassistant",
                    "aliceblue",
                    "antiquewhite",
                    "aqua",
                    "aquamarine",
                    "azure",
                    "beige",
                    "bisque",
                    "blanchedalmond",
                    "blue",
                    "blueviolet",
                    "brown",
                    "burlywood",
                    "cadetblue",
                    "chartreuse",
                    "chocolate",
                    "coral",
                    "cornflowerblue",
                    "cornsilk",
                    "crimson",
                    "cyan",
                    "darkblue",
                    "darkcyan",
                    "darkgoldenrod",
                    "darkgray",
                    "darkgreen",
                    "darkgrey",
                    "darkkhaki",
                    "darkmagenta",
                    "darkolivegreen",
                    "darkorange",
                    "darkorchid",
                    "darkred",
                    "darksalmon",
                    "darkseagreen",
                    "darkslateblue",
                    "darkslategray",
                    "darkslategrey",
                    "darkturquoise",
                    "darkviolet",
                    "deeppink",
                    "deepskyblue",
                    "dimgray",
                    "dimgrey",
                    "dodgerblue",
                    "firebrick",
                    "floralwhite",
                    "forestgreen",
                    "fuchsia",
                    "gainsboro",
                    "ghostwhite",
                    "gold",
                    "goldenrod",
                    "gray",
                    "green",
                    "greenyellow",
                    "grey",
                    "honeydew",
                    "hotpink",
                    "indianred",
                    "indigo",
                    "ivory",
                    "khaki",
                    "lavender",
                    "lavenderblush",
                    "lawngreen",
                    "lemonchiffon",
                    "lightblue",
                    "lightcoral",
                    "lightcyan",
                    "lightgoldenrodyellow",
                    "lightgray",
                    "lightgreen",
                    "lightgrey",
                    "lightpink",
                    "lightsalmon",
                    "lightseagreen",
                    "lightskyblue",
                    "lightslategray",
                    "lightslategrey",
                    "lightsteelblue",
                    "lightyellow",
                    "lime",
                    "limegreen",
                    "linen",
                    "magenta",
                    "maroon",
                    "mediumaquamarine",
                    "mediumblue",
                    "mediumorchid",
                    "mediumpurple",
                    "mediumseagreen",
                    "mediumslateblue",
                    "mediumspringgreen",
                    "mediumturquoise",
                    "mediumvioletred",
                    "midnightblue",
                    "mintcream",
                    "mistyrose",
                    "moccasin",
                    "navajowhite",
                    "navy",
                    "navyblue",
                    "oldlace",
                    "olive",
                    "olivedrab",
                    "orange",
                    "orangered",
                    "orchid",
                    "palegoldenrod",
                    "palegreen",
                    "paleturquoise",
                    "palevioletred",
                    "papayawhip",
                    "peachpuff",
                    "peru",
                    "pink",
                    "plum",
                    "powderblue",
                    "purple",
                    "red",
                    "rosybrown",
                    "royalblue",
                    "saddlebrown",
                    "salmon",
                    "sandybrown",
                    "seagreen",
                    "seashell",
                    "sienna",
                    "silver",
                    "skyblue",
                    "slateblue",
                    "slategray",
                    "slategrey",
                    "snow",
                    "springgreen",
                    "steelblue",
                    "tan",
                    "teal",
                    "thistle",
                    "tomato",
                    "turquoise",
                    "violet",
                    "wheat",
                    "white",
                    "whitesmoke",
                    "yellow",
                    "yellowgreen"
                  ]
                }
              }
            },
            "hs_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[300, 70]",
              "selector": {
                "object": null
              }
            },
            "xy_color": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "example": "[0.52, 0.43]",
              "selector": {
                "object": null
              }
            },
            "color_temp": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "color_temp": {
                  "unit": "mired",
                  "min": 153,
                  "max": 500
                }
              }
            },
            "brightness": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "brightness",
                    "color_temp",
                    "hs",
                    "xy",
                    "rgb",
                    "rgbw",
                    "rgbww"
                  ]
                }
              },
              "selector": {
                "number": {
                  "min": 0,
                  "max": 255
                }
              }
            },
            "white": {
              "filter": {
                "attribute": {
                  "supported_color_modes": [
                    "white"
                  ]
                }
              },
              "selector": {
                "constant": {
                  "value": true,
                  "label": "Enabled"
                }
              }
            },
            "profile": {
              "example": "relax",
              "selector": {
                "text": null
              }
            },
            "flash": {
              "filter": {
                "supported_features": [
                  8
                ]
              },
              "selector": {
                "select": {
                  "translation_key": "flash",
                  "options": [
                    "long",
                    "short"
                  ]
                }
              }
            }
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "lock": {
    "unlock": {
      "name": "Unlock",
      "description": "Unlocks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to unlock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "lock": {
      "name": "Lock",
      "description": "Locks a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to lock the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ]
          }
        ]
      }
    },
    "open": {
      "name": "Open",
      "description": "Opens a lock.",
      "fields": {
        "code": {
          "example": 1234,
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code used to open the lock."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "lock"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    }
  },
  "script": {
    "launch_moonlight_on_mi_pad_5": {
      "name": "Launch Moonlight on Mi Pad 5",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "1714535235439": {
      "name": "Launch App",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "send_tv_notification": {
      "name": "Send TV Notification",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "launch_hlk_radar_tool": {
      "name": "Launch HLK Radar Tool",
      "description": "",
      "fields": {},
      "response": {
        "optional": true
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads all the available scripts.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Runs the sequence of actions defined in a script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Stops a running script.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Starts a script if it isn\u0027t running, stops it otherwise.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "script"
            ]
          }
        ]
      }
    }
  },
  "zone": {
    "reload": {
      "name": "Reload",
      "description": "Reloads zones from the YAML-configuration.",
      "fields": {}
    },
    "update": {
      "name": "Update a zone \uD83D\uDC7B",
      "description": "Update properties of a zone on the fly.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "The ID of the entity (or entities) to update.",
          "required": true,
          "selector": {
            "entity": {
              "filter": [
                {
                  "domain": "zone"
                }
              ]
            }
          }
        },
        "name": {
          "name": "Name",
          "description": "Name of the zone",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "icon": {
          "name": "Icon",
          "description": "Icon to use for the zone",
          "required": false,
          "selector": {
            "icon": {
              "placeholder": "mdi:map-marker"
            }
          }
        },
        "latitude": {
          "name": "Latitude",
          "description": "Latitude of the zone",
          "required": false,
          "selector": {
            "number": {
              "min": -90,
              "max": 90,
              "step": "any",
              "mode": "box",
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "longitude": {
          "name": "Longitude",
          "description": "Longitude of the zone",
          "required": false,
          "selector": {
            "number": {
              "min": -180,
              "max": 180,
              "step": "any",
              "mode": "box",
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "radius": {
          "name": "Radius",
          "description": "Radius of the zone",
          "required": false,
          "default": 100,
          "selector": {
            "number": {
              "min": 0,
              "max": 999999999999,
              "step": "any",
              "unit_of_measurement": "m",
              "mode": "box"
            }
          }
        }
      }
    },
    "delete": {
      "name": "Delete a zone \uD83D\uDC7B",
      "description": "Delete a zone. This works only with zones created and managed via the UI. Zones created and managed in YAML cannot be managed by Spook.",
      "fields": {
        "entity_id": {
          "name": "Entity ID",
          "description": "The ID of the entity (or entities) to remove.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true,
              "filter": [
                {
                  "domain": "zone"
                }
              ]
            }
          }
        }
      }
    },
    "create": {
      "name": "Create a zone \uD83D\uDC7B",
      "description": "Create a new zone in Home Assistant on the fly.",
      "fields": {
        "name": {
          "name": "Name",
          "description": "Name of the zone",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "icon": {
          "name": "Icon",
          "description": "Icon to use for the zone",
          "required": false,
          "selector": {
            "icon": {
              "placeholder": "mdi:map-marker"
            }
          }
        },
        "latitude": {
          "name": "Latitude",
          "description": "Latitude of the zone",
          "required": true,
          "selector": {
            "number": {
              "min": -90,
              "max": 90,
              "step": "any",
              "mode": "box",
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "longitude": {
          "name": "Longitude",
          "description": "Longitude of the zone",
          "required": true,
          "selector": {
            "number": {
              "min": -180,
              "max": 180,
              "step": "any",
              "mode": "box",
              "unit_of_measurement": "\u00B0"
            }
          }
        },
        "radius": {
          "name": "Radius",
          "description": "Radius of the zone",
          "required": false,
          "default": 100,
          "selector": {
            "number": {
              "min": 0,
              "max": 999999999999,
              "unit_of_measurement": "m",
              "mode": "box"
            }
          }
        }
      }
    }
  },
  "person": {
    "reload": {
      "name": "Reload",
      "description": "Reloads persons from the YAML-configuration.",
      "fields": {}
    },
    "remove_device_tracker": {
      "name": "Remove a device tracker \uD83D\uDC7B",
      "description": "Remove a device tracker from a person.",
      "fields": {
        "entity_id": {
          "name": "Person",
          "description": "The person entity ID to remove the device tracker from.",
          "required": true,
          "selector": {
            "entity": {
              "filter": [
                {
                  "domain": "person"
                }
              ]
            }
          }
        },
        "device_tracker": {
          "name": "Device tracker",
          "description": "The device tracker entity ID to remove from the person.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true,
              "filter": [
                {
                  "domain": "device_tracker"
                }
              ]
            }
          }
        }
      }
    },
    "add_device_tracker": {
      "name": "Add a device tracker \uD83D\uDC7B",
      "description": "Add a device tracker to a person.",
      "fields": {
        "entity_id": {
          "name": "Person",
          "description": "The person entity ID to add the device tracker to.",
          "required": true,
          "selector": {
            "entity": {
              "filter": [
                {
                  "domain": "person"
                }
              ]
            }
          }
        },
        "device_tracker": {
          "name": "Device tracker",
          "description": "The device tracker entity ID to add to the person.",
          "required": true,
          "selector": {
            "entity": {
              "multiple": true,
              "filter": [
                {
                  "domain": "device_tracker"
                }
              ]
            }
          }
        }
      }
    }
  },
  "input_number": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "step": 0.001,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "min": {
      "name": "Set minimum value \uD83D\uDC7B",
      "description": "Set an input number entity to its minimum value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "increment": {
      "name": "Increase value \uD83D\uDC7B",
      "description": "Increase an input number entity value by a certain amount.",
      "fields": {
        "amount": {
          "name": "Amount",
          "description": "The amount to increase the input number with. If not provided, the step of the number entity will be used.",
          "required": false,
          "selector": {
            "number": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "max": {
      "name": "Set maximum value \uD83D\uDC7B",
      "description": "Set an input number entity to its maximum value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrease value \uD83D\uDC7B",
      "description": "Decrease an input number entity value by a certain amount.",
      "fields": {
        "amount": {
          "name": "Amount",
          "description": "The amount to decrease the input number with. If not provided, the step of the number entity will be used.",
          "required": false,
          "selector": {
            "number": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_number"
            ]
          }
        ]
      }
    }
  },
  "input_select": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "select_first": {
      "name": "First",
      "description": "Selects the first option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_last": {
      "name": "Last",
      "description": "Selects the last option.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_next": {
      "name": "Next",
      "description": "Selects the next option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the last to the first option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_option": {
      "name": "Select",
      "description": "Selects an option.",
      "fields": {
        "option": {
          "required": true,
          "example": "\u0022Item A\u0022",
          "selector": {
            "text": null
          },
          "name": "Option",
          "description": "Option to be selected."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "select_previous": {
      "name": "Previous",
      "description": "Selects the previous option.",
      "fields": {
        "cycle": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Cycle",
          "description": "If the option should cycle from the first to the last option on the list."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "set_options": {
      "name": "Set options",
      "description": "Sets the options.",
      "fields": {
        "options": {
          "required": true,
          "example": "[\u0022Item A\u0022, \u0022Item B\u0022, \u0022Item C\u0022]",
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Options",
          "description": "List of options."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "random": {
      "name": "Select random option \uD83D\uDC7B",
      "description": "Select an random option for an input_select entity.",
      "fields": {
        "options": {
          "name": "Options",
          "description": "Limits the options to select from. If not provided, all options will be considered.",
          "required": false,
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "shuffle": {
      "name": "Shuffle options \uD83D\uDC7B",
      "description": "Shuffles the list of selectable options for an \u0060input_select\u0060 entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    },
    "sort": {
      "name": "Sort options \uD83D\uDC7B",
      "description": "Sorts the list of selectable options for an \u0060input_select\u0060 entity. This is not persistent and will be undone once reloaded or Home Assistant restarts.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_select"
            ]
          }
        ]
      }
    }
  },
  "input_boolean": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns on the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns off the helper.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the helper on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_boolean"
            ]
          }
        ]
      }
    }
  },
  "timer": {
    "reload": {
      "name": "Reload",
      "description": "Reloads timers from the YAML-configuration.",
      "fields": {}
    },
    "start": {
      "name": "Start",
      "description": "Starts a timer or restarts it with a provided duration.",
      "fields": {
        "duration": {
          "example": "00:01:00 or 60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Custom duration to restart the timer with."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses a running timer, retaining the remaining duration for later continuation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "cancel": {
      "name": "Cancel",
      "description": "Resets a timer\u0027s duration to the last known initial value without firing the timer finished event.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "finish": {
      "name": "Finish",
      "description": "Finishes a running timer earlier than scheduled.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "change": {
      "name": "Change",
      "description": "Changes a timer by adding or subtracting a given duration.",
      "fields": {
        "duration": {
          "default": 0,
          "required": true,
          "example": "00:01:00, 60 or -60",
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Duration to add to or subtract from the running timer."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    },
    "set_duration": {
      "name": "Set duration \uD83D\uDC7B",
      "description": "Set duration for an existing timer.",
      "fields": {
        "duration": {
          "name": "Duration",
          "description": "New duration for the timer, as a timedelta string.",
          "required": true,
          "example": "00:01:00, 60",
          "selector": {
            "text": null
          }
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "timer"
            ]
          }
        ]
      }
    }
  },
  "input_button": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "press": {
      "name": "Press",
      "description": "Mimics the physical button press on the device.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "input_button"
            ]
          }
        ]
      }
    }
  },
  "device_tracker": {
    "see": {
      "name": "See",
      "description": "Manually update the records of a seen legacy device tracker in the known_devices.yaml file.",
      "fields": {
        "mac": {
          "example": "FF:FF:FF:FF:FF:FF",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device."
        },
        "dev_id": {
          "example": "phonedave",
          "selector": {
            "text": null
          },
          "name": "Device ID",
          "description": "ID of the device (find the ID in \u0060known_devices.yaml\u0060)."
        },
        "host_name": {
          "example": "Dave",
          "selector": {
            "text": null
          },
          "name": "Hostname",
          "description": "Hostname of the device."
        },
        "location_name": {
          "example": "home",
          "selector": {
            "text": null
          },
          "name": "Location",
          "description": "Name of the location where the device is located. The options are: \u0060home\u0060, \u0060not_home\u0060, or the name of the zone."
        },
        "gps": {
          "example": "[51.509802, -0.086692]",
          "selector": {
            "object": null
          },
          "name": "GPS coordinates",
          "description": "GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539])."
        },
        "gps_accuracy": {
          "selector": {
            "number": {
              "min": 0,
              "mode": "box",
              "unit_of_measurement": "m"
            }
          },
          "name": "GPS accuracy",
          "description": "Accuracy of the GPS coordinates."
        },
        "battery": {
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Battery level",
          "description": "Battery level of the device."
        }
      }
    }
  },
  "fan": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns fan on.",
      "fields": {
        "percentage": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        },
        "preset_mode": {
          "example": "auto",
          "filter": {
            "supported_features": [
              8
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns fan off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a fan on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ]
          }
        ]
      }
    },
    "increase_speed": {
      "name": "Increase speed",
      "description": "Increases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Increment",
          "description": "Percentage step by which the speed should be increased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "decrease_speed": {
      "name": "Decrease speed",
      "description": "Decreases the speed of a fan.",
      "fields": {
        "percentage_step": {
          "advanced": true,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Decrement",
          "description": "Percentage step by which the speed should be decreased."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "oscillate": {
      "name": "Oscillate",
      "description": "Controls the oscillation of a fan.",
      "fields": {
        "oscillating": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Oscillating",
          "description": "Turns oscillation on/off."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_direction": {
      "name": "Set direction",
      "description": "Sets a fan\u0027s rotation direction.",
      "fields": {
        "direction": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "forward",
                "reverse"
              ],
              "translation_key": "direction"
            }
          },
          "name": "Direction",
          "description": "Direction of the fan rotation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_percentage": {
      "name": "Set speed",
      "description": "Sets the speed of a fan.",
      "fields": {
        "percentage": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Percentage",
          "description": "Speed of the fan."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset fan mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "auto",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset fan mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "fan"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "counter": {
    "increment": {
      "name": "Increment",
      "description": "Increments a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "decrement": {
      "name": "Decrement",
      "description": "Decrements a counter by its step size.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "reset": {
      "name": "Reset",
      "description": "Resets a counter to its initial value.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the counter to a specific value.",
      "fields": {
        "value": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Value",
          "description": "The new counter value the entity should be set to."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "counter"
            ]
          }
        ]
      }
    }
  },
  "wake_on_lan": {
    "send_magic_packet": {
      "name": "Send magic packet",
      "description": "Sends a \u0027magic packet\u0027 to wake up a device with \u0027Wake-On-LAN\u0027 capabilities.",
      "fields": {
        "mac": {
          "required": true,
          "example": "aa:bb:cc:dd:ee:ff",
          "selector": {
            "text": null
          },
          "name": "MAC address",
          "description": "MAC address of the device to wake up."
        },
        "broadcast_address": {
          "example": "192.168.255.255",
          "selector": {
            "text": null
          },
          "name": "Broadcast address",
          "description": "The IP address of the host to send the magic packet to. Defaults to \u0060255.255.255.255\u0060 and is normally not changed."
        },
        "broadcast_port": {
          "default": 9,
          "selector": {
            "number": {
              "min": 1,
              "max": 65535,
              "mode": "box"
            }
          },
          "name": "Broadcast port",
          "description": "The port to send the magic packet to. Defaults to \u00609\u0060 and is normally not changed."
        }
      }
    }
  },
  "mqtt": {
    "publish": {
      "name": "Publish",
      "description": "Publishes a message to an MQTT topic.",
      "fields": {
        "topic": {
          "required": true,
          "example": "/homeassistant/hello",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to publish to."
        },
        "payload": {
          "example": "The temperature is {{ states(\u0027sensor.temperature\u0027) }}",
          "selector": {
            "template": null
          },
          "name": "Payload",
          "description": "The payload to publish. Publishes an empty message if not provided."
        },
        "evaluate_payload": {
          "advanced": true,
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Evaluate payload",
          "description": "If \u0027Payload\u0027 is a Python bytes literal, evaluate the bytes literal and publish the raw data."
        },
        "qos": {
          "advanced": true,
          "default": 0,
          "selector": {
            "select": {
              "options": [
                "0",
                "1",
                "2"
              ]
            }
          },
          "name": "QoS",
          "description": "Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once."
        },
        "retain": {
          "default": false,
          "selector": {
            "boolean": null
          },
          "name": "Retain",
          "description": "If the message should have the retain flag set. If set, the broker stores the most recent message on a topic."
        }
      }
    },
    "dump": {
      "name": "Export",
      "description": "Writes all messages on a specific topic into the \u0060mqtt_dump.txt\u0060 file in your configuration folder.",
      "fields": {
        "topic": {
          "example": "OpenZWave/#",
          "selector": {
            "text": null
          },
          "name": "Topic",
          "description": "Topic to listen to."
        },
        "duration": {
          "default": 5,
          "selector": {
            "number": {
              "min": 1,
              "max": 300,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Duration",
          "description": "How long we should listen for messages in seconds."
        }
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads MQTT entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "input_datetime": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_datetime": {
      "name": "Set",
      "description": "Sets the date and/or time.",
      "fields": {
        "date": {
          "example": "\u00222019-04-20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date",
          "description": "The target date."
        },
        "time": {
          "example": "\u002205:04:20\u0022",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The target time."
        },
        "datetime": {
          "example": "\u00222019-04-20 05:04:20\u0022",
          "selector": {
            "text": null
          },
          "name": "Date \u0026 time",
          "description": "The target date \u0026 time."
        },
        "timestamp": {
          "selector": {
            "number": {
              "min": 0,
              "max": 9223372036854775807,
              "mode": "box"
            }
          },
          "name": "Timestamp",
          "description": "The target date \u0026 time, expressed by a UNIX timestamp."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_datetime"
            ]
          }
        ]
      }
    }
  },
  "automation": {
    "trigger": {
      "name": "Trigger",
      "description": "Triggers the actions of an automation.",
      "fields": {
        "skip_condition": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Skip conditions",
          "description": "Defines whether or not the conditions will be skipped."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles (enable / disable) an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Enables an automation.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Disables an automation.",
      "fields": {
        "stop_actions": {
          "default": true,
          "selector": {
            "boolean": null
          },
          "name": "Stop actions",
          "description": "Stops currently running actions."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "automation"
            ]
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads the automation configuration.",
      "fields": {}
    }
  },
  "input_text": {
    "reload": {
      "name": "Reload",
      "description": "Reloads helpers from the YAML-configuration.",
      "fields": {}
    },
    "set_value": {
      "name": "Set",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "This is an example text",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "The target value."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "input_text"
            ]
          }
        ]
      }
    }
  },
  "google_generative_ai_conversation": {
    "generate_content": {
      "name": "Generate content",
      "description": "Generate content from a prompt consisting of text and optionally images",
      "fields": {
        "prompt": {
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          },
          "name": "Prompt",
          "description": "The prompt",
          "example": "Describe what you see in these images"
        },
        "image_filename": {
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Image filename",
          "description": "Deprecated. Use filenames instead.",
          "example": "/config/www/image.jpg"
        },
        "filenames": {
          "required": false,
          "selector": {
            "text": {
              "multiple": true
            }
          },
          "name": "Attachment filenames",
          "description": "Attachments to add to the prompt (images, PDFs, etc)",
          "example": "/config/www/image.jpg"
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "utility_meter": {
    "reset": {
      "name": "Reset",
      "description": "Resets all counters of a utility meter.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "select"
            ],
            "integration": "utility_meter"
          }
        ]
      }
    },
    "calibrate": {
      "name": "Calibrate",
      "description": "Calibrates a utility meter sensor.",
      "fields": {
        "value": {
          "example": "100",
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Value to which set the meter."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "sensor"
            ],
            "integration": "utility_meter"
          }
        ]
      }
    }
  },
  "sonoff": {
    "send_command": {
      "name": "Send Command",
      "description": "Sends a command to a device.",
      "fields": {
        "device": {
          "name": "Device",
          "description": "Device ID to send command to.",
          "example": "1000123456"
        },
        "cmd": {
          "name": "Command",
          "description": "A single command to send.",
          "example": "switch"
        }
      }
    }
  },
  "browser_mod": {
    "sequence": {
      "name": "sequence",
      "description": "Run a sequence of services",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "sequence": {
          "name": "Actions",
          "description": "List of services to run",
          "selector": {
            "object": null
          }
        }
      }
    },
    "delay": {
      "name": "delay",
      "description": "Wait for a time",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "time": {
          "name": "Time",
          "description": "Time to wait (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        }
      }
    },
    "popup": {
      "name": "popup",
      "description": "Display a popup",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "title": {
          "name": "Title",
          "description": "Popup title",
          "selector": {
            "text": null
          }
        },
        "content": {
          "name": "Content",
          "required": true,
          "description": "Popup content (Test or lovelace card configuration)",
          "selector": {
            "object": null
          }
        },
        "size": {
          "name": "Size",
          "description": "",
          "selector": {
            "select": {
              "mode": "dropdown",
              "options": [
                "normal",
                "classic",
                "wide",
                "fullscreen"
              ]
            }
          }
        },
        "right_button": {
          "name": "Right button",
          "description": "Text of the right button",
          "selector": {
            "text": null
          }
        },
        "right_button_action": {
          "name": "Right button action",
          "description": "Action to perform when the right button is pressed",
          "selector": {
            "object": null
          }
        },
        "left_button": {
          "name": "Left button",
          "description": "Text of the left button",
          "selector": {
            "text": null
          }
        },
        "left_button_action": {
          "name": "Left button action",
          "description": "Action to perform when left button is pressed",
          "selector": {
            "object": null
          }
        },
        "dismissable": {
          "name": "User dismissable",
          "description": "Whether the popup can be closed by the user without action",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "dismiss_action": {
          "name": "Dismiss action",
          "description": "Action to perform when popup is dismissed",
          "selector": {
            "object": null
          }
        },
        "autoclose": {
          "name": "Auto close",
          "description": "Close the popup automatically on mouse, pointer or keyboard activity",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "timeout": {
          "name": "Auto close timeout",
          "description": "Time before closing (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "timeout_action": {
          "name": "Timeout action",
          "description": "Action to perform when popup is closed by timeout",
          "selector": {
            "object": null
          }
        },
        "timeout_hide_progress": {
          "name": "Hide timeout progress",
          "description": "Hide timeout progress bar",
          "selector": {
            "boolean": null
          }
        },
        "allow_nested_more_info": {
          "name": "Allow nested more-info dialogs",
          "description": "Allow nested more-info dialogs to be opened from this popup",
          "default": true,
          "selector": {
            "boolean": null
          }
        },
        "style": {
          "name": "Styles",
          "description": "CSS code to apply to the popup window",
          "selector": {
            "text": {
              "multiline": true
            }
          }
        }
      }
    },
    "more_info": {
      "name": "more_info",
      "description": "Show more-info dialog",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "entity": {
          "name": "Entity ID",
          "description": "",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "large": {
          "name": "Large size",
          "description": "",
          "default": false,
          "selector": {
            "boolean": null
          }
        },
        "ignore_popup_card": {
          "name": "Ignore any active popup-card overrides",
          "description": "",
          "default": false,
          "selector": {
            "boolean": null
          }
        }
      }
    },
    "close_popup": {
      "name": "close_popup",
      "description": "Close a popup",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        }
      }
    },
    "notification": {
      "name": "notification",
      "description": "Display a short notification",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Message to display",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "duration": {
          "name": "Auto close timeout",
          "description": "Time before closing (ms)",
          "selector": {
            "number": {
              "mode": "box"
            }
          }
        },
        "action_text": {
          "name": "Action button text",
          "description": "Text of optional action button",
          "selector": {
            "text": null
          }
        },
        "action": {
          "name": "Button action",
          "description": "Action to perform when the action button is pressed",
          "selector": {
            "object": null
          }
        }
      }
    },
    "navigate": {
      "name": "navigate",
      "description": "Navigate browser to a different page",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "path": {
          "name": "Path",
          "description": "Target path",
          "selector": {
            "text": null
          }
        }
      }
    },
    "refresh": {
      "name": "refresh",
      "description": "Refresh page",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        }
      }
    },
    "set_theme": {
      "name": "set_theme",
      "description": "Change the current theme",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "theme": {
          "name": "Theme",
          "description": "Name of theme or \u0027auto\u0027",
          "selector": {
            "text": null
          }
        },
        "dark": {
          "name": "Mode",
          "description": "Dark/light mode",
          "selector": {
            "select": {
              "options": [
                "auto",
                "light",
                "dark"
              ]
            }
          }
        },
        "primaryColor": {
          "name": "Primary Color",
          "description": "Primary theme color",
          "selector": {
            "color_rgb": null
          }
        },
        "accentColor": {
          "name": "Accent Color",
          "description": "Accent theme color",
          "selector": {
            "color_rgb": null
          }
        }
      }
    },
    "console": {
      "name": "console",
      "description": "Print text to browser console",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "message": {
          "name": "Message",
          "description": "Text to print",
          "selector": {
            "text": null
          }
        }
      }
    },
    "javascript": {
      "name": "javascript",
      "description": "Run arbitrary JavaScript code",
      "fields": {
        "browser_id": {
          "name": "Target Browser",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "user_id": {
          "name": "Target User",
          "description": "",
          "selector": {
            "entity": {
              "multiple": true,
              "filter": {
                "domain": "person"
              }
            }
          }
        },
        "code": {
          "name": "Code",
          "description": "JavaScript code to run",
          "selector": {
            "object": null
          }
        }
      }
    },
    "deregister_browser": {
      "name": "deregister_browser",
      "description": "Deregister a browser. Include at leaset one paremeter. Calling wiith either exclude parameter will deregister all browsers except those excluded.",
      "fields": {
        "browser_id": {
          "name": "Target Browsers",
          "description": "",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "browser_id_exclude": {
          "name": "Browsers to exclude",
          "description": "Exclude browser from deregister",
          "selector": {
            "device": {
              "multiple": true,
              "filter": {
                "integration": "browser_mod"
              }
            }
          }
        },
        "area_id_exclude": {
          "name": "Areas to exclude",
          "description": "Exclude browsers in area from deregister",
          "selector": {
            "area": {
              "multiple": true,
              "entity": {
                "integration": "browser_mod"
              }
            }
          }
        }
      }
    }
  },
  "climate": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns climate device on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              256
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns climate device off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles climate device, from on to off, or off to on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              128,
              256
            ]
          }
        ]
      }
    },
    "set_hvac_mode": {
      "name": "Set HVAC mode",
      "description": "Sets HVAC operation mode.",
      "fields": {
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ]
          }
        ]
      }
    },
    "set_preset_mode": {
      "name": "Set preset mode",
      "description": "Sets preset mode.",
      "fields": {
        "preset_mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Preset mode",
          "description": "Preset mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set target temperature",
      "description": "Sets the temperature setpoint.",
      "fields": {
        "temperature": {
          "filter": {
            "supported_features": [
              1
            ]
          },
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Target temperature",
          "description": "The temperature setpoint."
        },
        "target_temp_high": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Upper target temperature",
          "description": "The max temperature setpoint."
        },
        "target_temp_low": {
          "filter": {
            "supported_features": [
              2
            ]
          },
          "advanced": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 250,
              "step": 0.1,
              "mode": "box"
            }
          },
          "name": "Lower target temperature",
          "description": "The min temperature setpoint."
        },
        "hvac_mode": {
          "selector": {
            "select": {
              "options": [
                "off",
                "auto",
                "cool",
                "dry",
                "fan_only",
                "heat_cool",
                "heat"
              ],
              "translation_key": "hvac_mode"
            }
          },
          "name": "HVAC mode",
          "description": "HVAC operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              1,
              2
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set target humidity",
      "description": "Sets target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 30,
              "max": 99,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "set_fan_mode": {
      "name": "Set fan mode",
      "description": "Sets fan operation mode.",
      "fields": {
        "fan_mode": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan mode",
          "description": "Fan operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_swing_mode": {
      "name": "Set swing mode",
      "description": "Sets swing operation mode.",
      "fields": {
        "swing_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Swing mode",
          "description": "Swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "set_swing_horizontal_mode": {
      "name": "Set horizontal swing mode",
      "description": "Sets horizontal swing operation mode.",
      "fields": {
        "swing_horizontal_mode": {
          "required": true,
          "example": "on",
          "selector": {
            "text": null
          },
          "name": "Horizontal swing mode",
          "description": "Horizontal swing operation mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "climate"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    }
  },
  "cover": {
    "open_cover": {
      "name": "Open",
      "description": "Opens a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "close_cover": {
      "name": "Close",
      "description": "Closes a cover.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "set_cover_position": {
      "name": "Set position",
      "description": "Moves a cover to a specific position.",
      "fields": {
        "position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Position",
          "description": "Target position."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "stop_cover": {
      "name": "Stop",
      "description": "Stops the cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a cover open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    },
    "open_cover_tilt": {
      "name": "Open tilt",
      "description": "Tilts a cover open.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "close_cover_tilt": {
      "name": "Close tilt",
      "description": "Tilts a cover to close.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "stop_cover_tilt": {
      "name": "Stop tilt",
      "description": "Stops a tilting cover movement.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              64
            ]
          }
        ]
      }
    },
    "set_cover_tilt_position": {
      "name": "Set tilt position",
      "description": "Moves a cover tilt to a specific position.",
      "fields": {
        "tilt_position": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Tilt position",
          "description": "Target tilt positition."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              128
            ]
          }
        ]
      }
    },
    "toggle_cover_tilt": {
      "name": "Toggle tilt",
      "description": "Toggles a cover tilt open/closed.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "cover"
            ],
            "supported_features": [
              48
            ]
          }
        ]
      }
    }
  },
  "remote": {
    "turn_off": {
      "name": "Turn off",
      "description": "Sends the turn off command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Sends the turn on command.",
      "fields": {
        "activity": {
          "example": "BedroomTV",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "selector": {
            "text": null
          },
          "name": "Activity",
          "description": "Activity ID or activity name to be started."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Sends the toggle command.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command or a list of commands to a device.",
      "fields": {
        "device": {
          "example": "32756745",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to send command to."
        },
        "command": {
          "required": true,
          "example": "Play",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to send."
        },
        "num_repeats": {
          "default": 1,
          "selector": {
            "number": {
              "min": 0,
              "max": 255
            }
          },
          "name": "Repeats",
          "description": "The number of times you want to repeat the commands."
        },
        "delay_secs": {
          "default": 0.4,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Delay seconds",
          "description": "The time you want to wait in between repeated commands."
        },
        "hold_secs": {
          "default": 0,
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 0.1,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Hold seconds",
          "description": "The time you want to have it held before the release is send."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "learn_command": {
      "name": "Learn command",
      "description": "Learns a command or a list of commands from a device.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device ID to learn command from."
        },
        "command": {
          "example": "Turn on",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "A single command or a list of commands to learn."
        },
        "command_type": {
          "default": "ir",
          "selector": {
            "select": {
              "options": [
                "ir",
                "rf"
              ]
            }
          },
          "name": "Command type",
          "description": "The type of command to be learned."
        },
        "alternative": {
          "selector": {
            "boolean": null
          },
          "name": "Alternative",
          "description": "If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won\u0027t change the state."
        },
        "timeout": {
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "step": 5,
              "unit_of_measurement": "seconds"
            }
          },
          "name": "Timeout",
          "description": "Timeout for the command to be learned."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    },
    "delete_command": {
      "name": "Delete command",
      "description": "Deletes a command or a list of commands from the database.",
      "fields": {
        "device": {
          "example": "television",
          "selector": {
            "text": null
          },
          "name": "Device",
          "description": "Device from which commands will be deleted."
        },
        "command": {
          "required": true,
          "example": "Mute",
          "selector": {
            "object": null
          },
          "name": "Command",
          "description": "The single command or the list of commands to be deleted."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "remote"
            ]
          }
        ]
      }
    }
  },
  "schedule": {
    "reload": {
      "name": "Reload",
      "description": "Reloads schedules from the YAML-configuration.",
      "fields": {}
    },
    "get_schedule": {
      "name": "Get schedule",
      "description": "Retrieves the configured time ranges of one or multiple schedules.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "schedule"
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "homekit": {
    "reset_accessory": {
      "name": "Reset accessory",
      "description": "Resets a HomeKit accessory.",
      "fields": {},
      "target": {
        "entity": [
          {}
        ]
      }
    },
    "unpair": {
      "name": "Unpair an accessory or bridge",
      "description": "Forcefully removes all pairings from an accessory to allow re-pairing. Use this action if the accessory is no longer responsive, and you want to avoid deleting and re-adding the entry. Room locations, and accessory preferences will be lost.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "homekit"
          }
        ]
      }
    },
    "reload": {
      "name": "Reload",
      "description": "Reloads HomeKit and re-processes the YAML-configuration.",
      "fields": {}
    }
  },
  "cast": {
    "show_lovelace_view": {
      "name": "Show dashboard view",
      "description": "Shows a dashboard view on a Chromecast device.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "cast",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Media player entity to show the dashboard view on."
        },
        "dashboard_path": {
          "example": "lovelace-cast",
          "selector": {
            "text": null
          },
          "name": "Dashboard path",
          "description": "The URL path of the dashboard to show, defaults to lovelace if not specified."
        },
        "view_path": {
          "required": true,
          "example": "downstairs",
          "selector": {
            "text": null
          },
          "name": "View path",
          "description": "The URL path of the dashboard view to show."
        }
      }
    }
  },
  "notify": {
    "send_message": {
      "name": "Send a notification message",
      "description": "Sends a notification message.",
      "fields": {
        "message": {
          "required": true,
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Your notification message."
        },
        "title": {
          "required": false,
          "selector": {
            "text": null
          },
          "filter": {
            "supported_features": [
              1
            ]
          },
          "name": "Title",
          "description": "Title for your notification message."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "notify"
            ]
          }
        ]
      }
    },
    "persistent_notification": {
      "name": "Send a persistent notification",
      "description": "Sends a notification that is visible in the notifications panel.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          },
          "name": "Message",
          "description": "Message body of the notification."
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          },
          "name": "Title",
          "description": "Title of the notification."
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          },
          "name": "Data",
          "description": "Some integrations provide extended functionality via this field. For more information, refer to the integration documentation."
        }
      }
    },
    "mobile_app_21051182c": {
      "name": "Send a notification via mobile_app_21051182c",
      "description": "Sends a notification message using the mobile_app_21051182c integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_smart_tv_pro": {
      "name": "Send a notification via mobile_app_smart_tv_pro",
      "description": "Sends a notification message using the mobile_app_smart_tv_pro integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_ipad": {
      "name": "Send a notification via mobile_app_ipad",
      "description": "Sends a notification message using the mobile_app_ipad integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_aenics": {
      "name": "Send a notification via mobile_app_aenics",
      "description": "Sends a notification message using the mobile_app_aenics integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "mobile_app_poco_f4_gt": {
      "name": "Send a notification via mobile_app_poco_f4_gt",
      "description": "Sends a notification message using the mobile_app_poco_f4_gt integration.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "notify": {
      "name": "Send a notification with notify",
      "description": "Sends a notification message using the notify service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    },
    "lg_webos_smart_tv": {
      "name": "Send a notification with lg_webos_smart_tv",
      "description": "Sends a notification message using the lg_webos_smart_tv service.",
      "fields": {
        "message": {
          "required": true,
          "example": "The garage door has been open for 10 minutes.",
          "selector": {
            "text": null
          }
        },
        "title": {
          "example": "Your Garage Door Friend",
          "selector": {
            "text": null
          }
        },
        "target": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        },
        "data": {
          "example": "platform specific",
          "selector": {
            "object": null
          }
        }
      }
    }
  },
  "alarm_control_panel": {
    "alarm_disarm": {
      "name": "Disarm",
      "description": "Disarms the alarm.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to disarm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ]
          }
        ]
      }
    },
    "alarm_arm_home": {
      "name": "Arm home",
      "description": "Arms the alarm in the home mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "alarm_arm_away": {
      "name": "Arm away",
      "description": "Arms the alarm in the away mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "alarm_arm_night": {
      "name": "Arm night",
      "description": "Arms the alarm in the night mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "alarm_arm_vacation": {
      "name": "Arm vacation",
      "description": "Arms the alarm in the vacation mode.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              32
            ]
          }
        ]
      }
    },
    "alarm_arm_custom_bypass": {
      "name": "Arm with custom bypass",
      "description": "Arms the alarm while allowing to bypass a custom area.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "alarm_trigger": {
      "name": "Trigger",
      "description": "Triggers the alarm manually.",
      "fields": {
        "code": {
          "example": "1234",
          "selector": {
            "text": null
          },
          "name": "Code",
          "description": "Code to arm the alarm."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "alarm_control_panel"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    }
  },
  "humidifier": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the humidifier on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the humidifier off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the humidifier on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    },
    "set_mode": {
      "name": "Set mode",
      "description": "Sets the humidifier operation mode.",
      "fields": {
        "mode": {
          "required": true,
          "example": "away",
          "selector": {
            "text": null
          },
          "name": "Mode",
          "description": "Operation mode. For example, \u0022normal\u0022, \u0022eco\u0022, or \u0022away\u0022. For a list of possible values, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "set_humidity": {
      "name": "Set humidity",
      "description": "Sets the target humidity.",
      "fields": {
        "humidity": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Humidity",
          "description": "Target humidity."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "humidifier"
            ]
          }
        ]
      }
    }
  },
  "siren": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns the siren on.",
      "fields": {
        "tone": {
          "example": "fire",
          "filter": {
            "supported_features": [
              4
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Tone",
          "description": "The tone to emit. When \u0060available_tones\u0060 property is a map, either the key or the value can be used. Must be supported by the integration."
        },
        "volume_level": {
          "example": 0.5,
          "filter": {
            "supported_features": [
              8
            ]
          },
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "max": 1,
              "step": 0.05
            }
          },
          "name": "Volume",
          "description": "The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration."
        },
        "duration": {
          "example": 15,
          "filter": {
            "supported_features": [
              16
            ]
          },
          "required": false,
          "selector": {
            "text": null
          },
          "name": "Duration",
          "description": "Number of seconds the sound is played. Must be supported by the integration."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              1
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns the siren off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              2
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles the siren on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "siren"
            ],
            "supported_features": [
              3
            ]
          }
        ]
      }
    }
  },
  "vacuum": {
    "start": {
      "name": "Start",
      "description": "Starts or resumes the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8192
            ]
          }
        ]
      }
    },
    "pause": {
      "name": "Pause",
      "description": "Pauses the cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              4
            ]
          }
        ]
      }
    },
    "return_to_base": {
      "name": "Return to dock",
      "description": "Tells the vacuum cleaner to return to its dock.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              16
            ]
          }
        ]
      }
    },
    "clean_spot": {
      "name": "Clean spot",
      "description": "Tells the vacuum cleaner to do a spot clean-up.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "locate": {
      "name": "Locate",
      "description": "Locates the vacuum cleaner robot.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              512
            ]
          }
        ]
      }
    },
    "stop": {
      "name": "Stop",
      "description": "Stops the current cleaning task.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ],
            "supported_features": [
              8
            ]
          }
        ]
      }
    },
    "set_fan_speed": {
      "name": "Set fan speed",
      "description": "Sets the fan speed of the vacuum cleaner.",
      "fields": {
        "fan_speed": {
          "required": true,
          "example": "low",
          "selector": {
            "text": null
          },
          "name": "Fan speed",
          "description": "Fan speed. The value depends on the integration. Some integrations have speed steps, like \u0027medium\u0027. Some use a percentage, between 0 and 100."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    },
    "send_command": {
      "name": "Send command",
      "description": "Sends a command to the vacuum cleaner.",
      "fields": {
        "command": {
          "required": true,
          "example": "set_dnd_timer",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Command to execute. The commands are integration-specific."
        },
        "params": {
          "example": "{ \u0022key\u0022: \u0022value\u0022 }",
          "selector": {
            "object": null
          },
          "name": "Parameters",
          "description": "Parameters for the command. The parameters are integration-specific."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "vacuum"
            ]
          }
        ]
      }
    }
  },
  "webostv": {
    "button": {
      "name": "Button",
      "description": "Sends a button press command.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method."
        },
        "button": {
          "required": true,
          "example": "LEFT",
          "selector": {
            "text": null
          },
          "name": "Button",
          "description": "Name of the button to press.  Known possible values are LEFT, RIGHT, DOWN, UP, HOME, MENU, BACK, ENTER, DASH, INFO, ASTERISK, CC, EXIT, MUTE, RED, GREEN, BLUE, YELLOW, VOLUMEUP, VOLUMEDOWN, CHANNELUP, CHANNELDOWN, PLAY, PAUSE, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9."
        }
      }
    },
    "command": {
      "name": "Command",
      "description": "Sends a command.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities where to run the API method."
        },
        "command": {
          "required": true,
          "example": "system.launcher/open",
          "selector": {
            "text": null
          },
          "name": "Command",
          "description": "Endpoint of the command."
        },
        "payload": {
          "example": "target: https://www.google.com",
          "advanced": true,
          "selector": {
            "object": null
          },
          "name": "Payload",
          "description": "An optional payload to provide to the endpoint in the format of key value pair(s)."
        }
      },
      "response": {
        "optional": true
      }
    },
    "select_sound_output": {
      "name": "Select sound output",
      "description": "Sends the TV the command to change sound output.",
      "fields": {
        "entity_id": {
          "required": true,
          "selector": {
            "entity": {
              "integration": "webostv",
              "domain": "media_player"
            }
          },
          "name": "Entity",
          "description": "Name(s) of the webostv entities to change sound output on."
        },
        "sound_output": {
          "required": true,
          "example": "external_speaker",
          "selector": {
            "text": null
          },
          "name": "Sound output",
          "description": "Name of the sound output to switch to."
        }
      },
      "response": {
        "optional": true
      }
    }
  },
  "weather": {
    "get_forecasts": {
      "name": "Get forecasts",
      "description": "Retrieves the forecast from selected weather services.",
      "fields": {
        "type": {
          "required": true,
          "selector": {
            "select": {
              "options": [
                "daily",
                "hourly",
                "twice_daily"
              ],
              "translation_key": "forecast_type"
            }
          },
          "name": "Forecast type",
          "description": "The scope of the weather forecast."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "weather"
            ],
            "supported_features": [
              1,
              2,
              4
            ]
          }
        ]
      },
      "response": {
        "optional": false
      }
    }
  },
  "flux_led": {
    "set_custom_effect": {
      "name": "Set custom effect",
      "description": "Sets a custom light effect.",
      "fields": {
        "colors": {
          "example": "- [255,0,0]\n- [0,255,0]\n- [0,0,255]\n",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Colors",
          "description": "List of colors for the custom effect (RGB). (Max 16 Colors)."
        },
        "speed_pct": {
          "example": 80,
          "default": 50,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Speed",
          "description": "The speed of the effect in % (0-100, default 50)."
        },
        "transition": {
          "example": "jump",
          "default": "gradual",
          "required": false,
          "selector": {
            "select": {
              "options": [
                "gradual",
                "jump",
                "strobe"
              ]
            }
          },
          "name": "Transition",
          "description": "Effect transition."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "flux_led",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_zones": {
      "name": "Set zones",
      "description": "Sets strip zones for Addressable v3 controllers (0xA3).",
      "fields": {
        "colors": {
          "example": "- [255,0,0]\n- [0,255,0]\n- [0,0,255]\n- [255,255,255]\n",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Colors",
          "description": "List of colors for each zone (RGB). The length of each zone is the number of pixels per segment divided by the number of colors. (Max 2048 Colors)."
        },
        "speed_pct": {
          "example": 80,
          "default": 50,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Speed",
          "description": "The speed of the effect in % (0-100, default 50)."
        },
        "effect": {
          "example": "running_water",
          "default": "static",
          "required": false,
          "selector": {
            "select": {
              "options": [
                "static",
                "running_water",
                "strobe",
                "jump",
                "breathing"
              ]
            }
          },
          "name": "Effect",
          "description": "Effect."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "flux_led",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "set_music_mode": {
      "name": "Set music mode",
      "description": "Configures music mode on Controller RGB with MIC (0x08), Addressable v2 (0xA2), and Addressable v3 (0xA3) devices that have a built-in microphone.",
      "fields": {
        "sensitivity": {
          "example": 80,
          "default": 100,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Sensitivity",
          "description": "Microphone sensitivity (0-100)."
        },
        "brightness": {
          "example": 80,
          "default": 100,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Light brightness (0-100)."
        },
        "light_screen": {
          "default": false,
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Light screen",
          "description": "Light screen mode for 2 dimensional pixels (Addressable models only)."
        },
        "effect": {
          "example": 1,
          "default": 1,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 16
            }
          },
          "name": "Effect",
          "description": "Effect (1-16 on Addressable models, 0-3 on RGB with MIC models)."
        },
        "foreground_color": {
          "example": "[255, 100, 100]",
          "required": false,
          "selector": {
            "color_rgb": null
          },
          "name": "Foreground color",
          "description": "The foreground RGB color."
        },
        "background_color": {
          "example": "[255, 100, 100]",
          "required": false,
          "selector": {
            "color_rgb": null
          },
          "name": "Background color",
          "description": "The background RGB color (Addressable models only)."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "flux_led",
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "switch": {
    "turn_off": {
      "name": "Turn off",
      "description": "Turns a switch off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turns a switch on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    },
    "toggle": {
      "name": "Toggle",
      "description": "Toggles a switch on/off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "watchman": {
    "report": {
      "name": "Report",
      "description": "Run the Watchman report",
      "fields": {
        "parse_config": {
          "example": true,
          "default": false,
          "required": false,
          "selector": {
            "boolean": null
          },
          "name": "Force configuration parsing",
          "description": "Parse configuration files before generating the report. Usually, this is done automatically by Watchman, so this flag is typically not required."
        },
        "advanced_options": {
          "collapsed": true,
          "fields": {
            "action": {
              "example": "persistent_notification.create",
              "default": "persistent_notification.create",
              "required": false,
              "advanced": true,
              "selector": {
                "text": null
              }
            },
            "data": {
              "example": "title: Watchman Report",
              "required": false,
              "advanced": true
            },
            "chunk_size": {
              "example": 3500,
              "default": 3500,
              "required": false,
              "advanced": true,
              "selector": {
                "number": {
                  "min": 0,
                  "max": 100000,
                  "mode": "box"
                }
              }
            },
            "create_file": {
              "example": true,
              "default": true,
              "required": false,
              "selector": {
                "boolean": null
              }
            }
          }
        }
      }
    }
  },
  "text": {
    "set_value": {
      "name": "Set value",
      "description": "Sets the value.",
      "fields": {
        "value": {
          "required": true,
          "example": "Hello world!",
          "selector": {
            "text": null
          },
          "name": "Value",
          "description": "Enter your text."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "text"
            ]
          }
        ]
      }
    }
  },
  "water_heater": {
    "turn_on": {
      "name": "Turn on",
      "description": "Turns water heater on.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turns water heater off.",
      "fields": {},
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_away_mode": {
      "name": "Set away mode",
      "description": "Turns away mode on/off.",
      "fields": {
        "away_mode": {
          "required": true,
          "selector": {
            "boolean": null
          },
          "name": "Away mode",
          "description": "New value of away mode."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_temperature": {
      "name": "Set temperature",
      "description": "Sets the target temperature.",
      "fields": {
        "temperature": {
          "required": true,
          "selector": {
            "number": {
              "min": 0,
              "max": 100,
              "step": 0.5,
              "unit_of_measurement": "\u00B0"
            }
          },
          "name": "Temperature",
          "description": "New target temperature for the water heater."
        },
        "operation_mode": {
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    },
    "set_operation_mode": {
      "name": "Set operation mode",
      "description": "Sets the operation mode.",
      "fields": {
        "operation_mode": {
          "required": true,
          "example": "eco",
          "selector": {
            "text": null
          },
          "name": "Operation mode",
          "description": "New value of the operation mode. For a list of possible modes, refer to the integration documentation."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "water_heater"
            ]
          }
        ]
      }
    }
  },
  "tplink": {
    "random_effect": {
      "name": "Random effect",
      "description": "Sets a random effect.",
      "fields": {
        "init_states": {
          "example": [
            199,
            99,
            96
          ],
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Initial states",
          "description": "Initial HSV sequence."
        },
        "backgrounds": {
          "example": "- [199, 89, 50]\n- [160, 50, 50]\n- [180, 100, 50]\n",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Backgrounds",
          "description": "List of HSV sequences (Max 16)."
        },
        "segments": {
          "example": "0, 2, 4, 6, 8",
          "default": 0,
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Segments",
          "description": "List of segments (0 for all)."
        },
        "brightness": {
          "example": 90,
          "default": 100,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Initial brightness."
        },
        "duration": {
          "example": 0,
          "default": 0,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 5000,
              "unit_of_measurement": "ms"
            }
          },
          "name": "Duration",
          "description": "Duration."
        },
        "transition": {
          "example": 2000,
          "default": 0,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 6000,
              "unit_of_measurement": "ms"
            }
          },
          "name": "Transition",
          "description": "Transition."
        },
        "fadeoff": {
          "example": 2000,
          "default": 0,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 3000,
              "unit_of_measurement": "ms"
            }
          },
          "name": "Fade off",
          "description": "Fade off."
        },
        "hue_range": {
          "example": "340, 360",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Hue range",
          "description": "Range of hue."
        },
        "saturation_range": {
          "example": "40, 95",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Saturation range",
          "description": "Range of saturation."
        },
        "brightness_range": {
          "example": "90, 100",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Brightness range",
          "description": "Range of brightness."
        },
        "transition_range": {
          "example": "2000, 6000",
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Transition range",
          "description": "Range of transition."
        },
        "random_seed": {
          "example": 80,
          "default": 100,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 600
            }
          },
          "name": "Random seed",
          "description": "Random seed."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tplink",
            "domain": [
              "light"
            ]
          }
        ]
      }
    },
    "sequence_effect": {
      "name": "Sequence effect",
      "description": "Sets a sequence effect.",
      "fields": {
        "sequence": {
          "example": "- [340, 20, 50]\n- [20, 50, 50]\n- [0, 100, 50]\n",
          "required": true,
          "selector": {
            "object": null
          },
          "name": "Sequence",
          "description": "List of HSV sequences (Max 16)."
        },
        "segments": {
          "example": "0, 2, 4, 6, 8",
          "default": 0,
          "required": false,
          "selector": {
            "object": null
          },
          "name": "Segments",
          "description": "List of segments (0 for all)."
        },
        "brightness": {
          "example": 80,
          "default": 100,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 100,
              "unit_of_measurement": "%"
            }
          },
          "name": "Brightness",
          "description": "Initial brightness."
        },
        "duration": {
          "example": 0,
          "default": 0,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 5000,
              "unit_of_measurement": "ms"
            }
          },
          "name": "Duration",
          "description": "Duration."
        },
        "repeat_times": {
          "example": 0,
          "default": 0,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 10
            }
          },
          "name": "Repetitions",
          "description": "Repetitions (0 for continuous)."
        },
        "transition": {
          "example": 2000,
          "default": 0,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 6000,
              "unit_of_measurement": "ms"
            }
          },
          "name": "Transition",
          "description": "Transition."
        },
        "spread": {
          "example": 1,
          "default": 0,
          "required": false,
          "selector": {
            "number": {
              "min": 0,
              "step": 1,
              "max": 16
            }
          },
          "name": "Spread",
          "description": "Speed of spread."
        },
        "direction": {
          "example": 1,
          "default": 4,
          "required": false,
          "selector": {
            "number": {
              "min": 1,
              "step": 1,
              "max": 4
            }
          },
          "name": "Direction",
          "description": "Direction."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "tplink",
            "domain": [
              "light"
            ]
          }
        ]
      }
    }
  },
  "template": {
    "reload": {
      "name": "Reload",
      "description": "Reloads template entities from the YAML-configuration.",
      "fields": {}
    }
  },
  "spook": {
    "random_fail": {
      "name": "Random fail \uD83D\uDC7B",
      "description": "Performing this action will randomly fail.",
      "fields": {}
    },
    "boo": {
      "name": "Boo! \uD83D\uDC7B",
      "description": "Calling this action spooks Home Assistant. Performing this action will always fail.",
      "fields": {}
    }
  },
  "repairs": {
    "unignore_all": {
      "name": "Unignore all issues \uD83D\uDC7B",
      "description": "Unignore all issues currently raised in Home Assistant Repairs.",
      "fields": {}
    },
    "ignore_all": {
      "name": "Ignore all issues \uD83D\uDC7B",
      "description": "Ignore all issues currently raised in Home Assistant Repairs.",
      "fields": {}
    },
    "remove": {
      "name": "Remove issue \uD83D\uDC7B",
      "description": "Removes a manually created Home Assistant repairs issue. This action can only remove issues created with the \u0060repairs_create\u0060 action.",
      "fields": {
        "issue_id": {
          "name": "Issue ID",
          "description": "The issue ID to remove.",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    },
    "create": {
      "name": "Create issue \uD83D\uDC7B",
      "description": "Manually create and raise a issue in Home Assistant repairs.",
      "fields": {
        "title": {
          "name": "Title",
          "description": "The title of the issue.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "description": {
          "name": "Description",
          "description": "The description of the issue. Supports Markdown.",
          "required": true,
          "selector": {
            "text": {
              "multiline": true
            }
          }
        },
        "issue_id": {
          "name": "Issue ID",
          "description": "The issue can have an identifier, which allows you to cancel it later with that ID if needed. It also prevent duplicate issues to be created. If not provided, a random ID will be generated.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "domain": {
          "name": "Domain",
          "description": "This field can be used to set the domain of the issue. For example, by default (if not set), it will use \u0022spook\u0022. This causes Spook to be shown in the logo/image of the issue. If you set it to \u0022homeassistant\u0022, the Home Assistant logo will be used, or use \u0022hue\u0022, \u0022zwave_js\u0022, \u0022mqtt\u0022, etc. to use the logo of that integration.",
          "required": false,
          "selector": {
            "text": null
          }
        },
        "severity": {
          "name": "Severity",
          "description": "The severity of the issue. This will be used to determine the priority of the issue. If not set, \u0022warning\u0022 will be used",
          "required": false,
          "selector": {
            "select": {
              "options": [
                {
                  "label": "Warning",
                  "value": "warning"
                },
                {
                  "label": "Error",
                  "value": "error"
                },
                {
                  "label": "Critical",
                  "value": "critical"
                }
              ]
            }
          }
        },
        "persistent": {
          "name": "Persistent",
          "description": "If the issue should be persistent, which means it will survive restarts of Home Assistant. By default, issues are not persistent.",
          "required": false,
          "selector": {
            "boolean": null
          }
        }
      }
    }
  },
  "blueprint": {
    "import": {
      "name": "Import blueprint \uD83D\uDC7B",
      "description": "Import a blueprint.",
      "fields": {
        "url": {
          "name": "URL",
          "description": "The URL to import the blueprint from.",
          "required": true,
          "selector": {
            "text": null
          }
        }
      }
    }
  },
  "nodered": {
    "trigger": {
      "name": "Trigger a Node-RED flow",
      "description": "Send a message to a Node-RED flow that has been exposed to Home Assistant.",
      "fields": {
        "output_path": {
          "default": "0",
          "example": "1,2",
          "selector": {
            "text": null
          },
          "name": "Output Path",
          "description": "Comma separated list of paths to send the message to. Zero is used to send the message to all paths."
        },
        "message": {
          "selector": {
            "object": null
          },
          "name": "Message",
          "description": "The message object that will be sent to the next node."
        }
      },
      "target": {
        "entity": [
          {
            "integration": "nodered",
            "domain": [
              "switch"
            ]
          }
        ]
      }
    }
  },
  "bermuda": {
    "dump_devices": {
      "name": "Dump Devices",
      "description": "Returns the internal data structure, optionally limited to the given address(es). Includes the rssi and other info from each scanner",
      "fields": {
        "addresses": {
          "required": false,
          "example": "EE:E8:37:9F:6B:54 C7:B8:C6:B0:27:11 AA:AA:AA:AA:AA:AA",
          "default": "",
          "name": "Addresses",
          "description": "An optional space-separated list of MAC addresses to return info on. If blank get all addresses."
        },
        "configured_devices": {
          "required": false,
          "example": "False",
          "default": true,
          "name": "Configured Devices",
          "description": "Select to include only scanners and configured devices in the output."
        },
        "redact": {
          "required": false,
          "example": "False",
          "default": false,
          "name": "Redact",
          "description": "Set to TRUE to ensure MAC addresses are redacted in output for privacy."
        }
      },
      "response": {
        "optional": false
      }
    }
  },
  "time": {
    "set_value": {
      "name": "Set Time",
      "description": "Sets the time.",
      "fields": {
        "time": {
          "required": true,
          "example": "22:15",
          "selector": {
            "time": null
          },
          "name": "Time",
          "description": "The time to set."
        }
      },
      "target": {
        "entity": [
          {
            "domain": [
              "time"
            ]
          }
        ]
      }
    }
  },
  "ssh": {
    "execute_command": {
      "name": "Execute command",
      "description": "Execute a command on the selected devices.",
      "fields": {
        "command": {
          "name": "Command",
          "description": "The command to execute.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "timeout": {
          "name": "Timeout",
          "description": "The timeout of the command.",
          "selector": {
            "number": {
              "min": 0,
              "max": 60,
              "unit_of_measurement": "s"
            }
          }
        },
        "variables": {
          "name": "Variables",
          "description": "Variables to pass to the command. Example: A variable \u0060name\u0060 can be used inside the command as \u0060@{name}\u0060.",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "ssh"
          }
        ],
        "entity": [
          {
            "integration": "ssh"
          }
        ]
      },
      "response": {
        "optional": true
      }
    },
    "run_action": {
      "name": "Run action",
      "description": "Run an action on the selected devices.",
      "fields": {
        "key": {
          "name": "Key",
          "description": "The key of the action command.",
          "required": true,
          "selector": {
            "text": null
          }
        },
        "variables": {
          "name": "Variables",
          "description": "Variables to pass to the command.",
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "device": [
          {
            "integration": "ssh"
          }
        ],
        "entity": [
          {
            "integration": "ssh"
          }
        ]
      },
      "response": {
        "optional": true
      }
    },
    "poll_sensor": {
      "name": "Poll sensor",
      "description": "Poll one or more sensors.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "ssh"
          }
        ],
        "entity": [
          {
            "integration": "ssh",
            "domain": [
              "binary_sensor",
              "number",
              "select",
              "sensor",
              "switch",
              "text",
              "update"
            ]
          }
        ]
      },
      "response": {
        "optional": true
      }
    },
    "set_value": {
      "name": "Set value",
      "description": "Set the value of one or more controllable sensors.",
      "fields": {
        "values": {
          "name": "Values",
          "description": "Values in the same order as the target entities.",
          "required": true,
          "selector": {
            "object": null
          }
        }
      },
      "target": {
        "device": [],
        "entity": [
          {
            "integration": "ssh",
            "domain": [
              "number",
              "select",
              "switch",
              "text",
              "update"
            ]
          }
        ]
      },
      "response": {
        "optional": true
      }
    },
    "turn_on": {
      "name": "Turn on",
      "description": "Turn the selected devices on.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "ssh"
          }
        ],
        "entity": [
          {
            "integration": "ssh"
          }
        ]
      },
      "response": {
        "optional": true
      }
    },
    "turn_off": {
      "name": "Turn off",
      "description": "Turn the selected devices off.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "ssh"
          }
        ],
        "entity": [
          {
            "integration": "ssh"
          }
        ]
      },
      "response": {
        "optional": true
      }
    },
    "restart": {
      "name": "Restart",
      "description": "Restart the selected devices.",
      "fields": {},
      "target": {
        "device": [
          {
            "integration": "ssh"
          }
        ],
        "entity": [
          {
            "integration": "ssh"
          }
        ]
      },
      "response": {
        "optional": true
      }
    }
  }
}